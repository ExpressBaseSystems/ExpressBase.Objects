using ExpressBase.Common;
using ExpressBase.Common.Data;
using ExpressBase.Common.Enums;
using ExpressBase.Common.Extensions;
using ExpressBase.Common.LocationNSolution;
using ExpressBase.Common.Objects;
using ExpressBase.Common.Objects.Attributes;
using ExpressBase.Common.Structures;
using ExpressBase.Objects.WebFormRelated;
using ExpressBase.Objects.Objects;
using ExpressBase.Objects.Objects.DVRelated;
using ExpressBase.Objects.ServiceStack_Artifacts;
using ExpressBase.Security;
using Microsoft.CodeAnalysis.CSharp.Scripting;
using Microsoft.CodeAnalysis.Scripting;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using ServiceStack;
using ServiceStack.RabbitMq;
using ServiceStack.Redis;
using System;
using System.Collections.Generic;
using System.Data.Common;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text.RegularExpressions;
using ExpressBase.Common.Constants;
using ExpressBase.CoreBase.Globals;

namespace ExpressBase.Objects
{
    [HideInToolBox]
    [EnableInBuilder(BuilderType.WebForm)]
    [BuilderTypeEnum(BuilderType.WebForm)]
    public class EbWebForm : EbForm
    {
        public EbWebForm()
        {
            //this.Validators = new List<EbValidator>();
            this.DisableDelete = new List<EbSQLValidator>();
            this.DisableCancel = new List<EbSQLValidator>();
            this.BeforeSaveRoutines = new List<EbRoutines>();
            this.AfterSaveRoutines = new List<EbRoutines>();
            this.DataPushers = new List<EbDataPusher>();
            this.TitleExpression = new EbScript();
            this.PrintDocs = new List<ObjectBasicInfo>();
        }

        public override int TableRowId { get; set; }

        public WebformData FormData { get; set; }

        public WebformData FormDataBackup { get; set; }

        public WebFormSchema FormSchema { get; set; }

        public User UserObj { get; set; }

        public int LocationId { get; set; }

        public Eb_Solution SolutionObj { get; set; }

        public FG_Root FormGlobals { get; set; }

        public bool IsLocEditable { get; set; }

        public bool ExeDataPusher { get; set; }

        public EbDataPusherConfig DataPusherConfig { get; set; }

        public static EbOperations Operations = WFOperations.Instance;

        internal DbConnection DbConnection { get; set; }

        private DbTransaction DbTransaction { get; set; }

        [PropertyGroup("Events")]
        [EnableInBuilder(BuilderType.WebForm)]
        [PropertyEditor(PropertyEditorType.Collection)]
        public List<EbSQLValidator> DisableDelete { get; set; }

        [PropertyGroup("Behavior")]
        [EnableInBuilder(BuilderType.WebForm)]
        public WebFormAfterSaveModes FormModeAfterSave { get; set; }

        [PropertyGroup("Events")]
        [EnableInBuilder(BuilderType.WebForm)]
        [PropertyEditor(PropertyEditorType.Collection)]
        public List<EbSQLValidator> DisableCancel { get; set; }

        [PropertyGroup("Events")]
        [EnableInBuilder(BuilderType.WebForm)]
        [PropertyEditor(PropertyEditorType.Collection)]
        public List<EbRoutines> BeforeSaveRoutines { get; set; }

        [PropertyGroup("Events")]
        [EnableInBuilder(BuilderType.WebForm)]
        [PropertyEditor(PropertyEditorType.Collection)]
        public List<EbRoutines> AfterSaveRoutines { get; set; }

        [PropertyGroup("Miscellaneous")]
        [EnableInBuilder(BuilderType.WebForm)]
        [PropertyEditor(PropertyEditorType.ObjectSelector)]
        [OSE_ObjectTypes(EbObjectTypes.iReport)]
        [HideInPropertyGrid]
        public string PrintDoc { get; set; }//deprecated 

        [PropertyGroup("Behavior")]
        [EnableInBuilder(BuilderType.WebForm)]
        [PropertyEditor(PropertyEditorType.ObjectSelectorCollection)]
        [OSE_ObjectTypes(EbObjectTypes.iReport)]
        public List<ObjectBasicInfo> PrintDocs { get; set; }

        [EnableInBuilder(BuilderType.WebForm)]
        [HideInPropertyGrid]
        public string AutoGeneratedVizRefId { get; set; }

        [PropertyGroup(PGConstants.EXTENDED)]
        [Alias("Auto deploy table view")]
        [EnableInBuilder(BuilderType.WebForm)]
        public bool AutoDeployTV { get; set; }

        [PropertyGroup(PGConstants.DATA)]
        [EnableInBuilder(BuilderType.WebForm)]
        [PropertyEditor(PropertyEditorType.Collection)]
        public List<EbDataPusher> DataPushers { get; set; }

        [PropertyGroup(PGConstants.EXTENDED)]
        [EnableInBuilder(BuilderType.WebForm)]
        [PropertyEditor(PropertyEditorType.ScriptEditorJS)]
        [HelpText("Define Title Expression")]
        public EbScript TitleExpression { get; set; }

        public override string GetHead()
        {
            string head = string.Empty;

            foreach (EbControl c in this.Controls)
                head += c.GetHead();

            return head;
        }

        public override string GetHtml()
        {
            string html = "<form id='@ebsid@' isrendermode='@rmode@' ebsid='@ebsid@' class='formB-box form-buider-form ebcont-ctrl' eb-form='true'  eb-root-obj-container ui-inp eb-type='WebForm' @tabindex@>";

            foreach (EbControl c in this.Controls)
                html += c.GetHtml();

            html += "</form>";

            return html
                .Replace("@name@", this.Name)
                .Replace("@ebsid@", this.EbSid)
                .Replace("@rmode@", IsRenderMode.ToString().ToLower())
                .Replace("@tabindex@", IsRenderMode ? string.Empty : " tabindex='1'");
        }

        //Operations to be performed before form object save - table name required, table name repetition, calculate dependency
        public override void BeforeSave(IServiceClient serviceClient, IRedisClient redis)
        {
            BeforeSaveHelper.BeforeSave(this, serviceClient, redis);
        }

        public void BeforeSave(Service service)
        {
            BeforeSaveHelper.BeforeSave(this, null, null);
        }

        //get all control container as flat structure
        public List<EbControlContainer> GetAllContainers(EbControlContainer _container, List<EbControlContainer> _list = null)
        {
            if (_list == null)
                _list = new List<EbControlContainer>();
            _list.Add(_container);
            foreach (EbControl c in this.Controls)
            {
                if (c is EbControlContainer)
                {
                    _list = GetAllContainers(_container, _list);
                }
            }
            return _list;
        }

        //import data - using data reader in dg - from another form linked in ps 
        public void ImportData(IDatabase DataDB, Service Service, List<Param> Param, string Trigger, int RowId)
        {
            EbControl[] Allctrls = this.Controls.FlattenAllEbControls();
            EbControl TriggerCtrl = null;
            List<EbDataGrid> DGs = new List<EbDataGrid>();
            for (int i = 0; i < Allctrls.Length; i++)
            {
                if (Allctrls[i].Name.Equals(Trigger))
                    TriggerCtrl = Allctrls[i];

                if (Allctrls[i] is EbDataGrid)
                    DGs.Add(Allctrls[i] as EbDataGrid);
            }
            if (TriggerCtrl == null)
                return;

            this.FormData = new WebformData();

            if (TriggerCtrl.DependedDG != null && TriggerCtrl.DependedDG.Count > 0)
            {
                this.GetDGsEmptyModel();
                foreach (string dgName in TriggerCtrl.DependedDG)
                {
                    EbDataGrid _dg = DGs.Find(e => e.Name == dgName);
                    if (_dg == null)
                        break;
                    TableSchema _sc = this.FormSchema.Tables.Find(tbl => tbl.TableName == _dg.TableName);
                    if (_sc == null)
                        break;

                    EbDataReader dataReader = Service.Redis.Get<EbDataReader>(_dg.DataSourceId);
                    if (dataReader == null)
                    {
                        EbObjectParticularVersionResponse result = Service.Gateway.Send<EbObjectParticularVersionResponse>(new EbObjectParticularVersionRequest { RefId = _dg.DataSourceId });
                        dataReader = EbSerializers.Json_Deserialize(result.Data[0].Json);
                        Service.Redis.Set<EbDataReader>(_dg.DataSourceId, dataReader);
                    }
                    foreach (Param item in dataReader.InputParams)
                    {
                        foreach (Param _p in Param)
                        {
                            if (item.Name == _p.Name)
                                _p.Type = item.Type;
                        }
                    }
                    DataSourceDataSetResponse response = Service.Gateway.Send<DataSourceDataSetResponse>(new DataSourceDataSetRequest { RefId = _dg.DataSourceId, Params = Param });

                    SingleTable Table = new SingleTable();
                    Dictionary<EbDGPowerSelectColumn, string> psDict = new Dictionary<EbDGPowerSelectColumn, string>();

                    int rowCounter = -501;
                    foreach (EbDataRow _row in response.DataSet.Tables[0].Rows)
                    {
                        SingleRow Row = new SingleRow();
                        if (_dg.IsLoadDataSourceInEditMode && RowId > 0 && _row[FormConstants.id] != null)
                            Row.RowId = Convert.ToInt32(_row[FormConstants.id]);// assuming id is RowId /////
                        else
                            Row.RowId = rowCounter--;
                        foreach (ColumnSchema _column in _sc.Columns)
                        {
                            EbDataColumn dc = response.DataSet.Tables[0].Columns[_column.ColumnName];
                            if (dc != null && !_row.IsDBNull(dc.ColumnIndex))
                            {
                                string _formattedData = _row[dc.ColumnIndex].ToString();
                                if (_column.Control is EbDGPowerSelectColumn)
                                {
                                    if (!_formattedData.IsNullOrEmpty())
                                    {
                                        if (!psDict.ContainsKey(_column.Control as EbDGPowerSelectColumn))
                                        {
                                            psDict.Add(_column.Control as EbDGPowerSelectColumn, _formattedData);
                                        }
                                        else
                                        {
                                            psDict[_column.Control as EbDGPowerSelectColumn] += CharConstants.COMMA + _formattedData;
                                        }
                                    }
                                }
                                Row.Columns.Add(_column.Control.GetSingleColumn(this.UserObj, this.SolutionObj, _formattedData));
                            }
                            else
                            {
                                Row.Columns.Add(this.FormData.DGsRowDataModel[_sc.TableName].GetColumn(_column.ColumnName));
                            }
                        }
                        Table.Add(Row);
                    }
                    this.FormData.MultipleTables.Add(_dg.TableName, Table);

                    Dictionary<string, string> QrsDict = new Dictionary<string, string>();
                    foreach (KeyValuePair<EbDGPowerSelectColumn, string> psItem in psDict)
                    {
                        string t = psItem.Key.GetSelectQuery(DataDB, Service, psItem.Value);
                        QrsDict.Add(psItem.Key.EbSid, t);
                    }
                    if (QrsDict.Count > 0)
                    {
                        EbDataSet dataset = DataDB.DoQueries(string.Join(CharConstants.SPACE, QrsDict.Select(d => d.Value)));
                        int i = 0;
                        foreach (KeyValuePair<string, string> item in QrsDict)
                        {
                            SingleTable Tbl = new SingleTable();
                            this.GetFormattedData(dataset.Tables[i++], Tbl);
                            //this.FormData.ExtendedTables.Add(item.Key, Tbl);//ps//dup for backward compatibility
                            this.FormData.PsDm_Tables.Add(item.Key, Tbl);
                        }
                        this.PostFormatFormData();
                    }
                }
            }

            else if (TriggerCtrl is EbPowerSelect && !(TriggerCtrl as EbPowerSelect).DataImportId.IsNullOrEmpty())
            {
                Param[0].Type = ((int)EbDbTypes.Int32).ToString();
                EbWebForm _form = Service.Redis.Get<EbWebForm>((TriggerCtrl as EbPowerSelect).DataImportId);
                if (_form == null)
                {
                    EbObjectParticularVersionResponse result = Service.Gateway.Send<EbObjectParticularVersionResponse>(new EbObjectParticularVersionRequest { RefId = (TriggerCtrl as EbPowerSelect).DataImportId });
                    _form = EbSerializers.Json_Deserialize(result.Data[0].Json);
                    Service.Redis.Set<EbWebForm>((TriggerCtrl as EbPowerSelect).DataImportId, _form);
                }
                _form.AfterRedisGet(Service);
                _form.RefId = (TriggerCtrl as EbPowerSelect).DataImportId;
                _form.UserObj = this.UserObj;
                _form.SolutionObj = this.SolutionObj;
                _form.TableRowId = Param[0].ValueTo;
                _form.GetImportData(DataDB, Service, this);
                //this.FormData = _form.FormData;
            }
        }

        //public void GetImportData123(IDatabase DataDB, Service Service, EbWebForm Form)
        //{
        //    this.RefreshFormData(DataDB, Service);

        //    foreach (TableSchema _table in this.FormSchema.Tables)
        //    {
        //        if (this.FormData.MultipleTables.ContainsKey(_table.TableName))
        //        {
        //            SingleTable Table = this.FormData.MultipleTables[_table.TableName];

        //            int rowCounter = -501;
        //            foreach (SingleRow Row in Table)
        //            {
        //                Row.Columns.RemoveAll(e => e.Name == "id");
        //                Row.RowId = rowCounter--;
        //            }

        //            this.FormData.MultipleTables.Remove(_table.TableName);
        //            if (_table.TableName == this.FormSchema.MasterTable)
        //            {
        //                this.FormData.MultipleTables.Add(Form.Name, Table);
        //                this.FormData.MasterTable = Form.Name;
        //            }
        //            else
        //            {
        //                if (_table.TableType == WebFormTableTypes.Normal)
        //                    this.FormData.MultipleTables[this.FormData.MasterTable][0].Columns.AddRange(Table[0].Columns);
        //                else
        //                    this.FormData.MultipleTables.Add(_table.ContainerName, Table);
        //            }
        //        }
        //    }
        //}

        public void GetImportData(IDatabase DataDB, Service Service, EbWebForm Form)//COPY this TO Form
        {
            this.RefreshFormData(DataDB, Service);

            foreach (TableSchema _t in this.FormSchema.Tables)
            {
                SingleTable Table = this.FormData.MultipleTables[_t.TableName];
                if (_t.TableName == this.FormSchema.MasterTable)
                    continue;
                if (_t.TableType == WebFormTableTypes.Normal && Table.Count > 0)
                {
                    this.FormData.MultipleTables[this.FormData.MasterTable][0].Columns.AddRange(Table[0].Columns);
                }
            }

            Form.GetEmptyModel();
            foreach (TableSchema _table in Form.FormSchema.Tables)
            {
                if (_table.TableType == WebFormTableTypes.Grid)
                {
                    TableSchema _t = this.FormSchema.Tables.Find(e => e.ContainerName == _table.ContainerName);
                    if (_t != null)
                    {
                        int rc = -501;
                        string rmodel = JsonConvert.SerializeObject(Form.FormData.DGsRowDataModel[_table.TableName]);
                        foreach (SingleRow _R in this.FormData.MultipleTables[_t.TableName])
                        {
                            SingleRow _Row = JsonConvert.DeserializeObject<SingleRow>(rmodel);
                            _Row.RowId = rc--;
                            foreach (ColumnSchema _column in _table.Columns)
                            {
                                SingleColumn _c = _R.GetColumn(_column.ColumnName);
                                if (_c != null)
                                {
                                    _Row.SetColumn(_column.ColumnName, _c);
                                }
                            }
                            Form.FormData.MultipleTables[_table.TableName].Add(_Row);
                        }
                    }
                }
                else if (_table.TableType == WebFormTableTypes.Normal)
                {
                    SingleTable Table = Form.FormData.MultipleTables[_table.TableName];
                    if (Table.Count > 0)
                    {
                        foreach (ColumnSchema _column in _table.Columns)
                        {
                            SingleColumn _c = this.FormData.MultipleTables[this.FormData.MasterTable][0].GetColumn(_column.ColumnName);
                            if (_c != null && !(_column.Control is EbAutoId))
                            {
                                Form.FormData.MultipleTables[_table.TableName][0].SetColumn(_column.ColumnName, _c);
                            }
                        }
                    }
                }
            }
        }

        public WebformData GetDynamicGridData(IDatabase DataDB, Service Service, string SrcId, string[] Target)
        {
            int pid = Convert.ToInt32(SrcId.Substring(0, SrcId.IndexOf(CharConstants.UNDERSCORE)));
            string ptbl = SrcId.Substring(SrcId.IndexOf(CharConstants.UNDERSCORE) + 1);

            string query = QueryGetter.GetDynamicGridSelectQuery(this, DataDB, Service, ptbl, Target, out string psQry, out int qryCnt);
            //psQry => /////// parameterization required to execute this

            EbDataSet dataset = DataDB.DoQueries(query + psQry, new DbParameter[]
            {
                DataDB.GetNewParameter(this.FormSchema.MasterTable + FormConstants._id, EbDbTypes.Int32, this.TableRowId),
                DataDB.GetNewParameter(ptbl + FormConstants._id, EbDbTypes.Int32, pid)
            });

            this.FormData = new WebformData() { MasterTable = this.FormSchema.MasterTable };

            for (int i = 0; i < Target.Length; i++)
            {
                TableSchema _table = this.FormSchema.Tables.Find(e => e.TableName == Target[i] && e.IsDynamic && e.TableType == WebFormTableTypes.Grid);

                SingleTable Table = new SingleTable();
                EbDataTable dataTable = dataset.Tables[i];//
                this.GetFormattedData(dataTable, Table, _table);
                if (!this.FormData.MultipleTables.ContainsKey(_table.TableName))
                    this.FormData.MultipleTables.Add(_table.TableName, Table);
            }

            if (!psQry.IsNullOrEmpty())
            {
                for (int i = 0, j = Target.Length; i < Target.Length && j < dataset.Tables.Count; i++)
                {
                    TableSchema _table = this.FormSchema.Tables.Find(e => e.TableName == Target[i] && e.IsDynamic && e.TableType == WebFormTableTypes.Grid);
                    foreach (ColumnSchema Col in _table.Columns)
                    {
                        if (Col.Control.DoNotPersist)
                            continue;
                        if (Col.Control is EbDGPowerSelectColumn)
                        {
                            SingleTable Tbl = new SingleTable();
                            this.GetFormattedData(dataset.Tables[j++], Tbl);
                            if (!this.FormData.PsDm_Tables.ContainsKey(Col.Control.EbSid))
                                this.FormData.PsDm_Tables.Add(Col.Control.EbSid, Tbl);
                        }
                    }
                }
                this.PostFormatFormData();
            }

            return this.FormData;
        }

        public string ExecuteSqlValueExpression(IDatabase DataDB, Service Service, List<Param> Param, string Trigger)
        {
            EbControl[] Allctrls = this.Controls.FlattenAllEbControls();
            EbControl TriggerCtrl = null;
            string val = string.Empty;
            for (int i = 0; i < Allctrls.Length; i++)
            {
                if (Allctrls[i].Name.Equals(Trigger))
                {
                    TriggerCtrl = Allctrls[i];
                    break;
                }
            }
            if (TriggerCtrl != null && TriggerCtrl.ValueExpr != null && TriggerCtrl.ValueExpr.Lang == ScriptingLanguage.SQL && !TriggerCtrl.ValueExpr.Code.IsNullOrEmpty())
            {
                DbParameter[] parameters = new DbParameter[Param.Count];
                for (int i = 0; i < Param.Count; i++)
                {
                    parameters[i] = DataDB.GetNewParameter(Param[i].Name, (EbDbTypes)Convert.ToInt32(Param[i].Type), Param[i].ValueTo);
                }
                EbDataTable table = DataDB.DoQuery(TriggerCtrl.ValueExpr.Code, parameters);
                if (table.Rows.Count > 0)
                    val = table.Rows[0][0].ToString();
            }
            return val;
        }

        public string GetDataPusherJson()
        {
            JObject Obj = new JObject();

            foreach (TableSchema _table in this.FormSchema.Tables)
            {
                JObject o = new JObject();
                foreach (ColumnSchema _column in _table.Columns)
                {
                    o[_column.ColumnName] = "value";
                }
                JArray array = new JArray();
                array.Add(o);
                Obj[_table.TableName] = array;
            }
            return Obj.ToString();
        }

        //merge formdata and webform object
        public void MergeFormData()
        {
            MergeFormDataInner(this);

            foreach (TableSchema _table in this.FormSchema.Tables)
            {
                if (!_table.IsDynamic)
                    continue;
                if (!this.FormData.MultipleTables.ContainsKey(_table.TableName))
                    continue;
                foreach (SingleRow Row in this.FormData.MultipleTables[_table.TableName])
                {
                    if (string.IsNullOrEmpty(Row.pId))
                        throw new FormException("Parent id missing in dynamic entry", (int)HttpStatusCodes.BAD_REQUEST, "Table : " + _table.TableName + ", Row Id : " + Row.RowId, "From EbWebForm.MergeFormData()");

                    int id = Convert.ToInt32(Row.pId.Substring(0, Row.pId.IndexOf(CharConstants.UNDERSCORE)));
                    string tbl = Row.pId.Substring(Row.pId.IndexOf(CharConstants.UNDERSCORE) + 1);

                    //if (tbl == this.FormSchema.MasterTable)
                    //    throw new FormException("Invalid table. Master table is not allowed for dynamic entry.", (int)HttpStatusCodes.BAD_REQUEST, "Table : " + _table.TableName + ", Row Id : " + Row.RowId, "From EbWebForm.MergeFormData()");

                    SingleRow _row = this.FormData.MultipleTables[tbl].Find(e => e.RowId == id);

                    if (_row == null)
                        throw new FormException("Invalid data found in dynamic entry", (int)HttpStatusCodes.BAD_REQUEST, "Table : " + _table.TableName + ", Row Id : " + Row.RowId, "From EbWebForm.MergeFormData()");
                    if (_row.IsDelete)
                        continue;

                    if (_row.LinesTable.Key == null)
                        _row.LinesTable = new KeyValuePair<string, SingleTable>(_table.TableName, new SingleTable());

                    _row.LinesTable.Value.Add(Row);
                }
                this.FormData.MultipleTables.Remove(_table.TableName);
            }
        }

        private void MergeFormDataInner(EbControlContainer _container)
        {
            foreach (EbControl c in _container.Controls)
            {
                if (c is EbDataGrid)
                {
                    if (!FormData.MultipleTables.ContainsKey((c as EbDataGrid).TableName))
                        continue;
                    foreach (EbControl control in (c as EbDataGrid).Controls)
                    {
                        if (!control.DoNotPersist)
                        {
                            List<object> val = new List<object>();
                            for (int i = 0; i < FormData.MultipleTables[(c as EbDataGrid).TableName].Count; i++)
                            {
                                if (FormData.MultipleTables[(c as EbDataGrid).TableName][i].GetColumn(control.Name) != null)
                                {
                                    val.Add(FormData.MultipleTables[(c as EbDataGrid).TableName][i][control.Name]);
                                    FormData.MultipleTables[(c as EbDataGrid).TableName][i].SetEbDbType(control.Name, control.EbDbType);
                                    FormData.MultipleTables[(c as EbDataGrid).TableName][i].SetControl(control.Name, control);
                                }
                            }
                            control.ValueFE = val;
                        }
                    }
                    int count = FormData.MultipleTables[(c as EbDataGrid).TableName].Count;
                    for (int i = 0, j = count; i < count; i++, j--)
                    {
                        if (FormData.MultipleTables[(c as EbDataGrid).TableName][i].GetColumn(FormConstants.eb_row_num) == null)
                            FormData.MultipleTables[(c as EbDataGrid).TableName][i].Columns.Add(new SingleColumn
                            {
                                Name = FormConstants.eb_row_num,
                                Type = (int)EbDbTypes.Decimal,
                                Value = 0
                            });
                        if ((c as EbDataGrid).AscendingOrder)
                            FormData.MultipleTables[(c as EbDataGrid).TableName][i][FormConstants.eb_row_num] = i + 1;
                        else
                            FormData.MultipleTables[(c as EbDataGrid).TableName][i][FormConstants.eb_row_num] = j;
                    }
                }
                else if (c is EbApproval)
                {
                    if (!c.DoNotPersist)
                    {
                        EbApproval ebApproval = (c as EbApproval);
                        if (FormData.MultipleTables.ContainsKey(ebApproval.TableName) && FormData.MultipleTables[ebApproval.TableName].Count > 0)
                        {
                            string lastStage = (ebApproval.FormStages[ebApproval.FormStages.Count - 1] as EbFormStage).Name;
                            string stage = Convert.ToString(FormData.MultipleTables[ebApproval.TableName][0][FormConstants.stage]);
                            int status = Convert.ToInt32(FormData.MultipleTables[ebApproval.TableName][0][FormConstants.status]);
                            if (lastStage.Equals(stage) && status == 1)
                            {
                                this.AfterSaveRoutines.AddRange(ebApproval.OnApprovalRoutines);
                            }
                            string[] str_t = { "stage", "approver_role", "status", "remarks" };
                            for (int i = 0; i < str_t.Length; i++)
                            {
                                EbControl con = ebApproval.Controls.Find(e => e.Name == str_t[i]);
                                FormData.MultipleTables[ebApproval.TableName][0].SetEbDbType(con.Name, con.EbDbType);
                                FormData.MultipleTables[ebApproval.TableName][0].SetControl(con.Name, con);
                            }
                        }
                    }
                }
                else if (c is EbReview)
                {
                    if (!c.DoNotPersist || this.TableRowId <= 0)// merge in edit mode only
                    {
                        EbReview ebReview = (c as EbReview);
                        if (FormData.MultipleTables.ContainsKey(ebReview.TableName) && FormData.MultipleTables[ebReview.TableName].Count > 0)
                        {
                            SingleTable rows = FormData.MultipleTables[ebReview.TableName];
                            for (int i = 0; i < rows.Count; i++)
                            {
                                if (rows[i].RowId > 0)
                                {
                                    rows.RemoveAt(i--);
                                }
                            }
                            if (rows.Count == 1)//one new entry// need to write code for 'AfterSaveRoutines'
                            {
                                foreach (TableSchema t in this.FormSchema.Tables)
                                {
                                    if (t.TableName != ebReview.TableName)
                                        FormData.MultipleTables.Remove(t.TableName);// approval execution, hence removing other data if present
                                }
                                string[] str_t = { "stage_unique_id", "action_unique_id", "eb_my_actions_id", "comments" };
                                for (int i = 0; i < str_t.Length; i++)
                                {
                                    EbControl con = ebReview.Controls.Find(e => e.Name == str_t[i]);
                                    FormData.MultipleTables[ebReview.TableName][0].SetEbDbType(con.Name, con.EbDbType);
                                    FormData.MultipleTables[ebReview.TableName][0].SetControl(con.Name, con);
                                }
                            }

                        }
                    }
                }
                else if (c is EbControlContainer)
                {
                    if (string.IsNullOrEmpty((c as EbControlContainer).TableName))
                        (c as EbControlContainer).TableName = _container.TableName;
                    MergeFormDataInner(c as EbControlContainer);
                }
                else if (c is EbAutoId)
                {
                    if (FormData.MultipleTables.ContainsKey(_container.TableName) && FormData.MultipleTables[_container.TableName].Count > 0)
                    {
                        Dictionary<string, string> dict = new Dictionary<string, string>();
                        dict.Add("{currentlocation.id}", this.LocationId.ToString());
                        dict.Add("{user.id}", this.UserObj.UserId.ToString());
                        dict.Add("{currentlocation.shortname}", this.SolutionObj.Locations[this.LocationId].ShortName);

                        MatchCollection mc = Regex.Matches((c as EbAutoId).Pattern.sPattern, @"{(.*?)}");
                        foreach (Match m in mc)
                        {
                            if (dict.ContainsKey(m.Value))
                                (c as EbAutoId).Pattern.sPattern = (c as EbAutoId).Pattern.sPattern.Replace(m.Value, dict[m.Value]);
                        }

                        if (FormData.MultipleTables[_container.TableName][0].GetColumn(c.Name) == null)
                            FormData.MultipleTables[_container.TableName][0].Columns.Add(new SingleColumn { Name = c.Name });

                        FormData.MultipleTables[_container.TableName][0].SetEbDbType(c.Name, c.EbDbType);
                        FormData.MultipleTables[_container.TableName][0].SetControl(c.Name, c);
                        FormData.MultipleTables[_container.TableName][0][c.Name] = (c as EbAutoId).Pattern.sPattern;
                        c.ValueFE = FormData.MultipleTables[_container.TableName][0][c.Name];
                    }
                }
                else if ((!(c is EbFileUploader) && !c.DoNotPersist) || c is EbProvisionUser || c is EbProvisionLocation)
                {
                    if (FormData.MultipleTables.ContainsKey(_container.TableName) && FormData.MultipleTables[_container.TableName].Count > 0)
                    {
                        if (FormData.MultipleTables[_container.TableName][0].GetColumn(c.Name) != null)
                        {
                            c.ValueFE = FormData.MultipleTables[_container.TableName][0][c.Name];
                            FormData.MultipleTables[_container.TableName][0].SetEbDbType(c.Name, c.EbDbType);
                            FormData.MultipleTables[_container.TableName][0].SetControl(c.Name, c);
                        }
                    }
                }
            }
        }

        public void GetEmptyModel()
        {
            this.FormData = new WebformData() { MasterTable = this.FormSchema.MasterTable };
            foreach (TableSchema _table in this.FormSchema.Tables)
            {
                if (_table.TableType == WebFormTableTypes.Normal)
                {
                    SingleRow Row = new SingleRow();
                    SingleTable Table = new SingleTable();
                    foreach (ColumnSchema _column in _table.Columns)
                    {
                        Row.Columns.Add(_column.Control.GetSingleColumn(this.UserObj, this.SolutionObj, null));
                    }
                    Table.Add(Row);
                    this.FormData.MultipleTables.Add(_table.TableName, Table);
                }
                else if (_table.TableType == WebFormTableTypes.Grid || _table.TableType == WebFormTableTypes.Approval || _table.TableType == WebFormTableTypes.Review)
                {
                    this.FormData.MultipleTables.Add(_table.TableName, new SingleTable());
                }
            }
            this.GetDGsEmptyModel();
        }

        private void GetDGsEmptyModel()
        {
            foreach (TableSchema _table in this.FormSchema.Tables)
            {
                if (_table.TableType == WebFormTableTypes.Grid)
                {
                    SingleRow Row = new SingleRow();
                    Row.Columns.Add(new SingleColumn()
                    {
                        Name = FormConstants.eb_row_num,
                        Type = (int)EbDbTypes.Decimal,
                        Value = 0
                    });
                    foreach (ColumnSchema _column in _table.Columns)
                    {
                        Row.Columns.Add(_column.Control.GetSingleColumn(this.UserObj, this.SolutionObj, null));
                    }
                    this.FormData.DGsRowDataModel.Add(_table.TableName, Row);
                }
                else if (_table.TableType == WebFormTableTypes.Approval || _table.TableType == WebFormTableTypes.Review)
                {
                    this.FormData.ApprovalRowDataModel = new SingleRow();
                    foreach (ColumnSchema _column in _table.Columns)
                    {
                        this.FormData.ApprovalRowDataModel.Columns.Add(_column.Control.GetSingleColumn(this.UserObj, this.SolutionObj, null));
                    }
                }
            }
        }

        private void GetFormattedDataApproval(EbDataTable dataTable, SingleTable Table)
        {
            foreach (EbDataRow dataRow in dataTable.Rows)
            {
                DateTime dt = Convert.ToDateTime(dataRow[FormConstants.eb_created_at]);
                Table.Add(new SingleRow
                {
                    Columns = new List<SingleColumn>
                {
                    new SingleColumn { Name = FormConstants.id, Type = (int)EbDbTypes.Decimal, Value = Convert.ToInt32(dataRow[FormConstants.id])},
                    new SingleColumn { Name = FormConstants.stage, Type = (int)EbDbTypes.String, Value = dataRow[FormConstants.stage].ToString()},
                    new SingleColumn { Name = FormConstants.approver_role, Type = (int)EbDbTypes.String, Value = dataRow[FormConstants.approver_role].ToString()},
                    new SingleColumn { Name = FormConstants.status, Type = (int)EbDbTypes.Decimal, Value = Convert.ToInt32(dataRow[FormConstants.status])},
                    new SingleColumn { Name = FormConstants.remarks, Type = (int)EbDbTypes.String, Value = dataRow[FormConstants.remarks].ToString()},
                    new SingleColumn { Name = FormConstants.eb_created_by_id, Type = (int)EbDbTypes.Decimal, Value = Convert.ToInt32(dataRow[FormConstants.eb_created_by])},
                    new SingleColumn { Name = FormConstants.eb_created_by_name, Type = (int)EbDbTypes.String, Value = this.SolutionObj.Users[Convert.ToInt32(dataRow[FormConstants.eb_created_by])]},
                    new SingleColumn { Name = FormConstants.eb_created_at, Type = (int)EbDbTypes.String, Value = dt.ConvertFromUtc(this.UserObj.Preference.TimeZone).ToString("dd-MM-yyyy hh:mm tt")}
                },
                    RowId = Convert.ToInt32(dataRow[FormConstants.id]),
                    LocId = Convert.ToInt32(dataRow[FormConstants.eb_loc_id])
                });
            }
        }

        public void GetFormattedData(EbDataTable dataTable, SingleTable Table, TableSchema _table = null)
        {
            //master table eb columns : eb_loc_id, eb_ver_id, eb_lock, eb_push_id, eb_src_id, id
            //normal table eb columns : eb_loc_id, id
            //grid table eb columns   : eb_loc_id, id, eb_row_num

            foreach (EbDataRow dataRow in dataTable.Rows)
            {
                int _locId = 0, i = 0, j = 0;
                int _rowId = 0;
                if (_table != null)
                {
                    _locId = Convert.ToInt32(dataRow[i++]);
                    if (_table.TableName.Equals(this.FormSchema.MasterTable))
                    {
                        if (this.FormData != null)
                        {
                            this.FormData.FormVersionId = Convert.ToInt32(dataRow[i++]);
                            this.FormData.IsLocked = dataRow[i++].ToString().Equals("T");
                            this.FormData.DataPushId = dataRow[i++].ToString();
                            this.FormData.SourceId = Convert.ToInt32(dataRow[i++]);
                        }
                        else
                            i += 4;
                    }
                    _rowId = Convert.ToInt32(dataRow[i]);
                    for (; j < Table.Count; j++)
                    {
                        if (Table[j].RowId == _rowId)
                            break;
                    }
                    if (j < Table.Count)// skipping duplicate rows in dataTable
                        continue;
                }

                SingleRow Row = new SingleRow() { RowId = _rowId, LocId = _locId };
                if (_table != null)
                {
                    this.GetFormattedColumn(dataTable.Columns[FormConstants.id], dataRow, Row, null);
                    if (_table.TableType == WebFormTableTypes.Grid)
                        this.GetFormattedColumn(dataTable.Columns[FormConstants.eb_row_num], dataRow, Row, null);
                    for (int k = 0; k < _table.Columns.Count; k++)
                    {
                        EbControl _control = _table.Columns[k].Control;
                        this.GetFormattedColumn(dataTable.Columns[_control.Name], dataRow, Row, _control);
                    }
                }
                else
                {
                    for (int k = 0; k < dataTable.Columns.Count; k++)
                    {
                        this.GetFormattedColumn(dataTable.Columns[k], dataRow, Row, null);
                    }
                }
                Table.Add(Row);
            }
        }

        private void GetFormattedColumn(EbDataColumn dataColumn, EbDataRow dataRow, SingleRow Row, EbControl _control)
        {
            if (_control != null)
            {
                if (_control.DoNotPersist && !_control.IsSysControl)
                {
                    Row.Columns.Add(new SingleColumn()
                    {
                        Name = _control.Name,
                        Type = (int)_control.EbDbType,
                        Value = null,
                        Control = _control,
                        ObjType = _control.ObjType
                    });
                    return;
                }
            }
            object _formattedData = null;
            string _displayMember = null;

            if (dataColumn == null || (dataRow.IsDBNull(dataColumn.ColumnIndex) && _control == null))
            {
                if (_control != null && (_control.EbDbType == EbDbTypes.Decimal || _control.EbDbType == EbDbTypes.Int32))
                    _displayMember = "0.00";
                else if (dataColumn != null && (dataColumn.Type == EbDbTypes.Int32 || dataColumn.Type == EbDbTypes.Int64 || dataColumn.Type == EbDbTypes.Decimal || dataColumn.Type == EbDbTypes.Double))
                    _displayMember = "0.00";
            }
            else if (_control != null)
            {
                object val = dataRow[dataColumn.ColumnIndex];
                if (dataRow.IsDBNull(dataColumn.ColumnIndex))
                    val = null;
                Row.Columns.Add(_control.GetSingleColumn(this.UserObj, this.SolutionObj, val));
                return;
            }
            else if (dataColumn.Type == EbDbTypes.Date)
            {
                DateTime dt = Convert.ToDateTime(dataRow[dataColumn.ColumnIndex]);
                _formattedData = dt.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture);
                _displayMember = dt.ToString(this.UserObj.Preference.GetShortDatePattern(), CultureInfo.InvariantCulture);
            }
            else if (dataColumn.Type == EbDbTypes.Decimal || dataColumn.Type == EbDbTypes.Double)
            {
                _formattedData = Convert.ToDouble(dataRow[dataColumn.ColumnIndex]);
                _displayMember = string.Format("{0:0.00}", _formattedData);
            }
            else if (dataColumn.Type == EbDbTypes.Int32 || dataColumn.Type == EbDbTypes.Int64)
                _formattedData = Convert.ToInt64(dataRow[dataColumn.ColumnIndex]);
            else
                _formattedData = dataRow[dataColumn.ColumnIndex];

            Row.Columns.Add(new SingleColumn()
            {
                Name = dataColumn.ColumnName,
                Type = _control == null ? (int)dataColumn.Type : (int)_control.EbDbType,
                Value = _formattedData,
                Control = _control,
                F = _displayMember ?? (_formattedData == null ? string.Empty : _formattedData.ToString()),
                ObjType = _control == null ? string.Empty : _control.ObjType
            });
        }

        public void PostFormatFormData()// fill ps displaymembers, columns in FormData
        {
            foreach (KeyValuePair<string, SingleTable> Table in this.FormData.MultipleTables)
            {
                foreach (SingleRow Row in Table.Value)
                {
                    foreach (SingleColumn Column in Row.Columns)
                    {
                        if (Column.Control != null && (Column.Control is EbPowerSelect || Column.Control is EbDGPowerSelectColumn))
                        {
                            string EbSid, VmName, DmName = string.Empty;
                            DVColumnCollection DmsColl;
                            bool RenderAsSS = false;

                            if (Column.Control is EbPowerSelect)
                            {
                                EbPowerSelect psCtrl = Column.Control as EbPowerSelect;
                                EbSid = psCtrl.EbSid;
                                VmName = psCtrl.ValueMember.Name;
                                RenderAsSS = psCtrl.RenderAsSimpleSelect;
                                DmName = RenderAsSS ? psCtrl.DisplayMember.Name : string.Empty;
                                DmsColl = psCtrl.DisplayMembers;
                            }
                            else
                            {
                                EbDGPowerSelectColumn psColCtrl = Column.Control as EbDGPowerSelectColumn;
                                EbSid = psColCtrl.EbSid;
                                VmName = psColCtrl.ValueMember.Name;
                                DmsColl = psColCtrl.DisplayMembers;
                            }

                            if (Column.Value == null || string.IsNullOrEmpty(Convert.ToString(Column.Value)) || !this.FormData.PsDm_Tables.ContainsKey(EbSid))
                                continue;

                            //List<SingleRow> Cols = new List<SingleRow>();
                            Dictionary<string, List<dynamic>> Rows = new Dictionary<string, List<dynamic>>();
                            //Dictionary<int, string[]> Disp = new Dictionary<int, string[]>();//original
                            Dictionary<int, Dictionary<string, string>> DispM_dup = new Dictionary<int, Dictionary<string, string>>();//duplicate
                            string[] temp = Convert.ToString(Column.Value).Split(",");
                            int[] vms = Array.ConvertAll<string, int>(temp, int.Parse);
                            SingleTable tbl = this.FormData.PsDm_Tables[EbSid];

                            for (int i = 0; i < vms.Length; i++)
                            {
                                SingleRow _row = tbl.FirstOrDefault(e => Convert.ToInt32(e[VmName]) == vms[i]);
                                if (_row != null)
                                {
                                    foreach (SingleColumn _col in _row.Columns)
                                    {
                                        if (!Rows.ContainsKey(_col.Name))
                                            Rows.Add(_col.Name, new List<dynamic>());
                                        Rows[_col.Name].Add(_col.Value);
                                    }

                                    //Cols.Add(_row);
                                    if (RenderAsSS)
                                    {
                                        //Disp.Add(vms[i], _row[DmName]);
                                        DispM_dup.Add(vms[i], new Dictionary<string, string> { { VmName, Convert.ToString(_row[DmName]) ?? string.Empty } });
                                    }
                                    else
                                    {
                                        string[] _dm = new string[DmsColl.Count];
                                        Dictionary<string, string> __d = new Dictionary<string, string>();
                                        for (int j = 0; j < DmsColl.Count; j++)
                                        {
                                            _dm[j] = Convert.ToString(_row[DmsColl[j].Name]) ?? string.Empty;
                                            __d.Add(DmsColl[j].Name, Convert.ToString(_row[DmsColl[j].Name]) ?? string.Empty);
                                        }
                                        //Disp.Add(vms[i], _dm);
                                        DispM_dup.Add(vms[i], __d);
                                    }
                                }
                            }
                            //Column.D = Disp;//original
                            Column.D = DispM_dup;//duplicate
                            Column.R = Rows;
                        }
                    }
                }
            }
        }

        //For Normal Mode
        public void RefreshFormData(IDatabase DataDB, Service service, bool backup = false, bool includePushData = false)
        {
            int formCount = (this.ExeDataPusher && includePushData) ? this.DataPushers.Count + 1 : 1;
            string[] psquery = new string[formCount];
            int[] qrycount = new int[formCount];
            EbWebForm[] FormCollection = new EbWebForm[formCount];
            string query = QueryGetter.GetSelectQuery(this, DataDB, service, out psquery[0], out qrycount[0]);
            FormCollection[0] = this;

            if (this.ExeDataPusher && includePushData)
            {
                for (int i = 0; i < this.DataPushers.Count; i++)
                {
                    query += QueryGetter.GetSelectQuery(this.DataPushers[i].WebForm, DataDB, service, out psquery[i + 1], out qrycount[i + 1]);
                    this.DataPushers[i].WebForm.UserObj = this.UserObj;
                    this.DataPushers[i].WebForm.SolutionObj = this.SolutionObj;
                    FormCollection[i + 1] = this.DataPushers[i].WebForm;
                }
            }

            DbParameter[] param = new DbParameter[]
            {
                DataDB.GetNewParameter(this.FormSchema.MasterTable + FormConstants._id, EbDbTypes.Int32, this.TableRowId),
                DataDB.GetNewParameter(this.FormSchema.MasterTable + FormConstants._eb_ver_id, EbDbTypes.Int32, this.RefId.Split(CharConstants.DASH)[4])
            };
            EbDataSet dataset = null;
            if (this.DbConnection == null)
                dataset = DataDB.DoQueries(query, param);
            else
                dataset = DataDB.DoQueries(this.DbConnection, query, param);

            Console.WriteLine("From RefreshFormData : Query count = " + qrycount.Join(",") + " DataTable count = " + dataset.Tables.Count);

            for (int i = 0, start = 0; i < formCount; start += qrycount[i], i++)
            {
                EbDataSet ds = new EbDataSet();
                ds.Tables.AddRange(dataset.Tables.GetRange(start, qrycount[i]));
                FormCollection[i].RefreshFormDataInner(ds, DataDB, i == 0 ? psquery[i] : string.Empty, backup);
            }
            Console.WriteLine("No Exception in RefreshFormData");
        }

        private void RefreshFormDataInner(EbDataSet dataset, IDatabase DataDB, string psquery, bool backup)
        {
            WebFormSchema _schema = this.FormSchema;
            WebformData _FormData;
            if (backup)
            {
                this.FormDataBackup = new WebformData() { MasterTable = _schema.MasterTable };
                _FormData = this.FormDataBackup;
            }
            else
            {
                this.FormData = new WebformData() { MasterTable = _schema.MasterTable };
                _FormData = this.FormData;
                this.GetDGsEmptyModel();
            }

            int count = 0;
            foreach (TableSchema _table in _schema.Tables)
            {
                SingleTable Table = new SingleTable();
                if (!_table.IsDynamic)
                {
                    EbDataTable dataTable = dataset.Tables[count++];////                

                    if (_table.TableType == WebFormTableTypes.Approval)
                        this.GetFormattedDataApproval(dataTable, Table);
                    else
                        this.GetFormattedData(dataTable, Table, _table);
                }
                if (!_FormData.MultipleTables.ContainsKey(_table.TableName))
                    _FormData.MultipleTables.Add(_table.TableName, Table);

            }

            if (!_FormData.MultipleTables.ContainsKey(_FormData.MasterTable) || _FormData.MultipleTables[_FormData.MasterTable].Count == 0)
            {
                if (this.DataPusherConfig != null)
                    return;
                string t = "From RefreshFormData - TABLE : " + _FormData.MasterTable + "   ID : " + this.TableRowId + "\nData Not Found";
                Console.WriteLine(t);
                throw new FormException("Error in loading data", (int)HttpStatusCodes.INTERNAL_SERVER_ERROR, t, string.Empty);
            }
            else
            {
                this.TableRowId = _FormData.MultipleTables[_FormData.MasterTable][0].RowId;
                this.LocationId = _FormData.MultipleTables[_FormData.MasterTable][0].LocId;
            }

            if (dataset.Tables.Count > _schema.Tables.Count)
            {
                int tableIndex = _schema.Tables.Count;
                int mngUsrCount = 0;
                SingleTable UserTable = null;
                foreach (EbControl Ctrl in _schema.ExtendedControls)//ManageUser Controls + Manage Location Control
                {
                    SingleTable Table = new SingleTable();
                    if (!(UserTable != null && Ctrl is EbProvisionUser))
                        this.GetFormattedData(dataset.Tables[tableIndex], Table);

                    if (Ctrl is EbProvisionUser)
                    {
                        Dictionary<string, dynamic> _d = new Dictionary<string, dynamic>();
                        if (UserTable == null)
                            UserTable = Table;
                        else
                            tableIndex--; //one query is used to select required user records
                        if (UserTable.Count > mngUsrCount)
                        {
                            NTV[] pArr = (Ctrl as EbProvisionUser).FuncParam;
                            for (int k = 0; k < pArr.Length; k++)
                            {
                                if (UserTable[mngUsrCount][pArr[k].Name] != null)
                                    _d.Add(pArr[k].Name, UserTable[mngUsrCount][pArr[k].Name]);
                            }

                            //_d.Add(FormConstants.id, UserTable[mngUsrCount][FormConstants.id]);
                            //_d.Add("statusid", UserTable[mngUsrCount]["statusid"]);
                            //foreach (UsrLocField _f in (Ctrl as EbProvisionUser).PersistingFields)
                            //{
                            //    _d.Add(_f.Name, UserTable[mngUsrCount][_f.Name]);
                            //}
                            //if (!_d.ContainsKey("usertype"))
                            //    _d.Add("usertype", UserTable[mngUsrCount]["usertype"]);

                            mngUsrCount++;
                        }
                        _FormData.MultipleTables[(Ctrl as EbProvisionUser).VirtualTable][0][Ctrl.Name] = JsonConvert.SerializeObject(_d);
                        //_FormData.MultipleTables[(Ctrl as EbProvisionUser).VirtualTable][0].Columns.Add(new SingleColumn()
                        //{
                        //    Name = Ctrl.Name,
                        //    Type = (int)EbDbTypes.String,
                        //    Value = JsonConvert.SerializeObject(_d)
                        //});
                    }
                    else if (Ctrl is EbProvisionLocation)
                    {
                        Dictionary<string, dynamic> _d = new Dictionary<string, dynamic>();
                        if (Table.Count == 1)
                        {
                            _d.Add(FormConstants.id, Table[0][FormConstants.id]);
                            _d.Add(FormConstants.longname, Table[0][FormConstants.longname]);
                            _d.Add(FormConstants.shortname, Table[0][FormConstants.shortname]);
                            _d.Add(FormConstants.image, Table[0][FormConstants.image]);
                            _d.Add(FormConstants.meta_json, Table[0][FormConstants.meta_json]);
                        }
                        _FormData.MultipleTables[(Ctrl as EbProvisionUser).VirtualTable][0][Ctrl.Name] = JsonConvert.SerializeObject(_d);
                        //_FormData.MultipleTables[(Ctrl as EbProvisionLocation).VirtualTable][0].Columns.Add(new SingleColumn()
                        //{
                        //    Name = Ctrl.Name,
                        //    Type = (int)EbDbTypes.String,
                        //    Value = JsonConvert.SerializeObject(_d)
                        //});
                    }
                    else if (Ctrl is EbReview)
                    {
                        if (Table.Count == 1)
                        {
                            string stageEbSid = Table[0]["stage_unique_id"];
                            EbReviewStage activeStage = (EbReviewStage)(Ctrl as EbReview).FormStages.Find(e => (e as EbReviewStage).EbSid == stageEbSid);

                            if (activeStage != null)
                            {
                                List<int> user_ids = new List<int>();
                                List<int> role_ids = new List<int>();
                                string sUserIds = Table[0]["user_ids"];
                                string sRoleIds = Table[0]["role_ids"];
                                int.TryParse(Convert.ToString(Table[0]["usergroup_id"]), out int ugId);
                                if (!sUserIds.IsNullOrEmpty())
                                    user_ids = Array.ConvertAll(sUserIds.Split(','), int.Parse).ToList();
                                if (!sRoleIds.IsNullOrEmpty())
                                    role_ids = Array.ConvertAll(sRoleIds.Split(','), int.Parse).ToList();

                                bool hasRoleMatch = this.UserObj.RoleIds.Select(x => x).Intersect(role_ids).Any();
                                bool hasPerm = false;
                                if (hasRoleMatch || user_ids.Contains(this.UserObj.UserId) || this.UserObj.UserGroupIds.Contains(ugId))
                                    hasPerm = true;

                                DateTime dt_con = DateTime.UtcNow.ConvertFromUtc(this.UserObj.Preference.TimeZone);
                                string dt = dt_con.ToString("yyyy-MM-dd HH:mm:ss", CultureInfo.InvariantCulture);
                                string stAction = activeStage.StageActions.Count > 0 ? (activeStage.StageActions[0] as EbReviewAction).EbSid : string.Empty;
                                _FormData.MultipleTables["eb_approval_lines"].Add(new SingleRow()
                                {
                                    RowId = 0,
                                    Columns = new List<SingleColumn>
                                    {
                                        new SingleColumn{ Name = "stage_unique_id", Type = (int)EbDbTypes.String, Value = activeStage.EbSid},
                                        new SingleColumn{ Name = "action_unique_id", Type = (int)EbDbTypes.String, Value = stAction},
                                        new SingleColumn{ Name = "eb_my_actions_id", Type = (int)EbDbTypes.Decimal, Value = hasPerm ? Table[0]["id"] : 0},
                                        new SingleColumn{ Name = "comments", Type = (int)EbDbTypes.String, Value = ""},
                                        new SingleColumn{ Name = "eb_created_at", Type = (int)EbDbTypes.DateTime, Value = hasPerm ? dt : null},
                                        new SingleColumn{ Name = "eb_created_by", Type = (int)EbDbTypes.Decimal, Value = hasPerm ? this.UserObj.UserId + "$$" + this.UserObj.FullName : ""},
                                        new SingleColumn{ Name = "is_form_data_editable", Type = (int)EbDbTypes.String, Value = Convert.ToString(Table[0]["is_form_data_editable"])},
                                        new SingleColumn{ Name = "has_permission", Type = (int)EbDbTypes.String, Value = hasPerm ? "T" : "F"}
                                    }
                                }); ;
                            }

                        }
                    }

                    tableIndex++;
                }
            }

            foreach (EbControl Ctrl in _schema.ExtendedControls)
            {
                if (Ctrl is EbFileUploader)
                {
                    if (this.FormGlobals == null)
                        this.FormGlobals = GlobalsGenerator.GetCSharpFormGlobals_NEW(this, _FormData, null);
                    string context = this.RefId.Split(CharConstants.DASH)[3] + CharConstants.UNDERSCORE + this.TableRowId.ToString();//context format = objectId_rowId_ControlId
                    EbFileUploader _ctrl = Ctrl as EbFileUploader;
                    string cxt2 = null;
                    if (_ctrl.ContextGetExpr != null && !_ctrl.ContextGetExpr.Code.IsNullOrEmpty())
                        cxt2 = Convert.ToString(this.ExecuteCSharpScriptNew(_ctrl.ContextGetExpr.Code, this.FormGlobals));

                    string qry = (Ctrl as EbFileUploader).GetSelectQuery(DataDB, string.IsNullOrEmpty(cxt2));

                    DbParameter[] param = new DbParameter[]
                    {
                        DataDB.GetNewParameter(FormConstants.id, EbDbTypes.Int32, this.TableRowId),
                        DataDB.GetNewParameter(FormConstants.context, EbDbTypes.String, context),
                        DataDB.GetNewParameter(FormConstants.context_sec, EbDbTypes.String, cxt2 ?? string.Empty),
                        DataDB.GetNewParameter(FormConstants.eb_ver_id, EbDbTypes.Int32, this.RefId.Split(CharConstants.DASH)[4])
                    };

                    EbDataTable dt;
                    if (this.DbConnection == null)
                        dt = DataDB.DoQuery(qry, param);
                    else
                        dt = DataDB.DoQuery(this.DbConnection, qry, param);

                    SingleTable Table = new SingleTable();
                    this.GetFormattedData(dt, Table);

                    List<FileMetaInfo> _list = new List<FileMetaInfo>();
                    foreach (SingleRow dr in Table)
                    {
                        FileMetaInfo info = new FileMetaInfo
                        {
                            FileRefId = Convert.ToInt32(dr[FormConstants.id]),
                            FileName = dr[FormConstants.filename],
                            Meta = JsonConvert.DeserializeObject<Dictionary<string, List<string>>>(dr[FormConstants.tags] as string),
                            UploadTime = dr[FormConstants.uploadts],
                            FileCategory = (EbFileCategory)Convert.ToInt32(dr[FormConstants.filecategory])
                        };

                        if (!_list.Contains(info))
                            _list.Add(info);
                    }
                    SingleTable _Table = new SingleTable {
                            new SingleRow() {
                                Columns = new List<SingleColumn> {
                                    new SingleColumn { Name = FormConstants.Files, Type = (int)EbDbTypes.Json, Value = JsonConvert.SerializeObject(_list) }
                                }
                            }
                        };
                    _FormData.ExtendedTables.Add(Ctrl.EbSid, _Table);//fup
                }
            }


            if (!psquery.IsNullOrEmpty() && !backup)
            {
                List<DbParameter> param = new List<DbParameter>();
                param.Add(DataDB.GetNewParameter(_FormData.MasterTable + FormConstants._id, EbDbTypes.Int32, this.TableRowId));
                this.LocationId = _FormData.MultipleTables[_FormData.MasterTable][0].LocId;

                for (int i = 0; i < _schema.Tables.Count && dataset.Tables.Count >= _schema.Tables.Count; i++)
                {
                    if (dataset.Tables[i].Rows.Count > 0)
                    {
                        EbDataRow dataRow = dataset.Tables[i].Rows[0];
                        foreach (EbDataColumn dataColumn in dataset.Tables[i].Columns)
                        {
                            DbParameter t = param.Find(e => e.ParameterName == dataColumn.ColumnName);
                            if (t == null)
                            {
                                if (dataRow.IsDBNull(dataColumn.ColumnIndex))
                                {
                                    var p = DataDB.GetNewParameter(dataColumn.ColumnName, dataColumn.Type);
                                    p.Value = DBNull.Value;
                                    param.Add(p);
                                }
                                else
                                    param.Add(DataDB.GetNewParameter(dataColumn.ColumnName, dataColumn.Type, dataRow[dataColumn.ColumnIndex]));
                            }
                        }
                    }
                }
                //if eb_loc_id control is not present then form data entered location adding as 'eb_loc_id' 
                DbParameter tt = param.Find(e => e.ParameterName == FormConstants.eb_loc_id);
                if (tt == null)
                    param.Add(DataDB.GetNewParameter(FormConstants.eb_loc_id, EbDbTypes.Decimal, this.LocationId));

                //if eb_currentuser_id control is not present then UserObj.UserId adding as 'eb_currentuser_id' 
                DbParameter ttt = param.Find(e => e.ParameterName == "eb_currentuser_id");
                if (ttt == null)
                    param.Add(DataDB.GetNewParameter("eb_currentuser_id", EbDbTypes.Decimal, this.UserObj.UserId));

                EbDataSet ds;
                if (this.DbConnection == null)
                    ds = DataDB.DoQueries(psquery, param.ToArray());
                else
                    ds = DataDB.DoQueries(this.DbConnection, psquery, param.ToArray());

                if (ds.Tables.Count > 0)
                {
                    int tblIdx = 0;
                    foreach (TableSchema Tbl in _schema.Tables)//PowerSelect
                    {
                        foreach (ColumnSchema Col in Tbl.Columns)
                        {
                            if (Col.Control is EbPowerSelect || Col.Control is EbDGPowerSelectColumn)
                            {
                                SingleTable Table = new SingleTable();
                                this.GetFormattedData(ds.Tables[tblIdx], Table);
                                //_FormData.ExtendedTables.Add(Col.Control.EbSid, Table);//ps//dup for backward compatibility
                                _FormData.PsDm_Tables.Add(Col.Control.EbSid, Table);
                                tblIdx++;
                            }
                        }
                    }
                }

                this.PostFormatFormData();
            }

            if (!backup)
                this.ExeDeleteCancelScript(DataDB);
        }

        //For Prefill Mode
        public void RefreshFormData(IDatabase DataDB, Service service, List<Param> _params)
        {
            GetEmptyModel();
            Dictionary<string, string> QrsDict = new Dictionary<string, string>();
            List<DbParameter> param = new List<DbParameter>();
            foreach (KeyValuePair<string, SingleTable> Table in this.FormData.MultipleTables)
            {
                foreach (SingleRow Row in Table.Value)
                {
                    foreach (SingleColumn Column in Row.Columns)
                    {
                        Param p = _params.Find(e => e.Name == Column.Name);
                        if (p != null)
                        {
                            SingleColumn NwCol = Column.Control.GetSingleColumn(this.UserObj, this.SolutionObj, p.ValueTo);
                            Column.Value = NwCol.Value;
                            Column.F = NwCol.F;
                            param.Add(DataDB.GetNewParameter(Column.Name, (EbDbTypes)Column.Type, Column.Value));
                            if (Column.Control is EbPowerSelect)
                            {
                                string t = (Column.Control as EbPowerSelect).GetSelectQuery(DataDB, service, p.Value);
                                QrsDict.Add((Column.Control as EbPowerSelect).EbSid, t);
                            }
                        }
                    }
                }
            }

            if (QrsDict.Count > 0)
            {
                if (param.Find(e => e.ParameterName == FormConstants.eb_loc_id) == null)
                    param.Add(DataDB.GetNewParameter(FormConstants.eb_loc_id, EbDbTypes.Decimal, this.LocationId));

                if (param.Find(e => e.ParameterName == "eb_currentuser_id") == null)
                    param.Add(DataDB.GetNewParameter("eb_currentuser_id", EbDbTypes.Decimal, this.UserObj.UserId));

                EbDataSet dataset = DataDB.DoQueries(string.Join(CharConstants.SPACE, QrsDict.Select(d => d.Value)), param.ToArray());
                int i = 0;
                foreach (KeyValuePair<string, string> item in QrsDict)
                {
                    SingleTable Table = new SingleTable();
                    this.GetFormattedData(dataset.Tables[i++], Table);
                    //this.FormData.ExtendedTables.Add(item.Key, Table);//ps//dup for backward compatibility
                    this.FormData.PsDm_Tables.Add(item.Key, Table);
                }
                this.PostFormatFormData();
            }
        }

        public List<Param> GetFormData4Mobile(IDatabase DataDB, Service service)
        {
            List<Param> data = new List<Param>();
            this.RefreshFormData(DataDB, service);
            foreach (TableSchema _table in this.FormSchema.Tables.FindAll(e => e.TableType == WebFormTableTypes.Normal))
            {
                if (this.FormData.MultipleTables.ContainsKey(_table.TableName) && this.FormData.MultipleTables[_table.TableName].Count > 0)
                {
                    foreach (SingleColumn Column in this.FormData.MultipleTables[_table.TableName][0].Columns)
                    {
                        if (Column.Control != null && !Column.Control.DoNotPersist)
                        {
                            if (Column.Control is EbPowerSelect)
                            {
                                string dm = string.Empty;
                                foreach (KeyValuePair<int, Dictionary<string, string>> dp in Column.D)
                                {
                                    foreach (KeyValuePair<string, string> dc in dp.Value)
                                        dm += dc.Value + CharConstants.SPACE;
                                }
                                data.Add(new Param { Name = Column.Control.Label, Type = ((int)EbDbTypes.String).ToString(), Value = dm });
                            }
                            else
                            {
                                data.Add(new Param
                                {
                                    Name = Column.Control.Label,
                                    Type = ((int)EbDbTypes.String).ToString(),
                                    Value = string.IsNullOrEmpty(Column.F) ? Convert.ToString(Column.Value) : Column.F
                                });
                            }
                        }
                    }
                }
            }
            return data;
        }

        public string Save(IDatabase DataDB, Service service)
        {
            this.DbConnection = DataDB.GetNewConnection();
            string resp = string.Empty;
            try
            {
                this.DbConnection.Open();
                this.DbTransaction = this.DbConnection.BeginTransaction();

                bool IsUpdate = this.TableRowId > 0;
                if (IsUpdate)
                {
                    this.RefreshFormData(DataDB, service, true, true);
                    resp = "Updated: " + this.Update(DataDB, service);
                }
                else
                {
                    this.TableRowId = this.Insert(DataDB, service);
                    resp = "Inserted: " + this.TableRowId;
                    Console.WriteLine("New record inserted. Table :" + this.TableName + ", Id : " + this.TableRowId);
                }
                this.RefreshFormData(DataDB, service, false, true);
                resp += " - AuditTrail: " + EbAuditTrail.UpdateAuditTrail(this, DataDB);
                resp += " - AfterSave: " + this.AfterSave(DataDB, IsUpdate);
                this.DbTransaction.Commit();
            }
            catch (FormException ex1)
            {
                try
                {
                    this.DbTransaction.Rollback();
                }
                catch (Exception ex2)
                {
                    Console.WriteLine($"Rollback Exception Type: {ex2.GetType()}\nMessage: {ex2.Message}");
                }
                throw ex1;
            }
            catch (Exception ex1)
            {
                try
                {
                    this.DbTransaction.Rollback();
                }
                catch (Exception ex2)
                {
                    Console.WriteLine($"Rollback Exception Type: {ex2.GetType()}\nMessage: {ex2.Message}");
                }
                throw new FormException("Exception in Form data save", (int)HttpStatusCodes.INTERNAL_SERVER_ERROR, ex1.Message, ex1.StackTrace);
            }
            this.DbConnection.Close();
            return resp;
        }

        public int Insert(IDatabase DataDB, Service service)
        {
            string fullqry = string.Empty;
            string _extqry = string.Empty;
            List<DbParameter> param = new List<DbParameter>();
            int i = 0;
            List<EbWebForm> FormCollection = new List<EbWebForm>() { this };
            if (this.ExeDataPusher)
            {
                foreach (EbDataPusher pusher in this.DataPushers)
                {
                    pusher.WebForm.UserObj = this.UserObj;
                    pusher.WebForm.SolutionObj = this.SolutionObj;
                    FormCollection.Add(pusher.WebForm);
                }
                this.PrepareWebFormData();
            }
            foreach (EbWebForm WebForm in FormCollection)
            {
                if (!(WebForm.FormData.MultipleTables.ContainsKey(WebForm.FormSchema.MasterTable) && WebForm.FormData.MultipleTables[WebForm.FormSchema.MasterTable].Count > 0))
                {
                    string _q = QueryGetter.GetInsertQuery(WebForm, DataDB, WebForm.FormSchema.MasterTable, true);
                    fullqry += string.Format(_q, string.Empty, string.Empty);
                }
                foreach (TableSchema _table in WebForm.FormSchema.Tables)
                {
                    if (!WebForm.FormData.MultipleTables.ContainsKey(_table.TableName))
                        continue;

                    foreach (SingleRow row in WebForm.FormData.MultipleTables[_table.TableName])
                    {
                        string _cols = string.Empty;
                        string _values = string.Empty;

                        foreach (SingleColumn cField in row.Columns)
                        {
                            if (cField.Control != null)
                                cField.Control.ParameterizeControl(DataDB, param, WebForm.TableName, cField, true, ref i, ref _cols, ref _values, ref _extqry, WebForm.UserObj, null);
                            else
                                WebForm.ParameterizeUnknown(DataDB, param, cField, true, ref i, ref _cols, ref _values);
                        }

                        string _qry = QueryGetter.GetInsertQuery(WebForm, DataDB, _table.TableName, true);
                        fullqry += string.Format(_qry, _cols, _values);

                        fullqry += WebForm.InsertUpdateLines(_table.TableName, row, DataDB, param, ref i);
                    }
                }
                param.Add(DataDB.GetNewParameter(WebForm.TableName + FormConstants._eb_ver_id, EbDbTypes.Int32, WebForm.RefId.Split(CharConstants.DASH)[4]));
            }

            fullqry += _extqry;
            fullqry += this.GetFileUploaderUpdateQuery(DataDB, param, ref i);
            fullqry += this.GetMyActionInsertUpdateQuery(DataDB, param, ref i, true, service);

            param.Add(DataDB.GetNewParameter(FormConstants.eb_createdby, EbDbTypes.Int32, this.UserObj.UserId));
            param.Add(DataDB.GetNewParameter(FormConstants.eb_loc_id, EbDbTypes.Int32, this.LocationId));
            fullqry += string.Format("SELECT eb_currval('{0}_id_seq');", this.TableName);

            EbDataSet tem = DataDB.DoQueries(this.DbConnection, fullqry, param.ToArray());
            EbDataTable temp = tem.Tables[tem.Tables.Count - 1];
            int _rowid = temp.Rows.Count > 0 ? Convert.ToInt32(temp.Rows[0][0]) : 0;
            return _rowid;
        }

        //pTable => Parent Table, pRow => Parent Row
        private string InsertUpdateLines(string pTable, SingleRow parentRow, IDatabase DataDB, List<DbParameter> param, ref int i)
        {
            string fullqry = string.Empty;
            if (parentRow.LinesTable.Key != null)// Lines table of the grid
            {
                foreach (SingleRow _lineRow in parentRow.LinesTable.Value)
                {
                    string _cols = string.Empty;
                    string _values = string.Empty;
                    string tempStr = string.Empty;////////////////////warning

                    if (!_lineRow.IsDelete)
                    {
                        foreach (SingleColumn cField in _lineRow.Columns)
                        {
                            if (cField.Control != null)
                                cField.Control.ParameterizeControl(DataDB, param, this.TableName, cField, _lineRow.RowId <= 0, ref i, ref _cols, ref _values, ref tempStr, this.UserObj, null);
                            else
                                this.ParameterizeUnknown(DataDB, param, cField, _lineRow.RowId <= 0, ref i, ref _cols, ref _values);
                        }
                    }

                    if (this.TableRowId <= 0 && parentRow.RowId <= 0 && _lineRow.RowId <= 0)//III
                    {
                        string _qry = QueryGetter.GetInsertQuery(this, DataDB, parentRow.LinesTable.Key, true);
                        _qry = string.Format(_qry, $"{{0}} {pTable}_id,", $"{{1}} (SELECT eb_currval('{pTable}_id_seq')),");
                        fullqry += string.Format(_qry, _cols, _values);
                    }
                    else if (this.TableRowId > 0 && parentRow.RowId <= 0 && _lineRow.RowId <= 0)//EII
                    {
                        string _qry = QueryGetter.GetInsertQuery(this, DataDB, parentRow.LinesTable.Key, false);
                        _qry = string.Format(_qry, $"{{0}} {pTable}_id,", $"{{1}} (SELECT eb_currval('{pTable}_id_seq')),");
                        fullqry += string.Format(_qry, _cols, _values);
                    }
                    else if (this.TableRowId > 0 && parentRow.RowId > 0 && _lineRow.RowId <= 0)//EEI
                    {
                        string _qry = QueryGetter.GetInsertQuery(this, DataDB, parentRow.LinesTable.Key, false);
                        _qry = string.Format(_qry, $"{{0}} {pTable}_id,", $"{{1}} {parentRow.RowId},");
                        fullqry += string.Format(_qry, _cols, _values);
                    }
                    else if (this.TableRowId > 0 && parentRow.RowId > 0 && _lineRow.RowId > 0)//EEE
                    {
                        string _qry = QueryGetter.GetUpdateQuery(this, DataDB, parentRow.LinesTable.Key, _lineRow.IsDelete);
                        _qry = string.Format(_qry, "{0}", $"{{1}} AND {pTable}_id = {parentRow.RowId} ");
                        fullqry += string.Format(_qry, _cols, _lineRow.RowId);
                    }
                }
            }
            return fullqry;
        }

        public int Update(IDatabase DataDB, Service service)
        {
            string fullqry = string.Empty;
            string _extqry = string.Empty;
            List<DbParameter> param = new List<DbParameter>();
            int i = 0;
            List<EbWebForm> FormCollection = new List<EbWebForm>() { this };
            if (this.ExeDataPusher)
            {
                foreach (EbDataPusher pusher in this.DataPushers)
                {
                    pusher.WebForm.UserObj = this.UserObj;
                    pusher.WebForm.SolutionObj = this.SolutionObj;
                    FormCollection.Add(pusher.WebForm);
                }
                this.PrepareWebFormData();
            }

            foreach (EbWebForm WebForm in FormCollection)
            {
                foreach (KeyValuePair<string, SingleTable> entry in WebForm.FormData.MultipleTables)
                {
                    foreach (SingleRow row in entry.Value)
                    {
                        string _colvals = string.Empty;
                        string _temp = string.Empty;
                        int _rowId = row.RowId;
                        if (_rowId > 0)
                        {
                            string t = string.Empty;
                            if (!row.IsDelete)
                            {
                                foreach (SingleColumn cField in row.Columns)
                                {
                                    if (cField.Control != null)
                                    {
                                        SingleColumn ocF = WebForm.FormDataBackup.MultipleTables[entry.Key].Find(e => e.RowId == row.RowId).Columns.Find(e => e.Name.Equals(cField.Name));
                                        cField.Control.ParameterizeControl(DataDB, param, WebForm.TableName, cField, false, ref i, ref _colvals, ref _temp, ref _extqry, WebForm.UserObj, ocF);
                                    }
                                    else
                                        WebForm.ParameterizeUnknown(DataDB, param, cField, false, ref i, ref _colvals, ref _temp);
                                }
                            }
                            else if (WebForm.DataPusherConfig == null && !entry.Key.Equals(WebForm.TableName))
                            {
                                List<TableSchema> _tables = WebForm.FormSchema.Tables.FindAll(e => e.IsDynamic && e.TableType == WebFormTableTypes.Grid);
                                foreach (TableSchema _table in _tables)
                                {
                                    t += $@"UPDATE {_table.TableName} SET eb_del = 'T', eb_lastmodified_by = @eb_modified_by, eb_lastmodified_at = {DataDB.EB_CURRENT_TIMESTAMP} WHERE
                                        {entry.Key}_id = @{entry.Key}_id_{i} AND {WebForm.TableName}_id = @{WebForm.TableName}_id AND COALESCE(eb_del, 'F') = 'F'; ";
                                    param.Add(DataDB.GetNewParameter(entry.Key + "_id_" + i, EbDbTypes.Int32, _rowId));
                                    i++;
                                }
                            }

                            string _qry = QueryGetter.GetUpdateQuery(WebForm, DataDB, entry.Key, row.IsDelete);
                            fullqry += string.Format(_qry, _colvals, row.RowId);
                            fullqry += t;
                        }
                        else
                        {
                            string _cols = string.Empty;
                            string _vals = string.Empty;

                            foreach (SingleColumn cField in row.Columns)
                            {
                                if (cField.Control != null)
                                    cField.Control.ParameterizeControl(DataDB, param, WebForm.TableName, cField, true, ref i, ref _cols, ref _vals, ref _extqry, WebForm.UserObj, null);
                                else
                                    WebForm.ParameterizeUnknown(DataDB, param, cField, true, ref i, ref _cols, ref _vals);
                            }
                            string _qry = QueryGetter.GetInsertQuery(WebForm, DataDB, entry.Key, WebForm.TableRowId == 0);
                            fullqry += string.Format(_qry, _cols, _vals);
                        }

                        fullqry += WebForm.InsertUpdateLines(entry.Key, row, DataDB, param, ref i);

                    }
                }
                param.Add(DataDB.GetNewParameter(WebForm.TableName + FormConstants._id, EbDbTypes.Int32, WebForm.TableRowId));
                param.Add(DataDB.GetNewParameter(WebForm.TableName + FormConstants._eb_ver_id, EbDbTypes.Int32, WebForm.RefId.Split(CharConstants.DASH)[4]));
            }

            fullqry += _extqry;
            fullqry += GetFileUploaderUpdateQuery(DataDB, param, ref i);
            fullqry += this.GetMyActionInsertUpdateQuery(DataDB, param, ref i, false, service);
            param.Add(DataDB.GetNewParameter(FormConstants.eb_loc_id, EbDbTypes.Int32, this.LocationId));
            param.Add(DataDB.GetNewParameter(FormConstants.eb_createdby, EbDbTypes.Int32, this.UserObj.UserId));
            param.Add(DataDB.GetNewParameter(FormConstants.eb_modified_by, EbDbTypes.Int32, this.UserObj.UserId));
            return DataDB.DoNonQuery(this.DbConnection, fullqry, param.ToArray());
        }

        private string GetMyActionInsertUpdateQuery(IDatabase DataDB, List<DbParameter> param, ref int i, bool isInsert, Service service)
        {
            EbReview ebReview = (EbReview)this.FormSchema.ExtendedControls.FirstOrDefault(e => e is EbReview);
            if (ebReview == null || ebReview.FormStages.Count == 0)
                return string.Empty;
            string insUpQ = string.Empty;
            string masterId = $"@{this.TableName}_id";
            EbReviewStage nextStage = null;
            bool insMyActRequired = false;
            if (isInsert)
            {
                masterId = $"(SELECT eb_currval('{this.TableName}_id_seq'))";
                nextStage = ebReview.FormStages[0];
            }
            else
            {
                int reviewRowCount = this.FormData.MultipleTables[ebReview.TableName].Count;

                if (reviewRowCount == 1)
                {
                    bool permissionGranted = false;
                    if (this.FormDataBackup != null && this.FormDataBackup.MultipleTables.ContainsKey(ebReview.TableName))
                    {
                        SingleRow Row = this.FormDataBackup.MultipleTables[ebReview.TableName].Find(e => e.RowId <= 0);
                        if (Row != null && Convert.ToString(Row["eb_my_actions_id"]) == Convert.ToString(this.FormData.MultipleTables[ebReview.TableName][0]["eb_my_actions_id"]))
                            permissionGranted = true;
                    }
                    if (!permissionGranted)
                        throw new FormException("Access denied to execute review", (int)HttpStatusCodes.UNAUTHORIZED, $"Following entry is not present in FormDataBackup. eb_my_actions_id: {this.FormData.MultipleTables[ebReview.TableName][0]["eb_my_actions_id"]} ", "From GetMyActionInsertUpdateQuery");

                    insUpQ = $@"UPDATE eb_my_actions SET completed_at = {DataDB.EB_CURRENT_TIMESTAMP}, completed_by = @eb_createdby, is_completed = 'T',
					    eb_approval_lines_id = (SELECT eb_currval('eb_approval_lines_id_seq')) WHERE id = @eb_my_actions_id_{i} AND eb_del = 'F'; ";
                    param.Add(DataDB.GetNewParameter($"@eb_my_actions_id_{i++}", EbDbTypes.Int32, this.FormData.MultipleTables[ebReview.TableName][0]["eb_my_actions_id"]));
                    Console.WriteLine("Will try to UPDATE eb_my_actions");

                    if (!(ebReview.FormStages.Find(e => e.EbSid == this.FormData.MultipleTables[ebReview.TableName][0]["stage_unique_id"]) is EbReviewStage currentStage))
                        throw new FormException("Bad Request", (int)HttpStatusCodes.BAD_REQUEST, $"eb_approval_lines contains an invalid stage_unique_id: {this.FormData.MultipleTables[ebReview.TableName][0]["stage_unique_id"]} ", "From GetMyActionInsertUpdateQuery");

                    //_FG_WebForm global = GlobalsGenerator.GetCSharpFormGlobals(this, this.FormData);
                    //_FG_Root globals = new _FG_Root(global, this, service);

                    FG_Root globals = GlobalsGenerator.GetCSharpFormGlobals_NEW(this, this.FormData, this.FormDataBackup);

                    object x = this.ExecuteCSharpScriptNew(currentStage.NextStage.Code, globals);
                    string nxtStName = Convert.ToString(x);

                    GlobalsGenerator.PostProcessGlobals(this, globals, service);
                    string _reviewStatus = globals.form.review._ReviewStatus;
                    if (_reviewStatus == "complete" || _reviewStatus == "abandon")
                    {
                        this.AfterSaveRoutines.AddRange(ebReview.OnApprovalRoutines);
                        insMyActRequired = false;
                        // eb_approval - update review_status
                        insUpQ += $@"UPDATE eb_approval SET review_status = '{_reviewStatus}', eb_lastmodified_by = @eb_modified_by, eb_lastmodified_at = {DataDB.EB_CURRENT_TIMESTAMP} 
                                    WHERE eb_src_id = @{this.TableName}_id AND eb_ver_id =  @{this.TableName}_eb_ver_id AND COALESCE(eb_del, 'F') = 'F'; ";
                    }
                    else
                    {
                        EbReviewStage nxtSt = currentStage;
                        if (!nxtStName.IsNullOrEmpty())
                            nxtSt = ebReview.FormStages.Find(e => e.Name == nxtStName);

                        if (nxtSt != null)
                        {
                            //backtrack to the same user - code here if needed
                            nextStage = nxtSt;
                            insMyActRequired = true;
                        }
                        else
                            throw new FormException("Unable to decide next stage", (int)HttpStatusCodes.INTERNAL_SERVER_ERROR, "NextStage C# script returned a value that is not recognized as a stage", "Return value : " + nxtStName);
                    }
                }
                else if (reviewRowCount == 0)
                {
                    Console.WriteLine("No items reviewed in this form data save");
                    return string.Empty;
                }
                else
                    throw new FormException("Bad Request for review control", (int)HttpStatusCodes.BAD_REQUEST, "eb_approval_lines contains more than one rows, only one review allowed at a time", "From GetMyActionInsertUpdateQuery");
            }

            if (isInsert || insMyActRequired)// first save or insert myaction required in edit
            {
                string _col = string.Empty, _val = string.Empty;
                if (nextStage.ApproverEntity == ApproverEntityTypes.Role)
                {
                    _col = "role_ids";
                    _val = $"@role_ids_{i}";
                    string roles = nextStage.ApproverRoles == null ? string.Empty : nextStage.ApproverRoles.Join(",");
                    param.Add(DataDB.GetNewParameter($"@role_ids_{i++}", EbDbTypes.String, roles));
                }
                else if (nextStage.ApproverEntity == ApproverEntityTypes.UserGroup)
                {
                    _col = "usergroup_id";
                    _val = $"@usergroup_id_{i}";
                    param.Add(DataDB.GetNewParameter($"@usergroup_id_{i++}", EbDbTypes.Int32, nextStage.ApproverUserGroup));
                }
                else if (nextStage.ApproverEntity == ApproverEntityTypes.Users)
                {
                    string t1 = string.Empty, t2 = string.Empty, t3 = string.Empty;
                    List<DbParameter> _params = new List<DbParameter>();
                    int _idx = 0;
                    foreach (KeyValuePair<string, string> p in nextStage.QryParams)
                    {
                        if (!this.FormData.MultipleTables.ContainsKey(p.Value))
                            new FormException($"Review control parameter {p.Key} is not idetified", (int)HttpStatusCodes.BAD_REQUEST, "GetFirstMyActionInsertQuery", $"{p.Value} not found in MultipleTables");
                        TableSchema _table = this.FormSchema.Tables.Find(e => e.TableName == p.Value);
                        if (_table.TableType != WebFormTableTypes.Normal)
                            new FormException($"Review control parameter {p.Key} is not idetified", (int)HttpStatusCodes.BAD_REQUEST, "GetFirstMyActionInsertQuery", $"{p.Value} found in MultipleTables but it is not a normal table");
                        if (this.FormData.MultipleTables[p.Value].Count != 1)
                            new FormException($"Review control parameter {p.Key} is not idetified", (int)HttpStatusCodes.BAD_REQUEST, "GetFirstMyActionInsertQuery", $"{p.Value} found in MultipleTables but table is empty");
                        SingleColumn Column = this.FormData.MultipleTables[p.Value][0].Columns.Find(e => e.Control.Name == p.Key);
                        if (Column == null || Column.Control == null)
                            new FormException($"Review control parameter {p.Key} is not idetified", (int)HttpStatusCodes.BAD_REQUEST, "GetFirstMyActionInsertQuery", $"{p.Value} found in MultipleTables but data not available");

                        Column.Control.ParameterizeControl(DataDB, _params, null, Column, true, ref _idx, ref t1, ref t2, ref t3, this.UserObj, null);
                        _params[i - 1].ParameterName = p.Key;
                    }
                    List<int> uids = new List<int>();
                    EbDataTable dt = DataDB.DoQuery(nextStage.ApproverUsers.Code, _params.ToArray());
                    foreach (EbDataRow dr in dt.Rows)
                    {
                        int.TryParse(dr[0].ToString(), out int temp);
                        if (!uids.Contains(temp))
                            uids.Add(temp);
                    }
                    _col = "user_ids";
                    _val = $"'{uids.Join(",")}'";
                }

                insUpQ += $@"INSERT INTO eb_my_actions({_col}, from_datetime, is_completed, eb_stages_id, form_ref_id, form_data_id, eb_del, description, is_form_data_editable)
                                VALUES ({_val}, {DataDB.EB_CURRENT_TIMESTAMP}, 'F', (SELECT id FROM eb_stages WHERE stage_unique_id = '{nextStage.EbSid}' AND form_ref_id = '{this.RefId}' AND eb_del = 'F'), 
                                '{this.RefId}', {masterId}, 'F', 'Review required in {this.DisplayName}', '{(nextStage.IsFormEditable ? "T" : "F")}'); ";
                if (DataDB.Vendor == DatabaseVendors.MYSQL)
                    insUpQ += "SELECT eb_persist_currval('eb_my_actions_id_seq'); ";

                Console.WriteLine("Will try to INSERT eb_my_actions");

                if (isInsert)// eb_approval - insert entry here
                {                   
                    insUpQ += $@"INSERT INTO eb_approval(review_status, eb_my_actions_id, eb_src_id, eb_ver_id, eb_created_by, eb_created_at, eb_del)
                                    VALUES('processing', (SELECT eb_currval('eb_my_actions_id_seq')), (SELECT eb_currval('{this.TableName}_id_seq')), 
                                    @{this.TableName}_eb_ver_id, @eb_createdby, {DataDB.EB_CURRENT_TIMESTAMP}, 'F'); ";
                }
                else // eb_approval - update eb_my_actions_id
                {
                    insUpQ += $@"UPDATE eb_approval SET eb_my_actions_id = (SELECT eb_currval('eb_my_actions_id_seq')), eb_lastmodified_by = @eb_modified_by, eb_lastmodified_at = {DataDB.EB_CURRENT_TIMESTAMP} 
                                    WHERE eb_src_id = @{this.TableName}_id AND eb_ver_id =  @{this.TableName}_eb_ver_id AND COALESCE(eb_del, 'F') = 'F'; ";
                }                    
            }

            return insUpQ;
        }

        public string GetFileUploaderUpdateQuery(IDatabase DataDB, List<DbParameter> param, ref int i)
        {
            string _qry = string.Empty;
            foreach (EbControl control in this.FormSchema.ExtendedControls)
            {
                if (control is EbFileUploader)
                {
                    EbFileUploader _c = control as EbFileUploader;
                    if (this.FormData.ExtendedTables.ContainsKey(_c.Name ?? _c.EbSid))
                    {
                        if (this.FormGlobals == null)
                            this.FormGlobals = GlobalsGenerator.GetCSharpFormGlobals_NEW(this, this.FormData, null);
                        string secCxtGet = null, secCxtSet = null;
                        if (_c.ContextGetExpr != null && !_c.ContextGetExpr.Code.IsNullOrEmpty())
                            secCxtGet = Convert.ToString(this.ExecuteCSharpScriptNew(_c.ContextGetExpr.Code, this.FormGlobals));
                        if (_c.ContextSetExpr != null && !_c.ContextSetExpr.Code.IsNullOrEmpty())
                            secCxtSet = Convert.ToString(this.ExecuteCSharpScriptNew(_c.ContextSetExpr.Code, this.FormGlobals));
                        _qry = _c.GetUpdateQuery2(DataDB, param, this.FormData.ExtendedTables[_c.Name ?? _c.EbSid], this.TableName, this.RefId.Split("-")[3], ref i, this.TableRowId, secCxtGet, secCxtSet);
                    }
                }
            }
            return _qry;
        }

        private bool ParameterizeUnknown(IDatabase DataDB, List<DbParameter> param, SingleColumn cField, bool ins, ref int i, ref string _col, ref string _val)
        {
            if (EbColumnExtra.Params.ContainsKey(cField.Name))
            {
                if (cField.Value == null)
                {
                    var p = DataDB.GetNewParameter(cField.Name + "_" + i, EbColumnExtra.Params[cField.Name]);
                    p.Value = DBNull.Value;
                    param.Add(p);
                }
                else
                {
                    param.Add(DataDB.GetNewParameter(cField.Name + "_" + i, EbColumnExtra.Params[cField.Name], cField.Value));
                }
                if (ins)
                {
                    _col += string.Concat(cField.Name, ", ");
                    _val += string.Concat("@", cField.Name, "_", i, ", ");
                }
                else
                    _col += string.Concat(cField.Name, "=@", cField.Name, "_", i, ", ");
                i++;
                return true;
            }
            else if (!cField.Name.Equals("id"))
                Console.WriteLine($"Unknown parameter found in formdata... \nForm RefId : {this.RefId}\tName : {cField.Name}\tType : {cField.Type}\tValue : {cField.Value}");
            return false;
        }

        //form data submission using PushJson and FormGlobals - SQL Job
        public void PrepareWebFormData(IDatabase DataDB, Service service, string PushJson, FormGlobals FormGlobals)
        {
            this.FormData = new WebformData() { MasterTable = this.FormSchema.MasterTable };
            JObject JObj = JObject.Parse(PushJson);

            foreach (TableSchema _table in this.FormSchema.Tables)
            {
                if (JObj[_table.TableName] != null)
                {
                    SingleTable Table = new SingleTable();
                    foreach (JToken jRow in JObj[_table.TableName])
                    {
                        Table.Add(this.GetSingleRow(jRow, _table, FormGlobals));
                    }
                    this.FormData.MultipleTables.Add(_table.TableName, Table);
                }
            }
            this.MergeFormData();

            if (this.TableRowId > 0)//if edit mode then fill or map id by refering FormDataBackup
            {
                this.RefreshFormData(DataDB, service, true, true);

                foreach (KeyValuePair<string, SingleTable> entry in this.FormDataBackup.MultipleTables)
                {
                    if (this.FormData.MultipleTables.ContainsKey(entry.Key))
                    {
                        for (int i = 0; i < entry.Value.Count; i++)
                        {
                            if (i < this.FormData.MultipleTables[entry.Key].Count)
                                this.FormData.MultipleTables[entry.Key][i].RowId = entry.Value[i].RowId;
                            else
                            {
                                this.FormData.MultipleTables[entry.Key].Add(entry.Value[i]);
                                this.FormData.MultipleTables[entry.Key][i].IsDelete = true;
                            }
                        }
                    }
                    else
                    {
                        this.FormData.MultipleTables.Add(entry.Key, entry.Value);
                        foreach (SingleRow Row in this.FormData.MultipleTables[entry.Key])
                            Row.IsDelete = true;
                    }
                }
            }
        }

        //form data submission using PushJson and FormGlobals - SQL Job
        public string Save(IDatabase DataDB, Service service, DbConnection DbCon)
        {
            if (DbCon == null)
                this.DbConnection = DataDB.GetNewConnection();
            else
                this.DbConnection = DbCon;

            string resp = string.Empty;
            try
            {
                if (DbCon == null)
                {
                    this.DbConnection.Open();
                    this.DbTransaction = this.DbConnection.BeginTransaction();
                }

                bool IsUpdate = this.TableRowId > 0;
                if (IsUpdate)
                {
                    this.RefreshFormData(DataDB, service, true, false);
                    resp = "Updated: " + this.Update(DataDB, service);
                }
                else
                {
                    this.TableRowId = this.Insert(DataDB, service);
                    resp = "Inserted: " + this.TableRowId;
                    Console.WriteLine("New record inserted. Table :" + this.TableName + ", Id : " + this.TableRowId);
                }
                resp += " - AuditTrail: " + EbAuditTrail.UpdateAuditTrail(this, DataDB);
                resp += " - AfterSave: " + this.AfterSave(DataDB, IsUpdate);

                if (DbCon == null)
                    this.DbTransaction.Commit();
            }
            catch (Exception ex1)
            {
                try
                {
                    if (DbCon == null)
                        this.DbTransaction.Rollback();
                }
                catch (Exception ex2)
                {
                    Console.WriteLine($"Rollback Exception Type: {ex2.GetType()}\nMessage: {ex2.Message}");
                }
                throw new FormException("Exception in Form data save", (int)HttpStatusCodes.INTERNAL_SERVER_ERROR, ex1.Message, ex1.StackTrace);
            }
            if (DbCon == null)
                this.DbConnection.Close();
            return resp;
        }

        //New implementation using less memory utilization// under testing
        private void PrepareWebFormDataNew()
        {
            FG_Root globals = GlobalsGenerator.GetCSharpFormGlobals_NEW(this, this.FormData, this.FormDataBackup);
            EbDataPushHelper ebDataPushHelper = new EbDataPushHelper(this);
            string code = ebDataPushHelper.GetProcessedSingleCode();
            if (code != string.Empty)
            {
                object out_dict = this.ExecuteCSharpScriptNew(code, globals);
                ebDataPushHelper.CreateWebFormData(out_dict);
            }
        }

        private void PrepareWebFormData()
        {
            DateTime startdt = DateTime.Now;
            FG_Root globals = GlobalsGenerator.GetCSharpFormGlobals_NEW(this, this.FormData, this.FormDataBackup);
            foreach (EbDataPusher pusher in this.DataPushers)
            {
                pusher.WebForm.DataPusherConfig.SourceRecId = this.TableRowId;
                pusher.WebForm.RefId = pusher.FormRefId;
                pusher.WebForm.UserObj = this.UserObj;
                pusher.WebForm.LocationId = this.LocationId;
                pusher.WebForm.SolutionObj = this.SolutionObj;

                if (!pusher.PushOnlyIf.IsNullOrEmpty())
                {
                    string status = Convert.ToString(pusher.WebForm.ExecuteCSharpScriptNew(pusher.PushOnlyIf, globals));
                    if (status.Equals(true.ToString()))
                        pusher.WebForm.DataPusherConfig.AllowPush = true;
                }
                else
                    pusher.WebForm.DataPusherConfig.AllowPush = true;

                if (pusher.WebForm.DataPusherConfig.AllowPush)
                {
                    pusher.WebForm.ProcessPushJson(pusher, globals);
                    pusher.WebForm.MergeFormData();
                }
                else
                    pusher.WebForm.FormData = new WebformData();

                if (this.TableRowId > 0)//if edit mode then fill or map the id by refering FormDataBackup
                {
                    if (pusher.WebForm.DataPusherConfig.AllowPush)
                    {
                        if (pusher.WebForm.FormDataBackup != null)
                        {
                            foreach (KeyValuePair<string, SingleTable> entry in pusher.WebForm.FormDataBackup.MultipleTables)
                            {
                                if (pusher.WebForm.FormData.MultipleTables.ContainsKey(entry.Key))
                                {
                                    for (int i = 0; i < entry.Value.Count; i++)
                                    {
                                        if (i < pusher.WebForm.FormData.MultipleTables[entry.Key].Count)
                                            pusher.WebForm.FormData.MultipleTables[entry.Key][i].RowId = entry.Value[i].RowId;
                                        else
                                        {
                                            pusher.WebForm.FormData.MultipleTables[entry.Key].Add(entry.Value[i]);
                                            pusher.WebForm.FormData.MultipleTables[entry.Key][i].IsDelete = true;
                                        }
                                    }
                                }
                                else
                                {
                                    pusher.WebForm.FormData.MultipleTables.Add(entry.Key, entry.Value);
                                    foreach (SingleRow Row in pusher.WebForm.FormData.MultipleTables[entry.Key])
                                        Row.IsDelete = true;
                                }
                            }
                        }
                    }
                    else
                    {
                        pusher.WebForm.FormData = pusher.WebForm.FormDataBackup;
                        foreach (KeyValuePair<string, SingleTable> entry in pusher.WebForm.FormData.MultipleTables)
                        {
                            foreach (SingleRow Row in entry.Value)
                                Row.IsDelete = true;
                        }
                    }
                }
            }
            Console.WriteLine("PrepareWebFormData for Data Pushers. Execution Time = " + (DateTime.Now - startdt).TotalMilliseconds);
        }

        public void ProcessPushJson(EbDataPusher pusher, FG_Root globals)
        {
            this.FormData = new WebformData() { MasterTable = this.FormSchema.MasterTable };
            JObject JObj = JObject.Parse(pusher.Json);

            foreach (TableSchema _table in this.FormSchema.Tables)
            {
                if (JObj[_table.TableName] != null)
                {
                    SingleTable Table = new SingleTable();
                    foreach (JToken jRow in JObj[_table.TableName])
                    {
                        if (_table.TableType == WebFormTableTypes.Grid && !pusher.SkipLineItemIf.IsNullOrEmpty())
                        {
                            string status = Convert.ToString(this.ExecuteCSharpScriptNew(pusher.SkipLineItemIf, globals));
                            if (status.Equals(true.ToString()))
                                continue;
                        }
                        Table.Add(this.GetSingleRow(jRow, _table, globals));
                    }
                    this.FormData.MultipleTables.Add(_table.TableName, Table);
                }
            }
        }

        private SingleRow GetSingleRow(JToken JRow, TableSchema _table, FG_Root globals)
        {
            SingleRow Row = new SingleRow() { RowId = 0 };
            foreach (ColumnSchema _column in _table.Columns)
            {
                object val = null;
                if (JRow[_column.ColumnName] != null)
                    val = this.ExecuteCSharpScriptNew(JRow[_column.ColumnName].ToString(), globals);

                Row.Columns.Add(new SingleColumn
                {
                    Name = _column.ColumnName,
                    Type = _column.EbDbType,
                    Value = val
                });
            }
            return Row;
        }

        //duplicate for SQL job - remove this fn if globals conversion is completed
        private SingleRow GetSingleRow(JToken JRow, TableSchema _table, FormGlobals globals)
        {
            SingleRow Row = new SingleRow() { RowId = 0 };
            foreach (ColumnSchema _column in _table.Columns)
            {
                object val = null;
                if (JRow[_column.ColumnName] != null)
                    val = this.ExecuteCSharpScript(JRow[_column.ColumnName].ToString(), globals);

                Row.Columns.Add(new SingleColumn
                {
                    Name = _column.ColumnName,
                    Type = _column.EbDbType,
                    Value = val
                });
            }
            return Row;
        }

        private object ExecuteCSharpScript(string code, FormGlobals globals)
        {
            try
            {
                Script valscript = CSharpScript.Create<dynamic>(
                    code,
                    ScriptOptions.Default.WithReferences("Microsoft.CSharp", "System.Core").WithImports("System.Dynamic", "System", "System.Collections.Generic",
                    "System.Diagnostics", "System.Linq"),
                    globalsType: typeof(FormGlobals)
                );
                //var compilation = valscript.GetCompilation();
                //var ilstream = new MemoryStream();
                //var pdbstream = new MemoryStream();
                //compilation.Emit(ilstream, pdbstream);
                valscript.Compile();
                return (valscript.RunAsync(globals)).Result.ReturnValue;
            }
            catch (Exception ex)
            {
                Console.WriteLine("Exception in C# Expression evaluation:" + code + " \nMessage : " + ex.Message);
                Console.WriteLine(ex.StackTrace);
                throw new FormException("Exception in C# code evaluation", (int)HttpStatusCodes.INTERNAL_SERVER_ERROR, $"{ex.Message} \n C# code : {code}", $"StackTrace : {ex.StackTrace}");
            }
        }

        private object ExecuteCSharpScriptNew(string code, FG_Root globals)
        {
            try
            {
                Script valscript = CSharpScript.Create<dynamic>(
                    code,
                    ScriptOptions.Default.WithReferences("Microsoft.CSharp", "System.Core").WithImports("System", "System.Collections.Generic", "System.Linq"),
                    globalsType: typeof(FG_Root)
                );
                valscript.Compile();
                return (valscript.RunAsync(globals)).Result.ReturnValue;
            }
            catch (Exception ex)
            {
                Console.WriteLine("Exception in C# Expression evaluation:" + code + " \nMessage : " + ex.Message);
                Console.WriteLine(ex.StackTrace);
                throw new FormException("Exception in C# code evaluation", (int)HttpStatusCodes.INTERNAL_SERVER_ERROR, $"{ex.Message} \n C# code : {code}", $"StackTrace : {ex.StackTrace}");
            }
        }

        //execute sql queries after form data save
        public int AfterSave(IDatabase DataDB, bool IsUpdate)
        {
            string q = string.Empty;
            if (this.AfterSaveRoutines != null && this.AfterSaveRoutines.Count > 0)
            {
                foreach (EbRoutines e in this.AfterSaveRoutines)
                {
                    if (IsUpdate && !e.IsDisabledOnEdit)
                        q += e.Script.Code + ";";
                    else if (!IsUpdate && !e.IsDisabledOnNew)
                        q += e.Script.Code + ";";
                }
            }
            if (!q.Equals(string.Empty))
            {
                List<DbParameter> param = new List<DbParameter>();
                foreach (KeyValuePair<string, SingleTable> item in this.FormData.MultipleTables)
                {
                    if (item.Value.Count == 0)
                        continue;
                    foreach (SingleColumn cField in item.Value[item.Value.Count - 1].Columns)
                    {
                        if (q.Contains("@" + item.Key + "_" + cField.Name) || q.Contains(":" + item.Key + "_" + cField.Name))
                        {
                            if (cField.Value == null)
                            {
                                var p = DataDB.GetNewParameter(item.Key + "_" + cField.Name, (EbDbTypes)cField.Type);
                                p.Value = DBNull.Value;
                                param.Add(p);
                            }
                            else
                                param.Add(DataDB.GetNewParameter(item.Key + "_" + cField.Name, (EbDbTypes)cField.Type, cField.Value));
                        }
                    }
                }
                return DataDB.DoNonQuery(this.DbConnection, q, param.ToArray());
            }
            return 0;
        }

        public void SendMailIfUserCreated(RabbitMqProducer MessageProducer3)
        {
            foreach (EbControl c in this.FormSchema.ExtendedControls)
            {
                if (c is EbProvisionUser)
                    (c as EbProvisionUser).SendMailIfUserCreated(MessageProducer3, this.UserObj, this.SolutionObj);
            }
        }

        //to check whether this form data entry can be delete by executing DisableDelete sql quries
        private bool CanDelete(IDatabase DataDB)
        {
            if (this.DisableDelete != null && this.DisableDelete.Count > 0)
            {
                string q = string.Join(";", this.DisableDelete.Select(e => e.Script.Code));
                DbParameter[] p = new DbParameter[] {
                    DataDB.GetNewParameter(FormConstants.id, EbDbTypes.Int32, this.TableRowId)
                };
                EbDataSet ds = DataDB.DoQueries(q, p);

                for (int i = 0; i < ds.Tables.Count; i++)
                {
                    if (ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0].Count > 0)
                    {
                        if (!this.DisableDelete[i].IsDisabled && Convert.ToInt32(ds.Tables[0].Rows[0][0]) > 0 && !this.DisableDelete[i].IsWarningOnly)
                            return false;
                    }
                }
            }
            return true;
        }

        public int Delete(IDatabase DataDB)
        {
            if (this.CanDelete(DataDB))
            {
                string query = QueryGetter.GetDeleteQuery(this, DataDB);
                DbParameter[] param = new DbParameter[] {
                    DataDB.GetNewParameter(FormConstants.eb_lastmodified_by, EbDbTypes.Int32, this.UserObj.UserId),
                    DataDB.GetNewParameter(FormConstants.id, EbDbTypes.Int32, this.TableRowId)
                };
                return DataDB.DoNonQuery(query, param);
            }
            return -1;
        }

        //to check whether this form data entry can be cancel by executing DisableCancel sql quries
        private bool CanCancel(IDatabase DataDB)
        {
            if (this.DisableCancel != null && this.DisableCancel.Count > 0)
            {
                string q = string.Join(";", this.DisableCancel.Select(e => e.Script.Code));
                DbParameter[] p = new DbParameter[] {
                    DataDB.GetNewParameter(FormConstants.id, EbDbTypes.Int32, this.TableRowId)
                };
                EbDataSet ds = DataDB.DoQueries(q, p);

                for (int i = 0; i < ds.Tables.Count; i++)
                {
                    if (ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0].Count > 0)
                    {
                        if (!this.DisableCancel[i].IsDisabled && Convert.ToInt32(ds.Tables[0].Rows[0][0]) > 0 && !this.DisableCancel[i].IsWarningOnly)
                            return false;
                    }
                }
            }
            return true;
        }

        public int Cancel(IDatabase DataDB)
        {
            if (this.CanCancel(DataDB))
            {
                string query = QueryGetter.GetCancelQuery(this, DataDB);
                DbParameter[] param = new DbParameter[] {
                    DataDB.GetNewParameter(FormConstants.eb_lastmodified_by, EbDbTypes.Int32, this.UserObj.UserId),
                    DataDB.GetNewParameter(FormConstants.id, EbDbTypes.Int32, this.TableRowId)
                };
                return DataDB.DoNonQuery(query, param);
            }
            return -1;
        }

        private void ExeDeleteCancelScript(IDatabase DataDB)
        {
            string q = string.Empty;
            if (this.DisableDelete != null && this.DisableDelete.Count > 0)
            {
                q = string.Join(";", this.DisableDelete.Select(e => e.Script.Code));
            }
            if (this.DisableCancel != null && this.DisableCancel.Count > 0)
            {
                q += string.Join(";", this.DisableCancel.Select(e => e.Script.Code));
            }
            if (!q.Equals(string.Empty))
            {
                DbParameter[] p = new DbParameter[] {
                    DataDB.GetNewParameter("id", EbDbTypes.Int32, this.TableRowId)
                };
                EbDataSet ds = DataDB.DoQueries(q, p);
                int i = 0;
                for (; i < this.DisableDelete.Count; i++)
                {
                    if (ds.Tables[i].Rows.Count > 0 && ds.Tables[i].Rows[0].Count > 0)
                    {
                        if (this.DisableDelete[i].IsDisabled || Convert.ToInt32(ds.Tables[i].Rows[0][0]) == 0)
                        {
                            this.FormData.DisableDelete.Add(this.DisableDelete[i].Name, false);
                        }
                        else
                        {
                            this.FormData.DisableDelete.Add(this.DisableDelete[i].Name, true);
                        }
                    }
                }

                for (int j = 0; j < this.DisableCancel.Count; i++, j++)
                {
                    if (ds.Tables[i].Rows.Count > 0 && ds.Tables[i].Rows[0].Count > 0)
                    {
                        if (this.DisableCancel[j].IsDisabled || Convert.ToInt32(ds.Tables[i].Rows[0][0]) == 0)
                        {
                            this.FormData.DisableCancel.Add(this.DisableCancel[j].Name, false);
                        }
                        else
                        {
                            this.FormData.DisableCancel.Add(this.DisableCancel[j].Name, true);
                        }
                    }
                }
            }
        }

        public string GetAuditTrail(IDatabase DataDB, Service Service)
        {
            return EbAuditTrail.GetAuditTrail(this, DataDB, Service);
        }

        public Dictionary<int, List<string>> GetLocBasedPermissions()
        {
            Dictionary<int, List<string>> _perm = new Dictionary<int, List<string>>();
            //New View Edit Delete Cancel Print AuditTrail

            foreach (int locid in this.SolutionObj.Locations.Keys)
            {
                List<string> _temp = new List<string>();
                foreach (EbOperation op in Operations.Enumerator)
                {
                    if (this.HasPermission(op.Name, locid))
                        _temp.Add(op.Name);
                }
                _perm.Add(locid, _temp);
            }
            return _perm;
        }

        public bool HasPermission(string ForWhat, int LocId)
        {
            if (this.UserObj.Roles.Contains(SystemRoles.SolutionOwner.ToString()) ||
                this.UserObj.Roles.Contains(SystemRoles.SolutionAdmin.ToString()) ||
                this.UserObj.Roles.Contains(SystemRoles.SolutionPM.ToString()))
                return true;

            EbOperation Op = EbWebForm.Operations.Get(ForWhat);
            if (!Op.IsAvailableInWeb)
                return false;

            try
            {
                string Ps = string.Concat(this.RefId.Split("-")[2].PadLeft(2, '0'), '-', this.RefId.Split("-")[3].PadLeft(5, '0'), '-', Op.IntCode.ToString().PadLeft(2, '0'));
                string t = this.UserObj.Permissions.FirstOrDefault(p => p.Substring(p.IndexOf("-") + 1).Equals(Ps + ":" + LocId) ||
                            (p.Substring(p.IndexOf("-") + 1, 11).Equals(Ps) && p.Substring(p.LastIndexOf(":") + 1).Equals("-1")));
                if (!t.IsNullOrEmpty())
                    return true;
            }
            catch (Exception e)
            {
                Console.WriteLine("Exception when checking user permission(EbWebForm -> HasPermission): " + e.Message);
            }

            return false;
        }

        public void AfterRedisGet(Service service)
        {
            EbFormHelper.AfterRedisGet(this, service.Redis, null, service);
            SchemaHelper.GetWebFormSchema(this);
            EbFormHelper.InitDataPushers(this, service.Redis, null, service);
        }

        public override void AfterRedisGet(RedisClient Redis, IServiceClient client)
        {
            EbFormHelper.AfterRedisGet(this, Redis, client, null);
            SchemaHelper.GetWebFormSchema(this);
            EbFormHelper.InitDataPushers(this, Redis, client, null);
        }

        public override List<string> DiscoverRelatedRefids()
        {
            return EbFormHelper.DiscoverRelatedRefids(this);
        }
        public override void ReplaceRefid(Dictionary<string, string> RefidMap)
        {
            EbFormHelper.ReplaceRefid(this, RefidMap);
        }
    }
}
