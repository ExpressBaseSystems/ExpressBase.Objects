using ExpressBase.Common;
using ExpressBase.Common.Data;
using ExpressBase.Common.Enums;
using ExpressBase.Common.Extensions;
using ExpressBase.Common.JsonConverters;
using ExpressBase.Common.LocationNSolution;
using ExpressBase.Common.Objects;
using ExpressBase.Common.Objects.Attributes;
using ExpressBase.Common.Singletons;
using ExpressBase.Common.Structures;
using ExpressBase.Data;
using ExpressBase.Objects.Objects;
using ExpressBase.Objects.ServiceStack_Artifacts;
using ExpressBase.Security;
using Microsoft.CodeAnalysis.CSharp.Scripting;
using Microsoft.CodeAnalysis.Scripting;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using ServiceStack;
using ServiceStack.RabbitMq;
using ServiceStack.Redis;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data.Common;
using System.Globalization;
using System.Linq;
using System.Reflection;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace ExpressBase.Objects
{
    [EnableInBuilder(BuilderType.WebForm)]
    [HideInToolBox]
    [BuilderTypeEnum(BuilderType.WebForm)]
    public class EbWebForm : EbForm
    {
        [HideInPropertyGrid]
        public bool IsUpdate { get; set; }

        public bool IsRenderMode { get; set; }

        public EbWebForm()
        {
            this.DisableDelete = new List<EbSQLValidator>();
            this.DisableCancel = new List<EbSQLValidator>();
            this.BeforeSaveRoutines = new List<EbRoutines>();
            this.AfterSaveRoutines = new List<EbRoutines>();
            this.DataPushers = new List<EbDataPusher>();
        }

        public override int TableRowId { get; set; }

        public WebformData FormData { get; set; }

        public WebformData FormDataBackup { get; set; }

        public WebFormSchema FormSchema { get; set; }

        public User UserObj { get; set; }

        public int LocationId { get; set; }

        public Eb_Solution SolutionObj { get; set; }

        public FormAsGlobal FormGlobals { get; set; }

        public bool IsLocEditable { get; set ; }

        public bool ExeDataPusher { get; set; }

        public EbDataPusherConfig DataPusherConfig { get; set; }

        [PropertyGroup("Events")]
        [EnableInBuilder(BuilderType.WebForm)]
        [PropertyEditor(PropertyEditorType.Collection)]
        public List<EbSQLValidator> DisableDelete { get; set; }

        [PropertyGroup("Behavior")]
        [EnableInBuilder(BuilderType.WebForm)]
        public WebFormAfterSaveModes FormModeAfterSave { get; set; }

        [PropertyGroup("Events")]
        [EnableInBuilder(BuilderType.WebForm)]
        [PropertyEditor(PropertyEditorType.Collection)]
        public List<EbSQLValidator> DisableCancel { get; set; }

        [PropertyGroup("Events")]
        [EnableInBuilder(BuilderType.WebForm)]
        [PropertyEditor(PropertyEditorType.Collection)]
        public List<EbRoutines> BeforeSaveRoutines { get; set; }

        [PropertyGroup("Events")]
        [EnableInBuilder(BuilderType.WebForm)]
        [PropertyEditor(PropertyEditorType.Collection)]
        public List<EbRoutines> AfterSaveRoutines { get; set; }

        [PropertyGroup("Miscellaneous")]
        [EnableInBuilder(BuilderType.WebForm)]
        [PropertyEditor(PropertyEditorType.ObjectSelector)]
        [OSE_ObjectTypes(EbObjectTypes.iReport)]
        public string PrintDoc { get; set; }

        [EnableInBuilder(BuilderType.WebForm)]
        [HideInPropertyGrid]
        public string AutoGeneratedVizRefId { get; set; }

        [Alias("Auto deploy table view")]
        [EnableInBuilder(BuilderType.WebForm)]
        public bool AutoDeployTV { get; set; }

        [PropertyGroup("Data")]
        [EnableInBuilder(BuilderType.WebForm)]
        [PropertyEditor(PropertyEditorType.Collection)]
        public List<EbDataPusher> DataPushers { get; set; }
        
        public static EbOperations Operations = WFOperations.Instance;

        public override string GetHead()
        {
            string head = string.Empty;

            foreach (EbControl c in this.Controls)
                head += c.GetHead();

            return head;
        }

        public override string GetHtml()
        {
            string html = "<form id='@ebsid@' isrendermode='@rmode@' ebsid='@ebsid@' class='formB-box form-buider-form ebcont-ctrl' eb-form='true' ui-inp eb-type='WebForm' @tabindex@>";

            foreach (EbControl c in this.Controls)
                html += c.GetHtml();

            html += "</form>";

            return html
                .Replace("@name@", this.Name)
                .Replace("@ebsid@", this.EbSid)
                .Replace("@rmode@", IsRenderMode.ToString().ToLower())
                .Replace("@tabindex@", IsRenderMode ? string.Empty : " tabindex='1'");
        }

        //Operations to be performed before form object save - table name required, table name repetition, calculate dependency
        public override void BeforeSave(IServiceClient serviceClient, IRedisClient redis)
        {
            Dictionary<string, string> tbls = new Dictionary<string, string>();
            if (string.IsNullOrEmpty(this.TableName))
                throw new FormException("Please enter a valid form table name");
            tbls.Add(this.TableName, "form table");
            EbControl[] Allctrls = this.Controls.FlattenAllEbControls();
            for (int i = 0; i < Allctrls.Length; i++)
            {
                if (Allctrls[i] is EbApproval)
                {
                    string _tn = (Allctrls[i] as EbApproval).TableName;
                    if (string.IsNullOrEmpty(_tn))
                        throw new FormException("Please enter a valid table name for approval control : " + Allctrls[i].Label);
                    if (tbls.ContainsKey(_tn))
                        throw new FormException(string.Format("Same table '{0}' not allowed for {1} and approval control {2}", _tn, tbls[_tn], Allctrls[i].Label));
                    tbls.Add(_tn, "approval control " + Allctrls[i].Label);
                }
                else if (Allctrls[i] is EbDataGrid)
                {
                    EbDataGrid DataGrid = Allctrls[i] as EbDataGrid;
                    string _tn = (DataGrid).TableName;
                    if (string.IsNullOrEmpty((DataGrid).TableName))
                        throw new FormException("Please enter a valid table name for data grid : " + Allctrls[i].Label);
                    if (tbls.ContainsKey(_tn))
                        throw new FormException(string.Format("Same table '{0}' not allowed for {1} and data grid {2}", _tn, tbls[_tn], Allctrls[i].Label));
                    tbls.Add(_tn, "data grid " + Allctrls[i].Label);

                    for (int j = 0; j < (DataGrid).Controls.Count; j++)
                    {
                        if (DataGrid.Controls[j] is EbDGUserControlColumn)
                        {
                            EbDGColumn DGColumn = (DataGrid).Controls[j] as EbDGColumn;

                            (DataGrid.Controls[j] as EbDGUserControlColumn).Columns = new List<EbControl>();

                        }
                    }

                    if (!DataGrid.DataSourceId.IsNullOrEmpty())
                        DataGrid.InitDSRelated(serviceClient, redis, Allctrls);

                }
                else if (Allctrls[i] is EbProvisionUser)
                {
                    CheckEmailConAvailableResponse Resp = serviceClient.Post<CheckEmailConAvailableResponse>(new CheckEmailConAvailableRequest { });
                    if (!Resp.ConnectionAvailable)
                        throw new FormException("Please configure a email connection, it is required for ProvisionUser control.");
                }
            }

            GetSuggestionTableName(this, this.TableName);

            CalcValueExprDependency();
        }

        public void GetSuggestionTableName(EbControlContainer _cont, string _tbl)
        {
            foreach (EbControl ctrl in _cont.Controls)
            {
                try
                {
                    if (ctrl is EbTextBox)
                    {
                        if ((ctrl as EbTextBox).AutoSuggestion)
                            (ctrl as EbTextBox).TableName = _tbl;
                    }
					else if (ctrl is EbDGStringColumn)
					{
						if ((ctrl as EbDGStringColumn).AutoSuggestion)
							(ctrl as EbDGStringColumn).TableName = _tbl;
					}
					else if (ctrl is EbControlContainer)
                    {
                        string t = _tbl;
                        if (!(ctrl as EbControlContainer).TableName.IsNullOrEmpty())
                            t = (ctrl as EbControlContainer).TableName;
                        GetSuggestionTableName(ctrl as EbControlContainer, t);
                    }
					
                }
                catch (Exception e)
                {
                    ;
                }
            }
        }

        public void BeforeSave(Service service)
        {
            Dictionary<string, string> tbls = new Dictionary<string, string>();
            if (string.IsNullOrEmpty(this.TableName))
                throw new FormException("Please enter a valid form table name");
            tbls.Add(this.TableName, "form table");
            EbControl[] Allctrls = this.Controls.FlattenAllEbControls();
            for (int i = 0; i < Allctrls.Length; i++)
            {
                if (Allctrls[i] is EbApproval)
                {
                    string _tn = (Allctrls[i] as EbApproval).TableName;
                    if (string.IsNullOrEmpty(_tn))
                        throw new FormException("Please enter a valid table name for approval control : " + Allctrls[i].Label);
                    if (tbls.ContainsKey(_tn))
                        throw new FormException(string.Format("Same table '{0}' not allowed for {1} and approval control {2}", _tn, tbls[_tn], Allctrls[i].Label));
                    tbls.Add(_tn, "approval control " + Allctrls[i].Label);
                }
                else if (Allctrls[i] is EbDataGrid)
                {
                    string _tn = (Allctrls[i] as EbDataGrid).TableName;
                    if (string.IsNullOrEmpty((Allctrls[i] as EbDataGrid).TableName))
                        throw new FormException("Please enter a valid table name for data grid : " + Allctrls[i].Label);
                    if (tbls.ContainsKey(_tn))
                        throw new FormException(string.Format("Same table '{0}' not allowed for {1} and data grid {2}", _tn, tbls[_tn], Allctrls[i].Label));
                    tbls.Add(_tn, "data grid " + Allctrls[i].Label);

                    for (int j = 0; j < (Allctrls[i] as EbDataGrid).Controls.Count; j++)
                    {
                        if ((Allctrls[i] as EbDataGrid).Controls[j] is EbDGUserControlColumn)
                        {
                            EbDGColumn DGColumn = (Allctrls[i] as EbDataGrid).Controls[j] as EbDGColumn;

                            ((Allctrls[i] as EbDataGrid).Controls[j] as EbDGUserControlColumn).Columns = new List<EbControl>();

                        }
                    }
                }
                //else if(Allctrls[i] is EbProvisionUser)
                //{
                //    if (service is EbBaseService)
                //    {
                //        if ((service as EbBaseService).EbConnectionFactory.EmailConnection.Primary == null)
                //            throw new FormException("Please configure a email connection, it is required for EbProvisionUser control.");
                //    }
                //}
            }

            CalcValueExprDependency();
        }

        //Populate Property DependedValExp
        private void CalcValueExprDependency()
        {
            Dictionary<int, EbControlWrapper> _dict = new Dictionary<int, EbControlWrapper>();
            GetControlsAsDict(this, "form", _dict);
            List<int> CalcFlds = new List<int>();
            List<KeyValuePair<int, int>> dpndcy = new List<KeyValuePair<int, int>>();
            List<int> ExeOrd = new List<int>();

            for (int i = 0; i < _dict.Count; i++)
            {
                if (_dict[i].Control.ValueExpr != null && !string.IsNullOrEmpty(_dict[i].Control.ValueExpr.Code))
                {
                    CalcFlds.Add(i);
                    ExeOrd.Add(i);
                }
            }

            for (int i = 0; i < CalcFlds.Count; i++)
            {
                string code = _dict[CalcFlds[i]].Control.ValueExpr.Code.ToLower();
                if (_dict[CalcFlds[i]].Control.ValueExpr.Lang == ScriptingLanguage.JS)
                {
                    if (code.Contains("form"))
                    {
                        for (int j = 0; j < _dict.Count; j++)
                        {
                            string[] stringArr = new string[] {
                                _dict[j].Path,
                                _dict[j].Root + ".currentrow." + _dict[j].Control.Name,
                                _dict[j].Root + ".currentrow['" + _dict[j].Control.Name + "']",
                                _dict[j].Root + ".currentrow[\"" + _dict[j].Control.Name + "\"]",
                                _dict[j].Root + "." +  _dict[j].Control.Name + "_sum"
                            };
                            if (stringArr.Any(code.Contains))
                            {
                                //if (CalcFlds[i] == j)
                                //    throw new FormException("Avoid circular reference by the following control in 'ValueExpression' : " + _dict[CalcFlds[i]].Control.Name);
                                if (CalcFlds[i] != j)//if a control refers itself treated as not circular reference
                                    dpndcy.Add(new KeyValuePair<int, int>(CalcFlds[i], j));//<dependent, dominant>
                            }
                        }
                    }
                }
                else if (_dict[CalcFlds[i]].Control.ValueExpr.Lang == ScriptingLanguage.SQL)
                {
                    if (code.Contains(":"))
                    {
                        for (int j = 0; j < _dict.Count; j++)
                        {
                            if (code.Contains(":" + _dict[j].Control.Name))
                            {
                                if (CalcFlds[i] != j)
                                    dpndcy.Add(new KeyValuePair<int, int>(CalcFlds[i], j));//<dependent, dominant>
                            }
                        }
                    }
                }
            }

            int stopCounter = 0;
            while (dpndcy.Count > 0 && stopCounter < CalcFlds.Count)
            {
                for (int i = 0; i < CalcFlds.Count; i++)
                {
                    if (dpndcy.FindIndex(x => x.Value == CalcFlds[i]) == -1)
                    {
                        bool isProcessed = false;
                        foreach (KeyValuePair<int, int> item in dpndcy.Where(e => e.Key == CalcFlds[i]))
                        {
                            _dict[item.Value].Control.DependedValExp.Remove(_dict[item.Key].Path);
                            _dict[item.Value].Control.DependedValExp.Insert(0, _dict[item.Key].Path);
                            ExeOrd.Remove(item.Value);
                            ExeOrd.Insert(0, item.Value);
                            isProcessed = true;
                        }
                        if (isProcessed)
                            dpndcy.RemoveAll(x => x.Key == CalcFlds[i]);
                    }
                }
                stopCounter++;
            }
            if (dpndcy.Count > 0)
            {
                throw new FormException("Avoid circular reference by the following controls in 'ValueExpression' : " + string.Join(',', dpndcy.Select(e => _dict[e.Key].Control.Name).Distinct()));
            }
            else
            {
                FillDependedCtrlRec(_dict, ExeOrd);
            }
        }

        //To populate multilevel DependedValExp property
        private void FillDependedCtrlRec(Dictionary<int, EbControlWrapper> _dict, List<int> ExeOrd)
        {
            for (int i = ExeOrd.Count - 1; i >= 0; i--)
            {
                List<string> extList = new List<string>();
                foreach (string item in _dict[ExeOrd[i]].Control.DependedValExp)
                {
                    EbControlWrapper ctrlWrap = _dict.Values.FirstOrDefault(e => e.Path.Equals(item));
                    foreach (var path in ctrlWrap.Control.DependedValExp)
                    {
                        if (!_dict[ExeOrd[i]].Control.DependedValExp.Contains(path) && !extList.Contains(path))
                            extList.Add(path);
                    }
                }
                _dict[ExeOrd[i]].Control.DependedValExp.AddRange(extList);
            }
        }

        private string GetSelectQuery(IDatabase DataDB, WebFormSchema _schema, Service _service, out string _queryPs, out int _qryCount)
        {
            string query = string.Empty;
            string extquery = string.Empty;
            _queryPs = string.Empty;
            _qryCount = 0;
            if (_schema == null)
                _schema = this.FormSchema;//this.GetWebFormSchema();
            foreach (TableSchema _table in _schema.Tables)
            {
                string _cols = "id, eb_loc_id";
                string _id = "id";

                if (_table.Columns.Count > 0)
                {
                    if (_table.TableType == WebFormTableTypes.Grid)
                        _cols = "id, eb_loc_id, eb_row_num, " + String.Join(", ", _table.Columns.Select(x => x.ColumnName));
                    else
                        _cols = "id, eb_loc_id, " + String.Join(", ", _table.Columns.Select(x => x.ColumnName));
                }
                if (_table.TableName != _schema.MasterTable)
                    _id = _schema.MasterTable + "_id";

                if (this.DataPusherConfig == null)
                {
                    query += string.Format("SELECT {0} FROM {1} WHERE {2} = :{3}_id AND (eb_del='F' OR eb_del IS null) {4};",
                        _cols, _table.TableName, _id, _schema.MasterTable, _table.TableType == WebFormTableTypes.Grid ? "ORDER BY eb_row_num" : "ORDER BY id");
                }
                else
                {
                    if (_table.TableName == _schema.MasterTable)
                        query += string.Format("SELECT {0} FROM {1} WHERE {2}_id = :{2}_id AND eb_push_id = '{3}' AND (eb_del='F' OR eb_del IS null);",
                            _cols, _table.TableName, this.DataPusherConfig.SourceTable, this.DataPusherConfig.MultiPushId);
                    else 
                        query += string.Format("SELECT {0} FROM {1} WHERE {2}_id = (SELECT id FROM {2} WHERE {3}_id = :{3}_id AND eb_push_id = '{4}' AND (eb_del='F' OR eb_del IS null) LIMIT 1) AND (eb_del='F' OR eb_del IS null) {5}",
                            _cols, _table.TableName, _schema.MasterTable, this.DataPusherConfig.SourceTable, this.DataPusherConfig.MultiPushId, _table.TableType == WebFormTableTypes.Grid ? "ORDER BY eb_row_num" : "ORDER BY id");
                }
                _qryCount++;
                foreach (ColumnSchema Col in _table.Columns)
                {
                    if (Col.Control is EbPowerSelect)
                        _queryPs += (Col.Control as EbPowerSelect).GetSelectQuery(DataDB, _service, Col.ColumnName, _table.TableName, _id, _schema.MasterTable);
                    else if (Col.Control is EbDGPowerSelectColumn)
                        _queryPs += (Col.Control as EbDGPowerSelectColumn).GetSelectQuery(DataDB, _service, Col.ColumnName, _table.TableName, _id, _schema.MasterTable);
                }
            }
            bool MuCtrlFound = false;
            foreach (Object Ctrl in _schema.ExtendedControls)
            {
                if (Ctrl is EbProvisionUser && !MuCtrlFound)
                {
                    extquery += (Ctrl as EbProvisionUser).GetSelectQuery(_schema.MasterTable);
                    MuCtrlFound = true;
                    _qryCount++;
                }
                else if (Ctrl is EbProvisionLocation)
                {
                    extquery += (Ctrl as EbProvisionLocation).GetSelectQuery(_schema.MasterTable);
                    _qryCount++;
                }
            }
            return query + extquery;
        }

        public string GetDeleteQuery(IDatabase DataDB, WebFormSchema _schema = null)
        {
            string query = string.Empty;
            if (_schema == null)
                _schema = this.FormSchema;//this.GetWebFormSchema();
            foreach (TableSchema _table in _schema.Tables)
            {
                string _id = "id";
                string _dupcols = string.Empty;
                if (_table.TableName != _schema.MasterTable)
                    _id = _schema.MasterTable + "_id";
                foreach (ColumnSchema _column in _table.Columns)
                {
                    if (_column.Control is EbAutoId)
                    {
                        _dupcols += string.Format(", {0}_ebbkup = {0}, {0} = CONCAT({0}, '_ebbkup')", _column.ColumnName);
                    }
                }
                query += string.Format("UPDATE {0} SET eb_del='T',eb_lastmodified_by = :eb_lastmodified_by, eb_lastmodified_at = " + DataDB.EB_CURRENT_TIMESTAMP + " {1} WHERE {2} = :id AND (eb_del='F' OR eb_del IS null);", _table.TableName, _dupcols, _id);
            }
            return query;
        }

        public string GetCancelQuery(IDatabase DataDB, WebFormSchema _schema = null)
        {
            string query = string.Empty;
            if (_schema == null)
                _schema = this.FormSchema;//this.GetWebFormSchema();
            foreach (TableSchema _table in _schema.Tables)
            {
                string _id = "id";
                if (_table.TableName != _schema.MasterTable)
                    _id = _schema.MasterTable + "_id";
                query += string.Format("UPDATE {0} SET eb_void='T',eb_lastmodified_by = :eb_lastmodified_by, eb_lastmodified_at = " + DataDB.EB_CURRENT_TIMESTAMP + " WHERE {1} = :id AND (eb_void='F' OR eb_void IS null) AND (eb_del='F' OR eb_del IS null);", _table.TableName, _id);
            }
            return query;
        }

        private string GetInsertQuery(IDatabase DataDB, string tblName, bool isIns)
        {
            string _qry;
            if (this.DataPusherConfig == null)
            {
                if (tblName.Equals(this.TableName))
                {
                    _qry = string.Format("INSERT INTO {0} ({2} eb_created_by, eb_created_at, eb_loc_id, eb_ver_id) VALUES ({3} :eb_createdby, {1}, :eb_loc_id, :{0}_eb_ver_id); ", tblName, DataDB.EB_CURRENT_TIMESTAMP, "{0}", "{1}");//eb_ver_id included
                    //_qry = string.Format("INSERT INTO {0} ({2} eb_created_by, eb_created_at, eb_loc_id) VALUES ({3} :eb_createdby, {1}, :eb_loc_id); ", tblName, DataDB.EB_CURRENT_TIMESTAMP, "{0}", "{1}");
                    if (DataDB.Vendor == DatabaseVendors.MYSQL)
                        _qry += string.Format("SELECT eb_persist_currval('{0}_id_seq');", tblName);
                    if (this.IsLocEditable)
                        _qry = _qry.Replace(", eb_loc_id", string.Empty).Replace(", :eb_loc_id", string.Empty);
                }
                else if (isIns)
                    _qry = string.Format("INSERT INTO {0} ({3} eb_created_by, eb_created_at, eb_loc_id, {2}_id) VALUES ({4} :eb_createdby, {1}, :eb_loc_id , (SELECT eb_currval('{2}_id_seq')));", tblName, DataDB.EB_CURRENT_TIMESTAMP, this.TableName, "{0}", "{1}");
                else
                    _qry = string.Format("INSERT INTO {0} ({3} eb_created_by, eb_created_at, eb_loc_id, {2}_id) VALUES ({4} :eb_createdby, {1}, :eb_loc_id , :{2}_id);", tblName, DataDB.EB_CURRENT_TIMESTAMP, this.TableName, "{0}", "{1}");
            }
            else
            {
                if (tblName.Equals(this.TableName))
                {
                    if(this.DataPusherConfig.SourceRecId <= 0)
                        _qry = string.Format("INSERT INTO {0} ({4} eb_created_by, eb_created_at, eb_loc_id, eb_ver_id, {2}_id, eb_push_id, eb_lock) VALUES ({5} :eb_createdby, {1}, :eb_loc_id, :{0}_eb_ver_id, (SELECT eb_currval('{2}_id_seq')), '{3}', 'T'); ", tblName, DataDB.EB_CURRENT_TIMESTAMP, this.DataPusherConfig.SourceTable, this.DataPusherConfig.MultiPushId, "{0}", "{1}");
                    else
                        _qry = string.Format("INSERT INTO {0} ({4} eb_created_by, eb_created_at, eb_loc_id, eb_ver_id, {2}_id, eb_push_id, eb_lock) VALUES ({5} :eb_createdby, {1}, :eb_loc_id, :{0}_eb_ver_id, :{2}_id, '{3}', 'T'); ", tblName, DataDB.EB_CURRENT_TIMESTAMP, this.DataPusherConfig.SourceTable, this.DataPusherConfig.MultiPushId, "{0}", "{1}");
                    if (DataDB.Vendor == DatabaseVendors.MYSQL)
                        _qry += string.Format("SELECT eb_persist_currval('{0}_id_seq');", tblName);
                    if (this.IsLocEditable)
                        _qry = _qry.Replace(", eb_loc_id", string.Empty).Replace(", :eb_loc_id", string.Empty);
                }
                else if(isIns)
                    _qry = string.Format("INSERT INTO {0} ({3} eb_created_by, eb_created_at, eb_loc_id, {2}_id) VALUES ({4} :eb_createdby, {1}, :eb_loc_id , (SELECT eb_currval('{2}_id_seq')));", tblName, DataDB.EB_CURRENT_TIMESTAMP, this.TableName, "{0}", "{1}");
                else
                    _qry = string.Format("INSERT INTO {0} ({3} eb_created_by, eb_created_at, eb_loc_id, {2}_id) VALUES ({4} :eb_createdby, {1}, :eb_loc_id , :{2}_id);", tblName, DataDB.EB_CURRENT_TIMESTAMP, this.TableName, "{0}", "{1}");
            }
            return _qry;
        }

        private string GetUpdateQuery(IDatabase DataDB, string tblName, bool isDel)
        {
            string _qry;
            if (this.DataPusherConfig == null)
            {
                if (tblName.Equals(this.TableName))
                    _qry = string.Format("UPDATE {0} SET {2} eb_lastmodified_by = :eb_modified_by, eb_lastmodified_at = {1} WHERE id = {3} AND (eb_del='F' OR eb_del IS null);", tblName, DataDB.EB_CURRENT_TIMESTAMP, "{0}", "{1}");
                else
                    _qry = string.Format("UPDATE {0} SET {3} eb_lastmodified_by = :eb_modified_by, eb_lastmodified_at = {1} WHERE id = {4} AND {2}_id = :{2}_id AND (eb_del='F' OR eb_del IS null);", tblName, DataDB.EB_CURRENT_TIMESTAMP, this.TableName, isDel ? "eb_del = 'T', " : "{0}", "{1}");
            }
            else
            {
                _qry = string.Format("UPDATE {0} SET {4} eb_lastmodified_by = :eb_modified_by, eb_lastmodified_at = {1} WHERE id = {5} AND {2}_id = :{2}_id AND (eb_del='F' OR eb_del IS null) {3};", 
                    tblName, DataDB.EB_CURRENT_TIMESTAMP, tblName.Equals(this.TableName)? this.DataPusherConfig.SourceTable : this.TableName, tblName.Equals(this.TableName) ? "AND eb_push_id = '" + this.DataPusherConfig.MultiPushId + "'" : string.Empty, isDel ? "eb_del = 'T', " : "{0}", "{1}");
            }
            return _qry;
        }

        public FormAsGlobal GetFormAsFlatGlobal(WebformData _formdata)
        {
            Dictionary<string, string> grid = new Dictionary<string, string>();
            EbControl[] Allctrls = this.Controls.FlattenAllEbControls();
            for (int i = 0; i < Allctrls.Length; i++)
            {
                if (Allctrls[i] is EbDataGrid)
                {
                    grid.Add((Allctrls[i] as EbDataGrid).TableName, (Allctrls[i] as EbDataGrid).Name);
                }
            }

            FormAsGlobal _globals = new FormAsGlobal { Name = this.Name };
            ListNTV listNTV = new ListNTV();
            try
            {
                foreach (KeyValuePair<string, SingleTable> item in _formdata.MultipleTables)
                {
                    if (grid.ContainsKey(item.Key))
                    {
                        FormAsGlobal _grid = new FormAsGlobal { Name = grid[item.Key] };
                        for (int j = 0; j < item.Value.Count; j++)
                        {
                            ListNTV _gridline = new ListNTV();
                            foreach (SingleColumn col in item.Value[j].Columns)
                            {
                                if (col.Name != "id" && col.Name != "eb_row_num")
                                {
                                    NTV n = GetNtvFromFormData(_formdata, item.Key, j, col.Name);
                                    if (n != null)
                                        _gridline.Columns.Add(n);
                                }
                            }
                            _grid.Add(_gridline);
                        }
                        _globals.AddContainer(_grid);
                    }
                    else
                    {
                        foreach (SingleColumn col in item.Value[0].Columns)
                        {
                            if (!(col.Name == "id" && item.Key != _formdata.MasterTable) && item.Value.Count == 1)
                            {
                                NTV n = GetNtvFromFormData(_formdata, item.Key, 0, col.Name);
                                if (n != null)
                                    listNTV.Columns.Add(n);
                            }
                        }
                    }                    
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Exception in GetFormAsFlatGlobal. Message : " + ex.Message);
                Console.WriteLine(ex.StackTrace);
            }

            _globals.Add(listNTV);
            return _globals;
        }

        //get formdata as globals for c# script engine
        public FormAsGlobal GetFormAsGlobal(WebformData _formData, EbControlContainer _container = null, FormAsGlobal _globals = null)
        {
            if (_container == null)
                _container = this;
            if (_globals == null)
                _globals = new FormAsGlobal { Name = this.Name };

            ListNTV listNTV = new ListNTV();

            if (_formData.MultipleTables.ContainsKey(_container.TableName))
            {
                for (int i = 0; i < _formData.MultipleTables[_container.TableName].Count; i++)
                {
                    foreach (EbControl control in _container.Controls)
                    {
                        if (control is EbControlContainer)
                        {
                            FormAsGlobal g = new FormAsGlobal();
                            g.Name = (control as EbControlContainer).Name;
                            _globals.AddContainer(g);
                            g = GetFormAsGlobal(_formData, control as EbControlContainer, g);
                        }
                        else
                        {
                            NTV n = GetNtvFromFormData(_formData, _container.TableName, i, control.Name);
                            if (n != null)
                                listNTV.Columns.Add(n);
                        }
                    }
                }
                _globals.Add(listNTV);
            }
            return _globals;
        }

        private NTV GetNtvFromFormData(WebformData _formData, string _table, int _row, string _column)
        {
            NTV ntv = null;
            if (_formData.MultipleTables.ContainsKey(_table))
            {
                foreach (SingleColumn col in _formData.MultipleTables[_table][_row].Columns)
                {
                    if (col.Name.Equals(_column))
                    {
                        ntv = new NTV()
                        {
                            Name = _column,
                            Type = (EbDbTypes)col.Type,
                            Value = col.Value
                        };
                        break;
                    }
                }
            }
            return ntv;
        }

        //get controls in webform as a single dimensional structure 
        public static void GetControlsAsDict(EbControlContainer _container, string _path, Dictionary<int, EbControlWrapper> _dict)
        {
            int _counter = _dict.Count;
            IEnumerable<EbControl> FlatCtrls = _container.Controls.Get1stLvlControls();
            foreach (EbControl control in FlatCtrls)
            {
                control.DependedValExp.Clear();
                string path = _path == "" ? control.Name : _path + "." + control.Name;
                control.__path = path;
                _dict.Add(_counter++, new EbControlWrapper
                {
                    TableName = _container.TableName,
                    Path = path,
                    Control = control,
                    Root = _path
                });
            }
            foreach (EbControl control in _container.Controls)
            {
                if (control is EbControlContainer)
                {
                    string path = _path;
                    if (control is EbDataGrid)
                        path = _path + "." + (control as EbControlContainer).Name;
                    GetControlsAsDict(control as EbControlContainer, path, _dict);
                }
            }
        }

        //get all control container as flat structure
        public List<EbControlContainer> GetAllContainers(EbControlContainer _container, List<EbControlContainer> _list = null)
        {
            if (_list == null)
                _list = new List<EbControlContainer>();
            _list.Add(_container);
            foreach (EbControl c in this.Controls)
            {
                if (c is EbControlContainer)
                {
                    _list = GetAllContainers(_container, _list);
                }
            }
            return _list;
        }

        public void ImportData(IDatabase DataDB, Service Service, List<Param> Param, string Trigger)
        {
            EbControl[] Allctrls = this.Controls.FlattenAllEbControls();
            EbControl TriggerCtrl = null;
            List<EbDataGrid> DGs = new List<EbDataGrid>();
            for (int i = 0; i < Allctrls.Length; i++)
            {
                if (Allctrls[i].Name.Equals(Trigger))
                {
                    TriggerCtrl = Allctrls[i];
                }
                if (Allctrls[i] is EbDataGrid)
                {
                    DGs.Add(Allctrls[i] as EbDataGrid);
                }
            }
            if (TriggerCtrl == null)
                return;

            this.FormData = new WebformData();

            if (TriggerCtrl.DependedDG != null && TriggerCtrl.DependedDG.Count > 0)
            {
                foreach (string dgName in TriggerCtrl.DependedDG)
                {
                    EbDataGrid _dg = DGs.Find(e => e.Name == dgName);
                    if (_dg == null)
                        break;
                    TableSchema _sc = this.FormSchema.Tables.Find(tbl => tbl.TableName == _dg.TableName);
                    if (_sc == null)
                        break;

                    EbDataReader dataReader = Service.Redis.Get<EbDataReader>(_dg.DataSourceId);
                    if (dataReader == null)
                    {
                        EbObjectParticularVersionResponse result = Service.Gateway.Send<EbObjectParticularVersionResponse>(new EbObjectParticularVersionRequest { RefId = _dg.DataSourceId });
                        dataReader = EbSerializers.Json_Deserialize(result.Data[0].Json);
                        Service.Redis.Set<EbDataReader>(_dg.DataSourceId, dataReader);
                    }
                    foreach (Param item in dataReader.InputParams)
                    {
                        foreach (Param _p in Param)
                        {
                            if (item.Name == _p.Name)
                                _p.Type = item.Type;
                        }
                    }
                    DataSourceDataSetResponse response = Service.Gateway.Send<DataSourceDataSetResponse>(new DataSourceDataSetRequest { RefId = _dg.DataSourceId, Params = Param });

                    SingleTable Table = new SingleTable();
                    Dictionary<EbDGPowerSelectColumn, string> psDict = new Dictionary<EbDGPowerSelectColumn, string>();

                    foreach (EbDataRow _row in response.DataSet.Tables[0].Rows)
                    {
                        SingleRow Row = new SingleRow();
                        foreach (ColumnSchema _column in _sc.Columns)
                        {
                            EbDataColumn dc = response.DataSet.Tables[0].Rows.Table.Columns[_column.ColumnName];
                            if (dc != null && !_row.IsDBNull(dc.ColumnIndex))
                            {
                                object _unformattedData = _row[dc.ColumnIndex];
                                object _formattedData = _unformattedData;
                                if (_column.Control is EbDGDateColumn)
                                {
                                    EbDateType _type = (_column.Control as EbDGDateColumn).EbDateType;
                                    DateTime dt = Convert.ToDateTime(_unformattedData);
                                    if (_type == EbDateType.Date)
                                    {
                                        DateShowFormat _showtype = (_column.Control as EbDGDateColumn).EbDate.ShowDateAs_;
                                        if (_showtype == DateShowFormat.Year_Month)
                                            _formattedData = dt.ToString("MM/yyyy", CultureInfo.InvariantCulture);
                                        else
                                            _formattedData = dt.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture);
                                    }
                                    else if (_type == EbDateType.DateTime)
                                    {
                                        _formattedData = dt.ConvertFromUtc(this.UserObj.Preference.TimeZone).ToString("yyyy-MM-dd HH:mm:ss", CultureInfo.InvariantCulture);
                                    }
                                    else
                                    {
                                        _formattedData = dt.ConvertFromUtc(this.UserObj.Preference.TimeZone).ToString("HH:mm:ss", CultureInfo.InvariantCulture);
                                    }
                                }
                                else if(_column.Control is EbDGPowerSelectColumn)
                                {
                                    if (!_formattedData.ToString().IsNullOrEmpty())
                                    {
                                        if (!psDict.ContainsKey(_column.Control as EbDGPowerSelectColumn))
                                        {
                                            psDict.Add(_column.Control as EbDGPowerSelectColumn, _formattedData.ToString());
                                        }
                                        else
                                        {
                                            psDict[_column.Control as EbDGPowerSelectColumn] += "," + _formattedData.ToString();
                                        }
                                    }
                                  
                                }

                                Row.Columns.Add(new SingleColumn()
                                {
                                    Name = _column.ColumnName,
                                    Type = (int)_column.EbDbType,
                                    Value = _formattedData
                                });
                            }
                            else
                            {
                                Row.Columns.Add(new SingleColumn()
                                {
                                    Name = _column.ColumnName,
                                    Type = (int)_column.EbDbType,
                                    Value = null
                                });
                            }
                        }
                        Table.Add(Row);
                    }
                    this.FormData.MultipleTables.Add(_dg.TableName, Table);

                    Dictionary<string, string> QrsDict = new Dictionary<string, string>();
                    foreach (KeyValuePair<EbDGPowerSelectColumn, string> psItem in psDict)
                    {
                        string t = psItem.Key.GetSelectQuery(DataDB, Service, psItem.Value);
                        QrsDict.Add(psItem.Key.EbSid, t);
                    }
                    if (QrsDict.Count > 0)
                    {
                        EbDataSet dataset = DataDB.DoQueries(string.Join(" ", QrsDict.Select(d => d.Value)));
                        int i = 0;
                        foreach (KeyValuePair<string, string> item in QrsDict)
                        {
                            SingleTable Tbl = new SingleTable();
                            GetFormattedData(dataset.Tables[i++], Tbl, null, true);
                            this.FormData.ExtendedTables.Add(item.Key, Tbl);
                        }
                    }
                }
            }

            else if (TriggerCtrl is EbPowerSelect && !(TriggerCtrl as EbPowerSelect).DataImportId.IsNullOrEmpty())
            {
                Param[0].Type = ((int)EbDbTypes.Int32).ToString();
                EbWebForm _form = Service.Redis.Get<EbWebForm>((TriggerCtrl as EbPowerSelect).DataImportId);
                if (_form == null)
                {
                    EbObjectParticularVersionResponse result = Service.Gateway.Send<EbObjectParticularVersionResponse>(new EbObjectParticularVersionRequest { RefId = (TriggerCtrl as EbPowerSelect).DataImportId });
                    _form = EbSerializers.Json_Deserialize(result.Data[0].Json);
                    Service.Redis.Set<EbWebForm>((TriggerCtrl as EbPowerSelect).DataImportId, _form);
                }
                _form.AfterRedisGet(Service);
                _form.RefId = (TriggerCtrl as EbPowerSelect).DataImportId;
                _form.UserObj = this.UserObj;
                _form.SolutionObj = this.SolutionObj;
                _form.TableRowId = Param[0].ValueTo;              
                _form.GetImportData(DataDB, Service, this.Name);
                this.FormData = _form.FormData;
            }
        }

        public void GetImportData(IDatabase DataDB, Service Service, string Destination)
        {
            this.RefreshFormData(DataDB, Service);

            foreach (TableSchema _table in this.FormSchema.Tables)
            {
                if (this.FormData.MultipleTables.ContainsKey(_table.TableName))
                {
                    SingleTable Table = this.FormData.MultipleTables[_table.TableName];
                    this.FormData.MultipleTables.Remove(_table.TableName);
                    if (_table.TableName == this.FormSchema.MasterTable)
                    {
                        this.FormData.MultipleTables.Add(Destination, Table);
                        this.FormData.MasterTable = Destination;
                    }
                    else
                    {
                        if (_table.TableType == WebFormTableTypes.Normal)
                        {
                            Table[0].Columns.RemoveAll(e => e.Name == "id");
                            this.FormData.MultipleTables[this.FormData.MasterTable][0].Columns.AddRange(Table[0].Columns);
                        }
                        else
                        {
                            this.FormData.MultipleTables.Add(_table.ContainerName, Table);
                        }
                    }
                }
            }
        }

        public string ExecuteSqlValueExpression(IDatabase DataDB, Service Service, List<Param> Param, string Trigger)
        {
            EbControl[] Allctrls = this.Controls.FlattenAllEbControls();
            EbControl TriggerCtrl = null;
            string val = string.Empty;
            for (int i = 0; i < Allctrls.Length; i++)
            {
                if (Allctrls[i].Name.Equals(Trigger))
                {
                    TriggerCtrl = Allctrls[i];
                    break;
                }
            }
            if (TriggerCtrl != null && TriggerCtrl.ValueExpr != null && TriggerCtrl.ValueExpr.Lang == ScriptingLanguage.SQL && !TriggerCtrl.ValueExpr.Code.IsNullOrEmpty())
            {
                DbParameter[] parameters = new DbParameter[Param.Count];
                for (int i = 0; i < Param.Count; i++)
                {
                    parameters[i] = DataDB.GetNewParameter(Param[i].Name, (EbDbTypes) Convert.ToInt32(Param[i].Type), Param[i].ValueTo);
                }
                EbDataTable table = DataDB.DoQuery(TriggerCtrl.ValueExpr.Code, parameters);
                if (table.Rows.Count > 0)
                    val = table.Rows[0][0].ToString();
            }
            return val;
        }

        //merge formdata and webform object
        public void MergeFormData()
        {
            MergeFormDataInner(this);
        }

        private void MergeFormDataInner(EbControlContainer _container)
        {
            if (!FormData.MultipleTables.ContainsKey(_container.TableName))
            {
                return;
            }
            foreach (EbControl c in _container.Controls)
            {
                if (c is EbDataGrid)
                {
                    foreach (EbControl control in (c as EbDataGrid).Controls)
                    {
                        if (!control.DoNotPersist)
                        {
                            List<object> val = new List<object>();
                            for (int i = 0; i < FormData.MultipleTables[(c as EbDataGrid).TableName].Count; i++)
                            {
                                if (FormData.MultipleTables[(c as EbDataGrid).TableName][i][control.Name] != null)
                                {
                                    val.Add(FormData.MultipleTables[(c as EbDataGrid).TableName][i][control.Name]);
                                    FormData.MultipleTables[(c as EbDataGrid).TableName][i].SetEbDbType(control.Name, control.EbDbType);
                                    FormData.MultipleTables[(c as EbDataGrid).TableName][i].SetControl(control.Name, control);
                                }
                            }
                            control.ValueFE = val;
                        }
                    }
                }
                else if (c is EbApproval)
                {
                    if (!c.DoNotPersist)
                    {
                        EbApproval ebApproval = (c as EbApproval);
                        if (FormData.MultipleTables.ContainsKey(ebApproval.TableName))
                        {
                            string lastStage = (ebApproval.FormStages[ebApproval.FormStages.Count - 1] as EbFormStage).Name;
                            string stage = Convert.ToString(FormData.MultipleTables[ebApproval.TableName][0]["stage"]);
                            int status = Convert.ToInt32(FormData.MultipleTables[ebApproval.TableName][0]["status"]);
                            if (lastStage.Equals(stage) && status == 1)
                            {
                                this.AfterSaveRoutines.AddRange(ebApproval.OnApprovalRoutines);
                            }
                        }
                    }
                }
                else if (c is EbControlContainer)
                {
                    if (string.IsNullOrEmpty((c as EbControlContainer).TableName))
                        (c as EbControlContainer).TableName = _container.TableName;
                    MergeFormDataInner(c as EbControlContainer);
                }
                else if (c is EbAutoId)
                {
                    Dictionary<string, string> dict = new Dictionary<string, string>();
                    dict.Add("{currentlocation.id}", this.LocationId.ToString());
                    dict.Add("{user.id}", this.UserObj.UserId.ToString());
                    dict.Add("{currentlocation.shortname}", this.SolutionObj.Locations[this.LocationId].ShortName);

                    MatchCollection mc = Regex.Matches((c as EbAutoId).Pattern.sPattern, @"{(.*?)}");
                    foreach (Match m in mc)
                    {
                        if (dict.ContainsKey(m.Value))
                            (c as EbAutoId).Pattern.sPattern = (c as EbAutoId).Pattern.sPattern.Replace(m.Value, dict[m.Value]);
                    }
                    FormData.MultipleTables[_container.TableName][0].SetEbDbType(c.Name, c.EbDbType);
                    FormData.MultipleTables[_container.TableName][0].SetControl(c.Name, c);
                    FormData.MultipleTables[_container.TableName][0][c.Name] = (c as EbAutoId).Pattern.sPattern;
                    c.ValueFE = FormData.MultipleTables[_container.TableName][0][c.Name];
                }
                else if (!(c is EbFileUploader))
                {
                    if (!c.DoNotPersist)
                    {
                        if (FormData.MultipleTables[_container.TableName][0].GetColumn(c.Name) != null)
                        {
                            c.ValueFE = FormData.MultipleTables[_container.TableName][0][c.Name];
                            FormData.MultipleTables[_container.TableName][0].SetEbDbType(c.Name, c.EbDbType);
                            FormData.MultipleTables[_container.TableName][0].SetControl(c.Name, c);
                        }
                    }
                }
            }
        }

        private void GetFormattedDataApproval(EbDataTable dataTable, SingleTable Table)
        {
            foreach (EbDataRow dataRow in dataTable.Rows)
            {
                DateTime dt = Convert.ToDateTime(dataRow["eb_created_at"]);
                Table.Add(new SingleRow
                {
                    Columns = new List<SingleColumn>
                {
                    new SingleColumn { Name = "id", Type = (int)EbDbTypes.Decimal, Value = Convert.ToInt32(dataRow["id"])},
                    new SingleColumn { Name = "stage", Type = (int)EbDbTypes.String, Value = dataRow["stage"].ToString()},
                    new SingleColumn { Name = "approver_role", Type = (int)EbDbTypes.String, Value = dataRow["approver_role"].ToString()},
                    new SingleColumn { Name = "status", Type = (int)EbDbTypes.Decimal, Value = Convert.ToInt32(dataRow["status"])},
                    new SingleColumn { Name = "remarks", Type = (int)EbDbTypes.String, Value = dataRow["remarks"].ToString()},
                    new SingleColumn { Name = "eb_created_by_id", Type = (int)EbDbTypes.Decimal, Value = Convert.ToInt32(dataRow["eb_created_by"])},
                    new SingleColumn { Name = "eb_created_by_name", Type = (int)EbDbTypes.String, Value = this.SolutionObj.Users[Convert.ToInt32(dataRow["eb_created_by"])]},
                    new SingleColumn { Name = "eb_created_at", Type = (int)EbDbTypes.String, Value = dt.ConvertFromUtc(this.UserObj.TimeZone).ToString("dd-MM-yyyy hh:mm tt")}
                },
                    RowId = dataRow["id"].ToString(),
                    LocId = Convert.ToInt32(dataRow["eb_loc_id"])
                });
            }
        }

        public void GetFormattedData(EbDataTable dataTable, SingleTable Table, TableSchema _table = null, bool _skipIds = false)
        {
            foreach (EbDataRow dataRow in dataTable.Rows)
            {
                bool skipFst = false;
                string _rowId = "0";
                if (!_skipIds)
                {
                    _rowId = dataRow[dataTable.Columns[0].ColumnIndex].ToString();
                    bool _rowFound = false;
                    foreach (SingleRow r in Table)
                    {
                        if (r.RowId.Equals(_rowId))
                        {
                            _rowFound = true;
                            break;
                        }
                    }
                    if (_rowFound)// skipping duplicate rows in dataTable
                        continue;

                    skipFst = true;
                }
                SingleRow Row = new SingleRow();
                foreach (EbDataColumn dataColumn in dataTable.Columns)
                {
                    if (dataColumn.ColumnName == "eb_loc_id" && skipFst)
                    {
                        Row.LocId = Convert.ToInt32(dataRow[dataColumn.ColumnIndex]);
                        skipFst = false;
                    }
                    else if (dataRow.IsDBNull(dataColumn.ColumnIndex))
                    {
                        Row.Columns.Add(new SingleColumn()
                        {
                            Name = dataColumn.ColumnName,
                            Type = (int)dataColumn.Type,
                            Value = null
                        });
                    }
                    else
                    {
                        object _unformattedData = dataRow[dataColumn.ColumnIndex];
                        object _formattedData = _unformattedData;

                        if (_table != null)
                        {
                            ColumnSchema _column = _table.Columns.Find(c => c.ColumnName.Equals(dataColumn.ColumnName));
                            if (_column != null)
                            {
                                if (_column.Control is EbDate || _column.Control is EbDGDateColumn || _column.Control is EbSysCreatedAt || _column.Control is EbSysModifiedAt)
                                {
                                    EbDateType _type = _column.Control is EbDate ? (_column.Control as EbDate).EbDateType :
                                        _column.Control is EbDGDateColumn ? (_column.Control as EbDGDateColumn).EbDateType :
                                        _column.Control is EbSysCreatedAt ? (_column.Control as EbSysCreatedAt).EbDateType : (_column.Control as EbSysModifiedAt).EbDateType;
                                    DateTime dt = Convert.ToDateTime(_unformattedData);
                                    if (_type == EbDateType.Date)
                                    {
                                        if (_column.Control is EbSysCreatedAt || _column.Control is EbSysModifiedAt)
                                            _formattedData = dt.ConvertFromUtc(this.UserObj.Preference.TimeZone).ToString("yyyy-MM-dd", CultureInfo.InvariantCulture);
                                        else
                                        {
                                            DateShowFormat _showtype = _column.Control is EbDate ? (_column.Control as EbDate).ShowDateAs_ : (_column.Control as EbDGDateColumn).EbDate.ShowDateAs_;
                                            if (_showtype == DateShowFormat.Year_Month)
                                                _formattedData = dt.ToString("MM/yyyy", CultureInfo.InvariantCulture);
                                            else
                                                _formattedData = dt.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture);
                                        }
                                    }
                                    else if (_type == EbDateType.DateTime)
                                    {
                                        _formattedData = dt.ConvertFromUtc(this.UserObj.Preference.TimeZone).ToString("yyyy-MM-dd HH:mm:ss", CultureInfo.InvariantCulture);
                                    }
                                    else
                                    {
                                        _formattedData = dt.ConvertFromUtc(this.UserObj.Preference.TimeZone).ToString("HH:mm:ss", CultureInfo.InvariantCulture);
                                    }
                                }
                                else if (_column.Control is EbSysLocation && (_column.Control as EbControl).IsDisable)
                                {
                                    int loc_id = Convert.ToInt32(_unformattedData);
                                    EbSysLocDM dm = (_column.Control as EbSysLocation).DisplayMember;
                                    if (this.SolutionObj.Locations.ContainsKey(loc_id))
                                    {
                                        if (dm == EbSysLocDM.LongName)
                                            _formattedData = loc_id + "$$" + this.SolutionObj.Locations[loc_id].LongName;
                                        else
                                            _formattedData = loc_id + "$$" + this.SolutionObj.Locations[loc_id].ShortName;
                                    }
                                }
                                else if (_column.Control is EbSysCreatedBy || _column.Control is EbSysModifiedBy)
                                {
                                    int user_id = Convert.ToInt32(_unformattedData);
                                    EbSysCreatedByDM dm = (_column.Control is EbSysCreatedBy) ? (_column.Control as EbSysCreatedBy).DisplayMember : (_column.Control as EbSysModifiedBy).DisplayMember;
                                    if (this.SolutionObj.Users != null && this.SolutionObj.Users.ContainsKey(user_id))
                                    {
                                        if (dm == EbSysCreatedByDM.FullName)
                                            _formattedData = user_id + "$$" + this.SolutionObj.Users[user_id];
                                    }
                                }
                            }
                        }
                        else if (dataColumn.Type == EbDbTypes.Date)
                        {
                            _unformattedData = (_unformattedData == DBNull.Value) ? DateTime.MinValue : _unformattedData;
                            _formattedData = ((DateTime)_unformattedData).Date != DateTime.MinValue ? Convert.ToDateTime(_unformattedData).ToString("yyyy-MM-dd", CultureInfo.InvariantCulture) : string.Empty;
                        }
                        Row.Columns.Add(new SingleColumn()
                        {
                            Name = dataColumn.ColumnName,
                            Type = (int)dataColumn.Type,
                            Value = _formattedData
                        });
                    }
                }
                Row.RowId = _rowId;
                Table.Add(Row);
            }
        }

        //For Normal Mode
        public void RefreshFormData(IDatabase DataDB, Service service, bool backup = false, bool includePushData = false)
        {
            WebFormSchema _schema = this.FormSchema;//this.GetWebFormSchema();
            int formCount = (this.ExeDataPusher && includePushData) ? this.DataPushers.Count + 1 : 1;
            string[] psquery = new string[formCount];
            int[] qrycount = new int[formCount];
            EbWebForm[] FormCollection = new EbWebForm[formCount];
            string query = this.GetSelectQuery(DataDB, _schema, service, out psquery[0], out qrycount[0]);
            FormCollection[0] = this;

            if (this.ExeDataPusher && includePushData)
            {
                for(int i = 0; i < this.DataPushers.Count; i++)
                {
                    query += this.DataPushers[i].WebForm.GetSelectQuery(DataDB, this.DataPushers[i].WebForm.FormSchema, service, out psquery[i + 1], out qrycount[i + 1]);
                    FormCollection[i + 1] = this.DataPushers[i].WebForm;
                }
            }

            EbDataSet dataset = DataDB.DoQueries(query, new DbParameter[]
            {
                DataDB.GetNewParameter(_schema.MasterTable + "_id", EbDbTypes.Int32, this.TableRowId),
                DataDB.GetNewParameter(_schema.MasterTable + "_eb_ver_id", EbDbTypes.Int32, this.RefId.Split("-")[4])
            });

            Console.WriteLine("From RefreshFormData : Query count = " + qrycount.Join(",") + " Dataset count = " + dataset.Tables.Count);            

            for(int i = 0, start = 0; i < formCount; start += qrycount[i], i++)
            {
                EbDataSet ds = new EbDataSet();
                ds.Tables.AddRange(dataset.Tables.GetRange(start, qrycount[i]));
                FormCollection[i].RefreshFormDataInner(ds, DataDB, i == 0 ? psquery[i] : string.Empty, backup);
            }
            Console.WriteLine("No Exception in RefreshFormData");
        }

        private void RefreshFormDataInner(EbDataSet dataset, IDatabase DataDB, string psquery, bool backup)
        {
            WebFormSchema _schema = this.FormSchema;

            WebformData _FormData = new WebformData()
            {
                MasterTable = _schema.MasterTable
            };

            for (int i = 0; i < _schema.Tables.Count && dataset.Tables.Count >= _schema.Tables.Count; i++)
            {
                EbDataTable dataTable = dataset.Tables[i];////
                SingleTable Table = new SingleTable();

                if (_schema.Tables[i].TableType == WebFormTableTypes.Approval)
                    GetFormattedDataApproval(dataTable, Table);
                else
                    GetFormattedData(dataTable, Table, _schema.Tables[i]);

                if (!_FormData.MultipleTables.ContainsKey(_schema.Tables[i].TableName) && Table.Count > 0)
                    _FormData.MultipleTables.Add(_schema.Tables[i].TableName, Table);
            }

            if (!_FormData.MultipleTables.ContainsKey(_FormData.MasterTable))
            {
                string t = "From RefreshFormData - TABLE : " + _FormData.MasterTable + "   ID : " + this.TableRowId + "\nData Not Found";
                Console.WriteLine(t);
                throw new FormException(t);
            }
            else
            {
                this.TableRowId = Convert.ToInt32(_FormData.MultipleTables[_FormData.MasterTable][0].RowId);
                this.LocationId = Convert.ToInt32(_FormData.MultipleTables[_FormData.MasterTable][0].LocId);
            }

            if (dataset.Tables.Count > _schema.Tables.Count)
            {
                int tableIndex = _schema.Tables.Count;
                int mngUsrCount = 0;
                SingleTable UserTable = null;
                foreach (Object Ctrl in _schema.ExtendedControls)//ManageUser Controls + Manage Location Control
                {
                    SingleTable Table = new SingleTable();
                    if (!(UserTable != null && Ctrl is EbProvisionUser))
                        GetFormattedData(dataset.Tables[tableIndex], Table);

                    if (Ctrl is EbProvisionUser)
                    {
                        Dictionary<string, dynamic> _d = new Dictionary<string, dynamic>();
                        if (UserTable == null)
                            UserTable = Table;
                        else
                            tableIndex--; //one query is used to select required user records
                        if (UserTable.Count > mngUsrCount)
                        {
                            _d.Add("id", UserTable[mngUsrCount]["id"]);
                            foreach (UsrLocField _f in (Ctrl as EbProvisionUser).PersistingFields)
                            {
                                _d.Add(_f.Name, UserTable[mngUsrCount][_f.Name]);
                            }
                            mngUsrCount++;
                        }
                        _FormData.MultipleTables[(Ctrl as EbProvisionUser).VirtualTable][0].Columns.Add(new SingleColumn()
                        {
                            Name = (Ctrl as EbProvisionUser).Name,
                            Type = (int)EbDbTypes.String,
                            Value = JsonConvert.SerializeObject(_d)
                        });
                    }
                    else if (Ctrl is EbProvisionLocation)
                    {
                        Dictionary<string, dynamic> _d = new Dictionary<string, dynamic>();
                        if (Table.Count == 1)
                        {
                            _d.Add("id", Table[0]["id"]);
                            _d.Add("longname", Table[0]["longname"]);
                            _d.Add("shortname", Table[0]["shortname"]);
                            _d.Add("image", Table[0]["image"]);
                            _d.Add("meta_json", Table[0]["meta_json"]);
                        }
                        _FormData.MultipleTables[(Ctrl as EbProvisionLocation).VirtualTable][0].Columns.Add(new SingleColumn()
                        {
                            Name = (Ctrl as EbProvisionLocation).Name,
                            Type = (int)EbDbTypes.String,
                            Value = JsonConvert.SerializeObject(_d)
                        });
                    }

                    tableIndex++;
                }
            }

            foreach (Object Ctrl in _schema.ExtendedControls)
            {
                if (Ctrl is EbFileUploader)
                {
                    if (this.FormGlobals == null)
                        this.FormGlobals = GetFormAsFlatGlobal(_FormData);
                    string context = this.RefId.Split("-")[3] + "_" + this.TableRowId.ToString();//context format = objectId_rowId_ControlId
                    string cxt2 = (Ctrl as EbFileUploader).ExeContextCode(this.FormGlobals, false);
                    string qry = (Ctrl as EbFileUploader).GetSelectQuery(string.IsNullOrEmpty(cxt2));

                    EbDataTable dt = DataDB.DoQuery(qry, new DbParameter[]
                    {
                        DataDB.GetNewParameter("id", EbDbTypes.Int32, this.TableRowId),
                        DataDB.GetNewParameter("context", EbDbTypes.String, context),
                        DataDB.GetNewParameter("context_sec", EbDbTypes.String, cxt2 ?? string.Empty),
                        DataDB.GetNewParameter("eb_ver_id", EbDbTypes.Int32, this.RefId.Split("-")[4])
                    });

                    SingleTable Table = new SingleTable();
                    GetFormattedData(dt, Table);

                    List<FileMetaInfo> _list = new List<FileMetaInfo>();
                    foreach (SingleRow dr in Table)
                    {
                        FileMetaInfo info = new FileMetaInfo
                        {
                            FileRefId = dr["id"],
                            FileName = dr["filename"],
                            Meta = JsonConvert.DeserializeObject<Dictionary<string, List<string>>>(dr["tags"] as string),
                            UploadTime = dr["uploadts"],
                            FileCategory = (EbFileCategory)Convert.ToInt32(dr["filecategory"])
                        };

                        if (!_list.Contains(info))
                            _list.Add(info);
                    }
                    SingleTable _Table = new SingleTable {
                            new SingleRow() {
                                Columns = new List<SingleColumn> {
                                    new SingleColumn { Name = "Files", Type = (int)EbDbTypes.Json, Value = JsonConvert.SerializeObject(_list) }
                                }
                            }
                        };
                    _FormData.ExtendedTables.Add((Ctrl as EbControl).EbSid, _Table);
                }
            }


            if (!psquery.IsNullOrEmpty() && !backup)
            {
                List<DbParameter> param = new List<DbParameter>();
                param.Add(DataDB.GetNewParameter(_FormData.MasterTable + "_id", EbDbTypes.Int32, this.TableRowId));
                this.LocationId = _FormData.MultipleTables[_FormData.MasterTable][0].LocId;

                for (int i = 0; i < _schema.Tables.Count && dataset.Tables.Count >= _schema.Tables.Count; i++)
                {
                    if (dataset.Tables[i].Rows.Count > 0)
                    {
                        EbDataRow dataRow = dataset.Tables[i].Rows[0];
                        foreach (EbDataColumn dataColumn in dataset.Tables[i].Columns)
                        {
                            DbParameter t = param.Find(e => e.ParameterName == dataColumn.ColumnName);
                            if (t == null)
                            {
                                if (dataRow.IsDBNull(dataColumn.ColumnIndex))
                                {
                                    var p = DataDB.GetNewParameter(dataColumn.ColumnName, dataColumn.Type);
                                    p.Value = DBNull.Value;
                                    param.Add(p);
                                }
                                else
                                    param.Add(DataDB.GetNewParameter(dataColumn.ColumnName, dataColumn.Type, dataRow[dataColumn.ColumnIndex]));
                            }
                        }
                    }
                }
                //if eb_loc_id control is not present then form data entered location adding as 'eb_loc_id' 
                DbParameter tt = param.Find(e => e.ParameterName == "eb_loc_id");
                if (tt == null)
                    param.Add(DataDB.GetNewParameter("eb_loc_id", EbDbTypes.Decimal, this.LocationId));

                EbDataSet ds = DataDB.DoQueries(psquery, param.ToArray());

                if (ds.Tables.Count > 0)
                {
                    int tblIdx = 0;
                    foreach (TableSchema Tbl in _schema.Tables)//PowerSelect
                    {
                        foreach (ColumnSchema Col in Tbl.Columns)
                        {
                            if (Col.Control is EbPowerSelect || Col.Control is EbDGPowerSelectColumn)
                            {
                                SingleTable Table = new SingleTable();
                                GetFormattedData(ds.Tables[tblIdx], Table);
                                _FormData.ExtendedTables.Add((Col.Control as EbControl).EbSid, Table);
                                tblIdx++;
                            }
                        }
                    }
                }
            }

            if (backup)
                this.FormDataBackup = _FormData;
            else
            {
                this.FormData = _FormData;
                this.ExeDeleteCancelScript(DataDB);
            }
        }

        //For Prefill Mode
        public void RefreshFormData(IDatabase DataDB, Service service, List<Param> _params)
        {
            WebFormSchema _schema = this.FormSchema;//this.GetWebFormSchema();
            this.FormData = new WebformData
            {
                MasterTable = _schema.MasterTable
            };
            Dictionary<string, string> QrsDict = new Dictionary<string, string>();
            List<DbParameter> param = new List<DbParameter>();
            for (int i = 0; i < _params.Count; i++)
            {
                for (int j = 0; j < _schema.Tables.Count; j++)
                {
                    for (int k = 0; k < _schema.Tables[j].Columns.Count; k++)
                    {
                        if (_schema.Tables[j].Columns[k].ColumnName.Equals(_params[i].Name))
                        {
                            if (_schema.Tables[j].Columns[k].Control is EbPowerSelect)
                            {
                                string t = (_schema.Tables[j].Columns[k].Control as EbPowerSelect).GetSelectQuery(DataDB, service, _params[i].Value);
                                QrsDict.Add((_schema.Tables[j].Columns[k].Control as EbPowerSelect).EbSid, t);
                            }
                            if (!this.FormData.MultipleTables.ContainsKey(_schema.Tables[j].TableName))
                            {
                                SingleTable tbl = new SingleTable();
                                tbl.Add(new SingleRow());
                                this.FormData.MultipleTables.Add(_schema.Tables[j].TableName, tbl);
                            }
                            SingleColumn col = new SingleColumn()
                            {
                                Name = _params[i].Name,
                                Type = _schema.Tables[j].Columns[k].EbDbType,
                                Value = _params[i].ValueTo
                            };
                            param.Add(DataDB.GetNewParameter(col.Name, (EbDbTypes)col.Type, col.Value));
                            this.FormData.MultipleTables[_schema.Tables[j].TableName][0].Columns.Add(col);
                        }
                    }
                }
            }
            if (QrsDict.Count > 0)
            {
                EbDataSet dataset = DataDB.DoQueries(string.Join(" ", QrsDict.Select(d => d.Value)), param.ToArray());
                int i = 0;
                foreach (KeyValuePair<string, string> item in QrsDict)
                {
                    SingleTable Table = new SingleTable();
                    GetFormattedData(dataset.Tables[i++], Table);
                    this.FormData.ExtendedTables.Add(item.Key, Table);
                }
            }
        }

        public int Save(IDatabase DataDB, Service service)
        {
            int r = 0;
            if (this.TableRowId > 0)
            {
                this.RefreshFormData(DataDB, service, true, true);

                r = this.Update(DataDB);
            }
            else
            {
                this.TableRowId = this.Insert(DataDB);
                r = 1;
            }
            this.RefreshFormData(DataDB, service, false, true);
            try
            {
                this.UpdateAuditTrail(DataDB);
            }
            catch (Exception e)
            {
                Console.WriteLine("Exception!!! UpdateAuditTrail : " + e.Message);
            }

            return r;
        }

        public int Insert(IDatabase DataDB)
        {
            string fullqry = string.Empty;
            string _extqry = string.Empty;
            List<DbParameter> param = new List<DbParameter>();
            int i = 0;
            List<EbWebForm> FormCollection = new List<EbWebForm>() { this };
            if (this.ExeDataPusher)
            {
                this.PrepareWebFormData();
                foreach (EbDataPusher pusher in this.DataPushers)
                {
                    FormCollection.Add(pusher.WebForm);
                }
            }
            foreach (EbWebForm WebForm in FormCollection)
            {
                foreach (KeyValuePair<string, SingleTable> entry in WebForm.FormData.MultipleTables)
                {
                    foreach (SingleRow row in entry.Value)
                    {
                        string _cols = string.Empty;
                        string _values = string.Empty;

                        foreach (SingleColumn cField in row.Columns)
                        {
                            if (cField.Control != null)
                                cField.Control.ParameterizeControl(DataDB, param, WebForm.TableName, cField, true, ref i, ref _cols, ref _values, ref _extqry, WebForm.UserObj, null);
                            else
                                WebForm.ParameterizeUnknown(DataDB, param, cField, true, ref i, ref _cols, ref _values);
                        }

                        string _qry = WebForm.GetInsertQuery(DataDB, entry.Key, true);
                        fullqry += string.Format(_qry, _cols, _values);
                    }
                }
                param.Add(DataDB.GetNewParameter(WebForm.TableName + "_eb_ver_id", EbDbTypes.Int32, WebForm.RefId.Split("-")[4]));
            }

            fullqry += _extqry;
            fullqry += this.GetFileUploaderUpdateQuery(DataDB, param, ref i);

            param.Add(DataDB.GetNewParameter("eb_createdby", EbDbTypes.Int32, this.UserObj.UserId));
            param.Add(DataDB.GetNewParameter("eb_loc_id", EbDbTypes.Int32, this.LocationId));
            fullqry += string.Format("SELECT eb_currval('{0}_id_seq');", this.TableName);

            EbDataSet tem = DataDB.DoQueries(fullqry, param.ToArray());
            EbDataTable temp = tem.Tables[tem.Tables.Count - 1];
            int _rowid = temp.Rows.Count > 0 ? Convert.ToInt32(temp.Rows[0][0]) : 0;
            return _rowid;
        }

        public int Update(IDatabase DataDB)
        {
            string fullqry = string.Empty;
            string _extqry = string.Empty;
            List<DbParameter> param = new List<DbParameter>();
            int i = 0;
            List<EbWebForm> FormCollection = new List<EbWebForm>() { this };
            if (this.ExeDataPusher)
            {
                this.PrepareWebFormData();
                foreach (EbDataPusher pusher in this.DataPushers)
                {
                    FormCollection.Add(pusher.WebForm);
                }
            }

            foreach (EbWebForm WebForm in FormCollection)
            {
                foreach (KeyValuePair<string, SingleTable> entry in WebForm.FormData.MultipleTables)
                {
                    foreach (SingleRow row in entry.Value)
                    {
                        string _colvals = string.Empty;
                        string _temp = string.Empty;
                        int _rowId = Convert.ToInt32(row.RowId);
                        if (_rowId > 0)
                        {
                            if (!row.IsDelete)
                            {
                                foreach (SingleColumn cField in row.Columns)
                                {
                                    if (cField.Control != null)
                                    {
                                        SingleColumn ocF = WebForm.FormDataBackup.MultipleTables[entry.Key].Find(e => e.RowId == row.RowId).Columns.Find(e => e.Name.Equals(cField.Name));
                                        cField.Control.ParameterizeControl(DataDB, param, WebForm.TableName, cField, false, ref i, ref _colvals, ref _temp, ref _extqry, WebForm.UserObj, ocF);
                                    }
                                    else
                                        WebForm.ParameterizeUnknown(DataDB, param, cField, false, ref i, ref _colvals, ref _temp);
                                }
                            }

                            string _qry = WebForm.GetUpdateQuery(DataDB, entry.Key, row.IsDelete);
                            fullqry += string.Format(_qry, _colvals, row.RowId);
                        }
                        else
                        {
                            string _cols = string.Empty;
                            string _vals = string.Empty;

                            foreach (SingleColumn cField in row.Columns)
                            {
                                if (cField.Control != null)
                                    cField.Control.ParameterizeControl(DataDB, param, WebForm.TableName, cField, true, ref i, ref _cols, ref _vals, ref _extqry, WebForm.UserObj, null);
                                else
                                    WebForm.ParameterizeUnknown(DataDB, param, cField, true, ref i, ref _cols, ref _vals);
                            }
                            string _qry = WebForm.GetInsertQuery(DataDB, entry.Key, false);
                            fullqry += string.Format(_qry, _cols, _vals);
                        }
                    }
                }
                param.Add(DataDB.GetNewParameter(WebForm.FormData.MasterTable + "_id", EbDbTypes.Int32, WebForm.TableRowId));
                param.Add(DataDB.GetNewParameter(WebForm.FormData.MasterTable + "_eb_ver_id", EbDbTypes.Int32, WebForm.RefId.Split("-")[4]));
            }            

            fullqry += _extqry;
            fullqry += GetFileUploaderUpdateQuery(DataDB, param, ref i);
            param.Add(DataDB.GetNewParameter("eb_loc_id", EbDbTypes.Int32, this.LocationId));
            param.Add(DataDB.GetNewParameter("eb_createdby", EbDbTypes.Int32, this.UserObj.UserId));
            param.Add(DataDB.GetNewParameter("eb_modified_by", EbDbTypes.Int32, this.UserObj.UserId));
            return DataDB.InsertTable(fullqry, param.ToArray());
        }

        public string GetFileUploaderUpdateQuery(IDatabase DataDB, List<DbParameter> param, ref int i)
        {
            string _qry = string.Empty;
            foreach (object control in this.FormSchema.ExtendedControls)
            {
                if (control is EbFileUploader)
                {
                    if (this.FormGlobals == null)
                        this.FormGlobals = GetFormAsFlatGlobal(this.FormData);
                    EbFileUploader _c = control as EbFileUploader;
                    string secCxtGet = _c.ExeContextCode(this.FormGlobals, false);
                    string secCxtSet = _c.ExeContextCode(this.FormGlobals, true);

                    _qry = _c.GetUpdateQuery2(DataDB, param, this.FormData.ExtendedTables[_c.Name ?? _c.EbSid], this.TableName, this.RefId.Split("-")[3], ref i, this.TableRowId, secCxtGet, secCxtSet);
                }
            }
            return _qry;
        }

        private bool ParameterizeUnknown(IDatabase DataDB, List<DbParameter> param, SingleColumn cField, bool ins, ref int i, ref string _col, ref string _val)
        {
            if (cField.Name.Equals("eb_row_num"))
            {
                if (string.IsNullOrEmpty(cField.Value))
                {
                    var p = DataDB.GetNewParameter(cField.Name + "_" + i, (EbDbTypes)cField.Type);
                    p.Value = DBNull.Value;
                    param.Add(p);
                }
                else
                {
                    int v = Convert.ToInt32(cField.Value);
                    param.Add(DataDB.GetNewParameter(cField.Name + "_" + i, EbDbTypes.Decimal, v));
                }
                if (ins)
                {
                    _col += string.Concat(cField.Name, ", ");
                    _val += string.Concat(":", cField.Name, "_", i, ", ");
                }
                else
                    _col += string.Concat(cField.Name, "=:", cField.Name, "_", i, ", ");
                i++;
                return true;
            }
            else
                Console.WriteLine($"Unknown parameter found in formdata... \nForm RefId : {this.RefId}\nName : {cField.Name}\nType : {cField.Type}\nValue : {cField.Value}");
            return false;
        }

        private void PrepareWebFormData()
        {
            FormAsGlobal globals = this.GetFormAsFlatGlobal(this.FormData);
            foreach (EbDataPusher pusher in this.DataPushers)
            {
                pusher.WebForm.DataPusherConfig.SourceRecId = this.TableRowId;                
                pusher.WebForm.RefId = pusher.FormRefId;
                pusher.WebForm.UserObj = this.UserObj;
                pusher.WebForm.LocationId = this.LocationId;
                pusher.WebForm.SolutionObj = this.SolutionObj;

                if (!pusher.PushOnlyIf.IsNullOrEmpty())
                {
                    string status = pusher.WebForm.ExecuteCSharpScript(pusher.PushOnlyIf, globals);
                    if (status.Equals(true.ToString()))
                        pusher.WebForm.DataPusherConfig.AllowPush = true;
                }
                else
                    pusher.WebForm.DataPusherConfig.AllowPush = true;

                if (pusher.WebForm.DataPusherConfig.AllowPush)
                {
                    pusher.WebForm.ProcessPushJson(pusher, globals);
                    pusher.WebForm.MergeFormData();
                }
                else
                    pusher.WebForm.FormData = new WebformData();

                if (this.TableRowId > 0)//if edit mode then fill or map the id by refering FormDataBackup
                {
                    if (pusher.WebForm.DataPusherConfig.AllowPush)
                    {
                        foreach (KeyValuePair<string, SingleTable> entry in pusher.WebForm.FormDataBackup.MultipleTables)
                        {
                            if (pusher.WebForm.FormData.MultipleTables.ContainsKey(entry.Key))
                            {
                                for (int i = 0; i < entry.Value.Count; i++)
                                {
                                    if (i < pusher.WebForm.FormData.MultipleTables[entry.Key].Count)
                                        pusher.WebForm.FormData.MultipleTables[entry.Key][i].RowId = entry.Value[i].RowId;
                                    else
                                    {
                                        pusher.WebForm.FormData.MultipleTables[entry.Key].Add(entry.Value[i]);
                                        pusher.WebForm.FormData.MultipleTables[entry.Key][i].IsDelete = true;
                                    }
                                }
                            }
                            else
                            {
                                pusher.WebForm.FormData.MultipleTables.Add(entry.Key, entry.Value);
                                foreach (SingleRow Row in pusher.WebForm.FormData.MultipleTables[entry.Key])
                                    Row.IsDelete = true;
                            }
                        }
                    }
                    else
                    {
                        pusher.WebForm.FormData = pusher.WebForm.FormDataBackup;
                        foreach (KeyValuePair<string, SingleTable> entry in pusher.WebForm.FormData.MultipleTables)
                        {
                            foreach (SingleRow Row in entry.Value)
                                Row.IsDelete = true;
                        }
                    }                    
                }                
            }
        }

        public void ProcessPushJson(EbDataPusher pusher, FormAsGlobal globals)
        {
            this.FormData = new WebformData() { MasterTable = this.FormSchema.MasterTable };
            JObject JObj = JObject.Parse(pusher.Json);

            foreach (TableSchema _table in this.FormSchema.Tables)
            {
                if (JObj[_table.TableName] != null)
                {
                    SingleTable Table = new SingleTable();                    
                    foreach(JToken jRow in JObj[_table.TableName])
                    {
                        if(_table.TableType == WebFormTableTypes.Grid && !pusher.SkipLineItemIf.IsNullOrEmpty())
                        {
                            string status = this.ExecuteCSharpScript(pusher.SkipLineItemIf, globals);
                            if (status.Equals(true.ToString()))
                                continue;
                        }
                        Table.Add(this.GetSingleRow(jRow, _table, globals));
                    }
                    this.FormData.MultipleTables.Add(_table.TableName, Table);
                }
            }
        }

        private SingleRow GetSingleRow(JToken JRow, TableSchema _table, FormAsGlobal globals)
        {
            SingleRow Row = new SingleRow() { RowId = "0" };
            foreach (ColumnSchema _column in _table.Columns)
            {
                if (JRow[_column.ColumnName] != null)
                {
                    JRow[_column.ColumnName] = this.ExecuteCSharpScript(JRow[_column.ColumnName].ToString(), globals);

                    Row.Columns.Add(new SingleColumn
                    {
                        Name = _column.ColumnName,
                        Type = _column.EbDbType,
                        Value = JRow[_column.ColumnName].ToString()
                    });
                }
            }
            return Row;
        }

        private string ExecuteCSharpScript(string code, FormAsGlobal globals)
        {
            try
            {
                Script valscript = CSharpScript.Create<dynamic>(
                    code,
                    ScriptOptions.Default.WithReferences("Microsoft.CSharp", "System.Core").WithImports("System.Dynamic", "System", "System.Collections.Generic",
                    "System.Diagnostics", "System.Linq"),
                    globalsType: typeof(FormGlobals)
                );
                valscript.Compile();
                FormGlobals global = new FormGlobals() { form = globals };
                var r = (valscript.RunAsync(global)).Result.ReturnValue;
                return r.ToString();
            }
            catch (Exception ex)
            {
                Console.WriteLine("Exception in C# Expression evaluation:" + code + " \nMessage : " + ex.Message);
                Console.WriteLine(ex.StackTrace);
                return code;
            }
        }

        //execute sql queries after form data save
        public int AfterSave(IDatabase DataDB, bool IsUpdate)
        {
            string q = string.Empty;
            if (this.AfterSaveRoutines != null && this.AfterSaveRoutines.Count > 0)
            {
                foreach (EbRoutines e in this.AfterSaveRoutines)
                {
                    if (IsUpdate && !e.IsDisabledOnEdit)
                        q += e.Script.Code + ";";
                    else if (!IsUpdate && !e.IsDisabledOnNew)
                        q += e.Script.Code + ";";
                }
            }
            if (!q.Equals(string.Empty))
            {
                List<DbParameter> param = new List<DbParameter>();
                foreach (KeyValuePair<string, SingleTable> item in this.FormData.MultipleTables)
                {
                    if (item.Value.Count == 0)
                        continue;
                    foreach (SingleColumn cField in item.Value[item.Value.Count - 1].Columns)
                    {
                        if (q.Contains(":" + item.Key + "_" + cField.Name))
                        {
                            if (cField.Value == null)
                            {
                                var p = DataDB.GetNewParameter(item.Key + "_" + cField.Name, (EbDbTypes)cField.Type);
                                p.Value = DBNull.Value;
                                param.Add(p);
                            }
                            else
                                param.Add(DataDB.GetNewParameter(item.Key + "_" + cField.Name, (EbDbTypes)cField.Type, cField.Value));
                        }
                    }
                }
                return DataDB.InsertTable(q, param.ToArray());
            }
            return -1;
        }

        public void SendMailIfUserCreated(RabbitMqProducer MessageProducer3)
        {
            foreach (EbControl c in this.FormSchema.ExtendedControls)
            {
                if (c is EbProvisionUser)
                    (c as EbProvisionUser).SendMailIfUserCreated(MessageProducer3, this.UserObj.UserId, this.UserObj.FullName, this.UserObj.AuthId, this.SolutionObj.SolutionID);
            }
        }

        //to check whether this form data entry can be delete by executing DisableDelete sql quries
        private bool CanDelete(IDatabase DataDB)
        {
            if (this.DisableDelete != null && this.DisableDelete.Count > 0)
            {
                string q = string.Join(";", this.DisableDelete.Select(e => e.Script.Code));
                DbParameter[] p = new DbParameter[] {
                    DataDB.GetNewParameter("id", EbDbTypes.Int32, this.TableRowId)
                };
                EbDataSet ds = DataDB.DoQueries(q, p);

                for (int i = 0; i < ds.Tables.Count; i++)
                {
                    if (ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0].Count > 0)
                    {
                        if (!this.DisableDelete[i].IsDisabled && Convert.ToInt32(ds.Tables[0].Rows[0][0]) > 0 && !this.DisableDelete[i].IsWarningOnly)
                            return false;
                    }
                }
            }
            return true;
        }

        public int Delete(IDatabase DataDB)
        {
            if (this.CanDelete(DataDB))
            {
                string query = this.GetDeleteQuery(DataDB);
                DbParameter[] param = new DbParameter[] {
                    DataDB.GetNewParameter("eb_lastmodified_by", EbDbTypes.Int32, this.UserObj.UserId),
                    DataDB.GetNewParameter("id", EbDbTypes.Int32, this.TableRowId)
                };
                return DataDB.UpdateTable(query, param);
            }
            return -1;
        }

        //to check whether this form data entry can be cancel by executing DisableCancel sql quries
        private bool CanCancel(IDatabase DataDB)
        {
            if (this.DisableCancel != null && this.DisableCancel.Count > 0)
            {
                string q = string.Join(";", this.DisableCancel.Select(e => e.Script.Code));
                DbParameter[] p = new DbParameter[] {
                    DataDB.GetNewParameter("id", EbDbTypes.Int32, this.TableRowId)
                };
                EbDataSet ds = DataDB.DoQueries(q, p);

                for (int i = 0; i < ds.Tables.Count; i++)
                {
                    if (ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0].Count > 0)
                    {
                        if (!this.DisableCancel[i].IsDisabled && Convert.ToInt32(ds.Tables[0].Rows[0][0]) > 0 && !this.DisableCancel[i].IsWarningOnly)
                            return false;
                    }
                }
            }
            return true;
        }

        public int Cancel(IDatabase DataDB)
        {
            if (this.CanCancel(DataDB))
            {
                string query = this.GetCancelQuery(DataDB);
                DbParameter[] param = new DbParameter[] {
                    DataDB.GetNewParameter("eb_lastmodified_by", EbDbTypes.Int32, this.UserObj.UserId),
                    DataDB.GetNewParameter("id", EbDbTypes.Int32, this.TableRowId)
                };
                return DataDB.UpdateTable(query, param);
            }
            return -1;
        }

        private void ExeDeleteCancelScript(IDatabase DataDB)
        {
            string q = string.Empty;
            if (this.DisableDelete != null && this.DisableDelete.Count > 0)
            {
                q = string.Join(";", this.DisableDelete.Select(e => e.Script.Code));
            }
            if (this.DisableCancel != null && this.DisableCancel.Count > 0)
            {
                q += string.Join(";", this.DisableCancel.Select(e => e.Script.Code));
            }
            if (!q.Equals(string.Empty))
            {
                DbParameter[] p = new DbParameter[] {
                    DataDB.GetNewParameter("id", EbDbTypes.Int32, this.TableRowId)
                };
                EbDataSet ds = DataDB.DoQueries(q, p);
                int i = 0;
                for (; i < this.DisableDelete.Count; i++)
                {
                    if (ds.Tables[i].Rows.Count > 0 && ds.Tables[i].Rows[0].Count > 0)
                    {
                        if (this.DisableDelete[i].IsDisabled || Convert.ToInt32(ds.Tables[i].Rows[0][0]) == 0)
                        {
                            this.FormData.DisableDelete.Add(this.DisableDelete[i].Name, false);
                        }
                        else
                        {
                            this.FormData.DisableDelete.Add(this.DisableDelete[i].Name, true);
                        }
                    }
                }

                for (int j = 0; j < this.DisableCancel.Count; i++, j++)
                {
                    if (ds.Tables[i].Rows.Count > 0 && ds.Tables[i].Rows[0].Count > 0)
                    {
                        if (this.DisableCancel[j].IsDisabled || Convert.ToInt32(ds.Tables[i].Rows[0][0]) == 0)
                        {
                            this.FormData.DisableCancel.Add(this.DisableCancel[j].Name, false);
                        }
                        else
                        {
                            this.FormData.DisableCancel.Add(this.DisableCancel[j].Name, true);
                        }
                    }
                }
            }
        }

        private void UpdateAuditTrail(IDatabase DataDB)
        {
            List<EbWebForm> FormCollection = new List<EbWebForm> { this };            
            if (this.ExeDataPusher)
            {
                foreach (EbDataPusher pusher in this.DataPushers)
                    FormCollection.Add(pusher.WebForm);
            }
            List<AuditTrailInsertData> auditTrails = new List<AuditTrailInsertData>();

            foreach (EbWebForm WebForm in FormCollection)
            {
                List<AuditTrailEntry> FormFields = new List<AuditTrailEntry>();
                if (WebForm.FormDataBackup == null)
                {
                    auditTrails.Add(new AuditTrailInsertData { Action = 1, Fields = FormFields, RefId = WebForm.RefId, TableRowId = WebForm.TableRowId });
                }
                else
                {
                    foreach (KeyValuePair<string, SingleTable> entry in WebForm.FormData.MultipleTables)
                    {
                        bool IsGridTable = false;
                        TableSchema _table = WebForm.FormSchema.Tables.FirstOrDefault(tbl => tbl.TableName.Equals(entry.Key));
                        if (_table != null)
                            IsGridTable = _table.TableType == WebFormTableTypes.Grid;

                        if (!WebForm.FormDataBackup.MultipleTables.ContainsKey(entry.Key))//insert mode
                        {
                            foreach (SingleRow rField in entry.Value)
                            {
                                WebForm.PushAuditTrailEntry(entry.Key, rField, FormFields, true, IsGridTable, _table);
                            }
                        }
                        else//update mode
                        {
                            List<string> rids = new List<string>();
                            foreach (SingleRow rField in entry.Value)
                            {
                                rids.Add(rField.RowId);
                                SingleRow orF = WebForm.FormDataBackup.MultipleTables[entry.Key].Find(e => e.RowId == rField.RowId);
                                if (orF == null)//if it is new row
                                {
                                    WebForm.PushAuditTrailEntry(entry.Key, rField, FormFields, true, IsGridTable, _table);
                                }
                                else//row edited
                                {
                                    string relation = string.Concat(WebForm.TableRowId, "-", rField.RowId);

                                    if (WebForm.FormSchema.MasterTable.Equals(entry.Key))
                                        relation = WebForm.TableRowId.ToString();

                                    bool IsRowEdited = false;
                                    Dictionary<string, string> dic1 = null;
                                    Dictionary<string, string> dic2 = null;
                                    if (IsGridTable)
                                    {
                                        dic1 = new Dictionary<string, string>();
                                        dic2 = new Dictionary<string, string>();
                                    }
                                    foreach (SingleColumn cField in rField.Columns)
                                    {
                                        if (cField.Name.Equals("id"))//skipping 'id' field
                                            continue;
                                        ColumnSchema _column = _table.Columns.Find(c => c.ColumnName.Equals(cField.Name));
                                        if (_column != null)
                                        {
                                            if ((_column.Control as EbControl).DoNotPersist)//skip DoNotPersist field from audit entry// written for EbSystemControls
                                                continue;
                                        }
                                        SingleColumn ocf = orF.Columns.Find(e => e.Name == cField.Name);

                                        if (ocf == null)
                                        {
                                            ocf = new SingleColumn() { Name = cField.Name, Value = "[null]" };
                                        }
                                        if (IsGridTable)
                                        {
                                            dic1.Add(cField.Name, cField.Value == null ? "[null]" : cField.Value.ToString());
                                            dic2.Add(ocf.Name, ocf.Value == null ? "[null]" : ocf.Value.ToString());
                                        }
                                        if (ocf.Value != cField.Value)//checking for changes /////// modifications required
                                        {
                                            IsRowEdited = true;
                                            if (IsGridTable)
                                                continue;

                                            FormFields.Add(new AuditTrailEntry
                                            {
                                                Name = cField.Name,
                                                NewVal = cField.Value == null ? "[null]" : cField.Value.ToString(),
                                                OldVal = ocf.Value == null ? "[null]" : ocf.Value.ToString(),
                                                DataRel = relation,
                                                TableName = entry.Key
                                            });
                                        }
                                    }
                                    if (IsGridTable && IsRowEdited)
                                    {
                                        FormFields.Add(new AuditTrailEntry
                                        {
                                            Name = "dgrow",
                                            NewVal = JsonConvert.SerializeObject(dic1),
                                            OldVal = JsonConvert.SerializeObject(dic2),
                                            DataRel = relation,
                                            TableName = entry.Key
                                        });
                                    }
                                }
                            }
                            foreach (SingleRow Row in WebForm.FormDataBackup.MultipleTables[entry.Key])//looking for deleted rows
                            {
                                if (!rids.Contains(Row.RowId))
                                {
                                    WebForm.PushAuditTrailEntry(entry.Key, Row, FormFields, false, IsGridTable, _table);
                                }
                            }
                        }
                    }
                    if (FormFields.Count > 0)
                    {
                        auditTrails.Add(new AuditTrailInsertData { Action = 2, Fields = FormFields, RefId = WebForm.RefId, TableRowId = this.TableRowId });
                    }
                }
            }
            this.UpdateAuditTrail(DataDB, auditTrails);
        }

        //managing new or deleted row
        private void PushAuditTrailEntry(string Table, SingleRow Row, List<AuditTrailEntry> FormFields, bool IsIns, bool IsGridRow, TableSchema _table)
        {
            string relation = string.Concat(this.TableRowId, "-", Row.RowId);

            if (this.FormSchema.MasterTable.Equals(Table))
                relation = this.TableRowId.ToString();

            if (IsGridRow)
            {
                Dictionary<string, string> dic = new Dictionary<string, string>();
                foreach (SingleColumn cField in Row.Columns)
                {
                    if (cField.Name.Equals("id"))//skipping 'id' field
                        continue;
                    dic.Add(cField.Name, cField.Value == null ? "[null]" : cField.Value.ToString());
                }
                string val = JsonConvert.SerializeObject(dic);
                FormFields.Add(new AuditTrailEntry
                {
                    Name = "dgrow",
                    NewVal = IsIns ? val : "[null]",
                    OldVal = IsIns ? "[null]" : val,
                    DataRel = relation,
                    TableName = Table
                });
            }
            else
            {
                foreach (SingleColumn cField in Row.Columns)
                {
                    if (cField.Name.Equals("id"))//skipping 'id' field
                        continue;
                    ColumnSchema _column = _table.Columns.Find(c => c.ColumnName.Equals(cField.Name));
                    if (_column != null)
                    {
                        if ((_column.Control as EbControl).DoNotPersist)//skip DoNotPersist field from audit entry// written for EbSystemControls
                            continue;
                    }

                    FormFields.Add(new AuditTrailEntry
                    {
                        Name = cField.Name,
                        NewVal = IsIns && cField.Value != null ? cField.Value.ToString() : "[null]",
                        OldVal = !IsIns && cField.Value != null ? cField.Value.ToString() : "[null]",
                        DataRel = relation,
                        TableName = Table
                    });
                }
            }
        }

        private int UpdateAuditTrail(IDatabase DataDB, int Action, List<AuditTrailEntry> _Fields)
        {
            List<DbParameter> parameters = new List<DbParameter>();
            parameters.Add(DataDB.GetNewParameter("formid", EbDbTypes.String, this.RefId));
            parameters.Add(DataDB.GetNewParameter("dataid", EbDbTypes.Int32, this.TableRowId));
            parameters.Add(DataDB.GetNewParameter("actiontype", EbDbTypes.Int32, Action));
            parameters.Add(DataDB.GetNewParameter("eb_createdby", EbDbTypes.Int32, this.UserObj.UserId));
            string Qry = DataDB.EB_UPDATEAUDITTRAIL;
            EbDataTable dt = DataDB.DoQuery(Qry, parameters.ToArray());
            var id = Convert.ToInt32(dt.Rows[0][0]);
            if (_Fields.Count == 0)
                return id;
            string lineQry = "INSERT INTO eb_audit_lines(masterid, fieldname, oldvalue, newvalue, idrelation, tablename) VALUES ";
            List<DbParameter> parameters1 = new List<DbParameter>();
            parameters1.Add(DataDB.GetNewParameter("masterid", EbDbTypes.Int32, id));
            for (int i = 0; i < _Fields.Count; i++)
            {
                lineQry += string.Format("(:masterid, :{0}_{1}, :old{0}_{1}, :new{0}_{1}, :idrel{0}_{1}, :tblname{0}_{1}),", _Fields[i].Name, i);
                parameters1.Add(DataDB.GetNewParameter(_Fields[i].Name + "_" + i, EbDbTypes.String, _Fields[i].Name));
                parameters1.Add(DataDB.GetNewParameter("new" + _Fields[i].Name + "_" + i, EbDbTypes.String, _Fields[i].NewVal));
                parameters1.Add(DataDB.GetNewParameter("old" + _Fields[i].Name + "_" + i, EbDbTypes.String, _Fields[i].OldVal));
                parameters1.Add(DataDB.GetNewParameter("idrel" + _Fields[i].Name + "_" + i, EbDbTypes.String, _Fields[i].DataRel));
                parameters1.Add(DataDB.GetNewParameter("tblname" + _Fields[i].Name + "_" + i, EbDbTypes.String, _Fields[i].TableName));
            }
            return DataDB.DoNonQuery(lineQry.Substring(0, lineQry.Length - 1), parameters1.ToArray());
        }

        private int UpdateAuditTrail(IDatabase DataDB, List<AuditTrailInsertData> Data)
        {
            List<DbParameter> parameters = new List<DbParameter>();
            parameters.Add(DataDB.GetNewParameter("eb_createdby", EbDbTypes.Int32, this.UserObj.UserId));
            parameters.Add(DataDB.GetNewParameter("eb_createdat", EbDbTypes.DateTime, DateTime.UtcNow));
            int i = 0;
            string fullQry = string.Empty;
            foreach(AuditTrailInsertData data in Data)
            {
                parameters.Add(DataDB.GetNewParameter("formid_" + i, EbDbTypes.String, data.RefId));
                parameters.Add(DataDB.GetNewParameter("dataid_" + i, EbDbTypes.Int32, data.TableRowId));
                parameters.Add(DataDB.GetNewParameter("actiontype_" + i, EbDbTypes.Int32, data.Action));

                fullQry += string.Format(@"INSERT INTO eb_audit_master(formid, dataid, actiontype, eb_createdby, eb_createdat) 
                        VALUES (:formid_{0}, :dataid_{0}, :actiontype_{0}, :eb_createdby, :eb_createdat);", i);

                if(data.Fields.Count != 0)
                {
                    List<string> lineQry = new List<string>();
                    foreach(AuditTrailEntry _field in data.Fields)
                    {
                        lineQry.Add(string.Format("(:masterid, :{0}_{1}, :old{0}_{1}, :new{0}_{1}, :idrel{0}_{1}, :tblname{0}_{1})", _field.Name, i));
                        parameters.Add(DataDB.GetNewParameter(_field.Name + "_" + i, EbDbTypes.String, _field.Name));
                        parameters.Add(DataDB.GetNewParameter("new" + _field.Name + "_" + i, EbDbTypes.String, _field.NewVal));
                        parameters.Add(DataDB.GetNewParameter("old" + _field.Name + "_" + i, EbDbTypes.String, _field.OldVal));
                        parameters.Add(DataDB.GetNewParameter("idrel" + _field.Name + "_" + i, EbDbTypes.String, _field.DataRel));
                        parameters.Add(DataDB.GetNewParameter("tblname" + _field.Name + "_" + i, EbDbTypes.String, _field.TableName));
                    }
                    fullQry += string.Format("INSERT INTO eb_audit_lines(masterid, fieldname, oldvalue, newvalue, idrelation, tablename) VALUES {0};", lineQry.Join(","));
                }
                i++;
            }
            return DataDB.DoNonQuery(fullQry, parameters.ToArray());
        }

        public string GetAuditTrail(IDatabase DataDB, Service Service)
        {
            this.RefreshFormData(DataDB, Service);
            Dictionary<string, string> DictVmAll = new Dictionary<string, string>();

            string qry = @"	SELECT 
            	m.id, u.fullname, m.eb_createdby, m.eb_createdat, m.actiontype, l.tablename, l.fieldname, l.idrelation, l.oldvalue, l.newvalue
            FROM 
            	eb_audit_master m, eb_audit_lines l, eb_users u
            WHERE
            	m.id = l.masterid AND m.eb_createdby = u.id AND m.formid = :formid AND m.dataid = :dataid
            ORDER BY
            	m.id DESC, l.tablename, l.idrelation;";
            DbParameter[] parameters = new DbParameter[] {
                     DataDB.GetNewParameter("formid", EbDbTypes.String, this.RefId),
                     DataDB.GetNewParameter("dataid", EbDbTypes.Int32, this.TableRowId)
                 };
            EbDataTable dt = DataDB.DoQuery(qry, parameters);

            Dictionary<int, FormTransaction> Trans = new Dictionary<int, FormTransaction>();
            TableSchema _table = null;
            ColumnSchema _column = null;

            foreach (EbDataRow dr in dt.Rows)
            {
                int m_id = Convert.ToInt32(dr["id"]);
                string new_val = dr["newvalue"].ToString();
                string old_val = dr["oldvalue"].ToString();

                if (_table == null || !_table.TableName.Equals(dr["tablename"].ToString()))
                {
                    _table = this.FormSchema.Tables.FirstOrDefault(tbl => tbl.TableName == dr["tablename"].ToString());
                    if (_table == null)//skipping invalid Audit Trail entry
                        continue;
                }

                if (_table.TableType != WebFormTableTypes.Grid)
                {
                    _column = _table.Columns.FirstOrDefault(col => col.ColumnName == dr["fieldname"].ToString());
                    if (_column == null)//skipping invalid Audit Trail entry
                        continue;
                }

                if (!Trans.ContainsKey(m_id))
                {
                    Trans.Add(m_id, new FormTransaction()
                    {
                        ActionType = Convert.ToInt32(dr["actiontype"]) == 1 ? "Insert" : "Update",
                        CreatedBy = dr["fullname"].ToString(),
                        CreatedById = dr["eb_createdby"].ToString(),
                        CreatedAt = Convert.ToDateTime(dr["eb_createdat"]).ConvertFromUtc(this.UserObj.Preference.TimeZone).ToString(this.UserObj.Preference.GetShortDatePattern() + " " + this.UserObj.Preference.GetShortTimePattern(), CultureInfo.InvariantCulture)
                    });
                }

                string[] ids = dr["idrelation"].ToString().Split('-');

                if (_table.TableType == WebFormTableTypes.Grid)
                {
                    Dictionary<string, string> new_val_dict = new_val == "[null]" ? null : JsonConvert.DeserializeObject<Dictionary<string, string>>(new_val);
                    Dictionary<string, string> old_val_dict = old_val == "[null]" ? null : JsonConvert.DeserializeObject<Dictionary<string, string>>(old_val);
                    if (new_val_dict == null)
                    {
                        new_val_dict = new Dictionary<string, string>();
                        foreach (KeyValuePair<string, string> entry in old_val_dict)
                        {
                            new_val_dict.Add(entry.Key, "[null]");
                        }
                    }
                    else if (old_val_dict == null)
                    {
                        old_val_dict = new Dictionary<string, string>();
                        foreach (KeyValuePair<string, string> entry in new_val_dict)
                        {
                            old_val_dict.Add(entry.Key, "[null]");
                        }
                    }

                    foreach (ColumnSchema __column in _table.Columns)
                    {
                        if (!Trans[m_id].GridTables.ContainsKey(_table.TableName))
                        {
                            Trans[m_id].GridTables.Add(_table.TableName, new FormTransactionTable() { Title = _table.Title });
                            for (int i = 0; i < _table.Columns.Count; i++)
                            {
                                if (_table.Columns.ElementAt(i).Control is EbDGColumn)
                                {
                                    if (_table.Columns.ElementAt(i).Control is EbDGUserControlColumn)
                                        continue;
                                    else
                                        Trans[m_id].GridTables[_table.TableName].ColumnMeta.Add(i, (_table.Columns.ElementAt(i).Control as EbDGColumn).Title);
                                }
                                else
                                    Trans[m_id].GridTables[_table.TableName].ColumnMeta.Add(i, (_table.Columns.ElementAt(i).Control as EbControl).Label);
                            }
                        }
                        int curid = Convert.ToInt32(ids[1]);
                        FormTransactionTable TblRef = Trans[m_id].GridTables[_table.TableName];
                        if (!TblRef.Rows.ContainsKey(curid))
                        {
                            TblRef.Rows.Add(curid, new FormTransactionRow() { });
                        }
                        bool IsModified = false;
                        if (!new_val_dict.ContainsKey(__column.ColumnName))
                            new_val_dict.Add(__column.ColumnName, "[null]");
                        if (!old_val_dict.ContainsKey(__column.ColumnName))
                            old_val_dict.Add(__column.ColumnName, "[null]");

                        if (new_val_dict[__column.ColumnName] != old_val_dict[__column.ColumnName])
                            IsModified = true;
                        string a = old_val_dict[__column.ColumnName];
                        string b = new_val_dict[__column.ColumnName];
                        PreProcessTransationData(DictVmAll, _table, __column, ref a, ref b);
                        TblRef.Rows[curid].Columns.Add(__column.ColumnName, new FormTransactionEntry() { OldValue = a, NewValue = b, IsModified = IsModified });
                    }
                }
                else
                {
                    if (!Trans[m_id].Tables.ContainsKey(_table.TableName))
                        Trans[m_id].Tables.Add(_table.TableName, new FormTransactionRow() { });

                    PreProcessTransationData(DictVmAll, _table, _column, ref old_val, ref new_val);

                    FormTransactionEntry curtrans = new FormTransactionEntry()
                    {
                        OldValue = old_val,
                        NewValue = new_val,
                        IsModified = true,
                        Title = (_column.Control as EbControl).Label
                    };
                    Trans[m_id].Tables[_table.TableName].Columns.Add(_column.ColumnName, curtrans);
                }
            }
            PostProcessTransationData(DataDB, Service, Trans, DictVmAll);

            return JsonConvert.SerializeObject(Trans);
        }

        private void PreProcessTransationData(Dictionary<string, string> DictVmAll, TableSchema _table, ColumnSchema _column, ref string old_val, ref string new_val)
        {
            if (_column.Control is EbPowerSelect || _column.Control is EbDGPowerSelectColumn)//copy vm for dm
            {
                string key = string.Concat(_table.TableName, "_", _column.ColumnName);
                string temp = string.Empty;
                if (!(new_val.Equals(string.Empty) || new_val.Equals("[null]")))/////
                    temp = string.Concat(new_val, ",");
                if (!(old_val.Equals(string.Empty) || old_val.Equals("[null]")))/////
                    temp += string.Concat(old_val, ",");

                if (!temp.Equals(string.Empty))
                {
                    if (!DictVmAll.ContainsKey(key))
                        DictVmAll.Add(key, temp);
                    else
                        DictVmAll[key] = string.Concat(DictVmAll[key], temp);
                }
            }
            else if (_column.Control is EbDate || _column.Control is EbDGDateColumn)
            {
                EbDateType _type = _column.Control is EbDate ? (_column.Control as EbDate).EbDateType : (_column.Control as EbDGDateColumn).EbDateType;
                DateShowFormat _showtype = _column.Control is EbDate ? (_column.Control as EbDate).ShowDateAs_ : (_column.Control as EbDGDateColumn).EbDate.ShowDateAs_;
                if (!old_val.Equals("[null]"))
                {
                    if (_type == EbDateType.Date)
                    {
                        if (_showtype != DateShowFormat.Year_Month)
                            old_val = DateTime.ParseExact(old_val, "yyyy-MM-dd", CultureInfo.InvariantCulture).ToString(this.UserObj.Preference.GetShortDatePattern(), CultureInfo.InvariantCulture);
                    }
                    else if (_type == EbDateType.DateTime)
                    {
                        old_val = DateTime.ParseExact(old_val, "yyyy-MM-dd HH:mm:ss", CultureInfo.InvariantCulture).ToString(this.UserObj.Preference.GetShortDatePattern() + " " + this.UserObj.Preference.GetShortTimePattern(), CultureInfo.InvariantCulture);
                        //old_val = dt.ConvertFromUtc(this.UserObj.Preference.TimeZone);
                    }
                    else if (_type == EbDateType.Time)
                    {
                        old_val = DateTime.ParseExact(old_val, "HH:mm:ss", CultureInfo.InvariantCulture).ToString(this.UserObj.Preference.GetShortTimePattern(), CultureInfo.InvariantCulture);
                        //old_val = dt.ConvertFromUtc(this.UserObj.Preference.TimeZone);
                    }
                }
                if (!new_val.Equals("[null]"))
                {
                    if (_type == EbDateType.Date)
                    {
                        if (_showtype != DateShowFormat.Year_Month)
                            new_val = DateTime.ParseExact(new_val, "yyyy-MM-dd", CultureInfo.InvariantCulture).ToString(this.UserObj.Preference.GetShortDatePattern(), CultureInfo.InvariantCulture);
                    }
                    else if (_type == EbDateType.DateTime)
                    {
                        new_val = DateTime.ParseExact(new_val, "yyyy-MM-dd HH:mm:ss", CultureInfo.InvariantCulture).ToString(this.UserObj.Preference.GetShortDatePattern() + " " + this.UserObj.Preference.GetShortTimePattern(), CultureInfo.InvariantCulture);
                    }
                    else if (_type == EbDateType.Time)
                    {
                        new_val = DateTime.ParseExact(new_val, "HH:mm:ss", CultureInfo.InvariantCulture).ToString(this.UserObj.Preference.GetShortTimePattern(), CultureInfo.InvariantCulture);
                    }
                }
            }
        }

        private void PostProcessTransationData(IDatabase DataDB, Service Service, Dictionary<int, FormTransaction> Trans, Dictionary<string, string> DictVmAll)
        {
            string Qry = string.Empty;
            foreach (TableSchema _table in this.FormSchema.Tables)
            {
                foreach (ColumnSchema _column in _table.Columns)
                {
                    if (_column.Control is EbPowerSelect || _column.Control is EbDGPowerSelectColumn)
                    {
                        string key = string.Concat(_table.TableName, "_", _column.ColumnName);
                        if (DictVmAll.ContainsKey(key))
                        {
                            if (_column.Control is EbPowerSelect)
                                Qry += (_column.Control as EbPowerSelect).GetDisplayMembersQuery(DataDB, Service, DictVmAll[key].Substring(0, DictVmAll[key].Length - 1));
                            else
                                Qry += (_column.Control as EbDGPowerSelectColumn).GetDisplayMembersQuery(DataDB, Service, DictVmAll[key].Substring(0, DictVmAll[key].Length - 1));
                        }
                    }
                }
            }

            EbDataSet ds = DataDB.DoQueries(Qry);

            Dictionary<string, Dictionary<string, List<string>>> DictDm = new Dictionary<string, Dictionary<string, List<string>>>();
            foreach (string key in DictVmAll.Keys)
                DictDm.Add(key, new Dictionary<string, List<string>>());

            for (int i = 0; i < ds.Tables.Count; i++)
            {
                foreach (EbDataRow row in ds.Tables[i].Rows)
                {
                    List<string> list = new List<string>();
                    for (int j = 1; j < row.Count; j++)
                    {
                        list.Add(row[j].ToString());
                    }
                    if (!DictDm.ElementAt(i).Value.ContainsKey(row[0].ToString()))
                        DictDm.ElementAt(i).Value.Add(row[0].ToString(), list);
                }
            }

            foreach (KeyValuePair<int, FormTransaction> trans in Trans)
            {
                foreach (KeyValuePair<string, FormTransactionRow> table in trans.Value.Tables)
                {
                    ReplaceVmWithDm(table.Value.Columns, DictDm, table.Key);
                }

                foreach (KeyValuePair<string, FormTransactionTable> table in trans.Value.GridTables)
                {
                    foreach (KeyValuePair<int, FormTransactionRow> row in table.Value.Rows)
                    {
                        ReplaceVmWithDm(row.Value.Columns, DictDm, table.Key);
                    }
                }
            }
        }

        private void ReplaceVmWithDm(Dictionary<string, FormTransactionEntry> Columns, Dictionary<string, Dictionary<string, List<string>>> DictDm, string tablename)
        {
            foreach (KeyValuePair<string, FormTransactionEntry> column in Columns)
            {
                if (DictDm.ContainsKey(tablename + "_" + column.Key))
                {
                    if (column.Value.OldValue != "[null]")
                    {
                        string[] vm_arr = column.Value.OldValue.Split(',');
                        string dm = string.Empty;
                        for (int i = 0; i < vm_arr.Length; i++)
                        {
                            List<string> dmlist = DictDm[tablename + "_" + column.Key][vm_arr[i]];
                            foreach (string d in dmlist)
                            {
                                dm += " " + d;
                            }
                            if (i < vm_arr.Length - 1)
                                dm += "<br>";
                        }
                        column.Value.OldValue = dm;
                    }
                    if (column.Value.NewValue != "[null]")
                    {
                        string[] vm_arr = column.Value.NewValue.Split(',');
                        string dm = string.Empty;
                        for (int i = 0; i < vm_arr.Length; i++)
                        {
                            List<string> dmlist = DictDm[tablename + "_" + column.Key][vm_arr[i]];
                            foreach (string d in dmlist)
                            {
                                dm += " " + d;
                            }
                            if (i < vm_arr.Length - 1)
                                dm += "<br>";
                        }
                        column.Value.NewValue = dm;
                    }
                }
            }
        }

        public Dictionary<int, List<string>> GetLocBasedPermissions()
        {
            Dictionary<int, List<string>> _perm = new Dictionary<int, List<string>>();
            //New View Edit Delete Cancel Print AuditTrail

            foreach (int locid in this.SolutionObj.Locations.Keys)
            {
                List<string> _temp = new List<string>();
                foreach (EbOperation op in Operations.Enumerator)
                {
                    if (this.HasPermission(op.Name, locid))
                        _temp.Add(op.Name);
                }
                _perm.Add(locid, _temp);
            }
            return _perm;
        }

        private bool HasPermission(string ForWhat, int LocId)
        {
            if (this.UserObj.Roles.Contains(SystemRoles.SolutionOwner.ToString()) ||
                this.UserObj.Roles.Contains(SystemRoles.SolutionAdmin.ToString()) ||
                this.UserObj.Roles.Contains(SystemRoles.SolutionPM.ToString()))
                return true;

            EbOperation Op = EbWebForm.Operations.Get(ForWhat);
            if (!Op.IsAvailableInWeb)
                return false;

            try
            {
                string Ps = string.Concat(this.RefId.Split("-")[2].PadLeft(2, '0'), '-', this.RefId.Split("-")[3].PadLeft(5, '0'), '-', Op.IntCode.ToString().PadLeft(2, '0'));
                string t = this.UserObj.Permissions.FirstOrDefault(p => p.Substring(p.IndexOf("-") + 1).Equals(Ps + ":" + LocId) ||
                            (p.Substring(p.IndexOf("-") + 1, 11).Equals(Ps) && p.Substring(p.LastIndexOf(":") + 1).Equals("-1")));
                if (!t.IsNullOrEmpty())
                    return true;
            }
            catch (Exception e)
            {
                Console.WriteLine("Exception when checking user permission(EbWebForm -> HasPermission): " + e.Message);
            }

            return false;
        }

        private WebFormSchema GetWebFormSchema()
        {
            WebFormSchema _formSchema = new WebFormSchema();
            _formSchema.FormName = this.Name;
            _formSchema.MasterTable = this.TableName.ToLower();
            _formSchema = GetWebFormSchemaRec(_formSchema, this, this.TableName.ToLower());
            this.FormSchema = _formSchema;
            return _formSchema;
        }

        private WebFormSchema GetWebFormSchemaRec(WebFormSchema _schema, EbControlContainer _container, string _parentTable)
        {
            IEnumerable<EbControl> _flatControls = _container.Controls.Get1stLvlControls();
            string curTbl = _container.TableName.ToLower();
            TableSchema _table = _schema.Tables.FirstOrDefault(tbl => tbl.TableName == curTbl);
            if (_table == null)
            {
                if (_container is EbApproval)
                    _table = new TableSchema { TableName = curTbl, ParentTable = _parentTable, TableType = WebFormTableTypes.Approval, Title = _container.Label, ContainerName = _container.Name };
                else if (_container is EbDataGrid)
                    _table = new TableSchema { TableName = curTbl, ParentTable = _parentTable, TableType = WebFormTableTypes.Grid, Title = _container.Label, ContainerName = _container.Name };
                else
                    _table = new TableSchema { TableName = curTbl, ParentTable = _parentTable, TableType = WebFormTableTypes.Normal, ContainerName = _container.Name };
                _schema.Tables.Add(_table);
            }
            foreach (EbControl control in _flatControls)
            {
                if (!control.DoNotPersist || control.IsSysControl)
                {
                    if (control is EbFileUploader)
                        _schema.ExtendedControls.Add(control);
                    else if (control is EbProvisionUser)
                    {
                        (control as EbProvisionUser).VirtualTable = curTbl;
                        int idx = _schema.ExtendedControls.FindIndex(e => e is EbProvisionLocation);
                        if (idx >= 0)
                            (control as EbProvisionUser).AddLocConstraint = true;
                        _schema.ExtendedControls.Add(control);
                    }
                    else if (control is EbProvisionLocation)
                    {
                        (control as EbProvisionLocation).VirtualTable = curTbl;
                        foreach (object temp in _schema.ExtendedControls.FindAll(e => e is EbProvisionUser))
                            (temp as EbProvisionUser).AddLocConstraint = true;
                        _schema.ExtendedControls.Add(control);
                    }
                    else if (control is EbDGUserControlColumn)
                    {
                        foreach (EbControl _ctrl in (control as EbDGUserControlColumn).Columns)
                        {
                            _table.Columns.Add(new ColumnSchema { ColumnName = _ctrl.Name, EbDbType = (int)_ctrl.EbDbType, Control = _ctrl });
                        }
                    }
                    else if(control is EbSysLocation && !control.IsDisable)
                    {
                        this.IsLocEditable = true;
                        _table.Columns.Add(new ColumnSchema { ColumnName = control.Name, EbDbType = (int)control.EbDbType, Control = control });
                    }
                    else
                        _table.Columns.Add(new ColumnSchema { ColumnName = control.Name, EbDbType = (int)control.EbDbType, Control = control });
                }
            }

            foreach (EbControl _control in _container.Controls)
            {
                if (_control is EbControlContainer)
                {
                    EbControlContainer Container = _control as EbControlContainer;
                    string __parentTbl = _parentTable;
                    if (Container.TableName.IsNullOrEmpty())
                        Container.TableName = curTbl;
                    else
                        __parentTbl = curTbl;
                    _schema = GetWebFormSchemaRec(_schema, Container, __parentTbl);
                }
            }
            return _schema;
        }

        public void AfterRedisGet(Service service)
        {
            EbFormHelper.AfterRedisGet(this, service);
            this.GetWebFormSchema();
            EbFormHelper.InitDataPushers(this, service);            
        }

        public override void AfterRedisGet(RedisClient Redis, IServiceClient client)
        {
            EbFormHelper.AfterRedisGet(this, Redis, client, this.IsRenderMode);
            this.GetWebFormSchema();
            EbFormHelper.InitDataPushers(this, Redis, client);           
        }

        public override List<string> DiscoverRelatedRefids()
        {
            return EbFormHelper.DiscoverRelatedRefids(this);
        }
        public override void ReplaceRefid(Dictionary<string, string> RefidMap)
        {
            EbFormHelper.ReplaceRefid(this, RefidMap);
        }
    }    

    public class EbControlWrapper
    {
        public string TableName { get; set; }

        public string Path { get; set; }

        public string Root { get; set; }

        public EbControl Control { get; set; }
    }

    public class EbSQLValidator : EbValidator
    {
        public EbSQLValidator() { }

        [EnableInBuilder(BuilderType.WebForm)]
        [PropertyEditor(PropertyEditorType.ScriptEditorCS)]
        public override EbScript Script { get; set; }
    }

    public class EbRoutines : EbValidator
    {
        public EbRoutines() { }

        [EnableInBuilder(BuilderType.WebForm)]
        [PropertyEditor(PropertyEditorType.ScriptEditorJS, PropertyEditorType.ScriptEditorCS)]
        public override EbScript Script { get; set; }

        [EnableInBuilder(BuilderType.WebForm)]
        public bool IsDisabledOnNew { get; set; }

        [EnableInBuilder(BuilderType.WebForm)]
        public bool IsDisabledOnEdit { get; set; }

        public override bool IsWarningOnly { get; set; }

        public override string FailureMSG { get; set; }

        public override bool IsDisabled { get; set; }
    }
    
    [UsedWithTopObjectParent(typeof(EbObject))]
    [EnableInBuilder(BuilderType.WebForm)]
    public class EbDataPusher
    {
        public EbDataPusher() { }

        [PropertyEditor(PropertyEditorType.ObjectSelector)]
        [EnableInBuilder(BuilderType.WebForm)]
        [OSE_ObjectTypes(EbObjectTypes.iWebForm)]
        public string FormRefId { get; set; }

        [PropertyEditor(PropertyEditorType.String)]
        [EnableInBuilder(BuilderType.WebForm)]
        public string Json { get; set; }
        
        [HideInPropertyGrid]
        [EnableInBuilder(BuilderType.WebForm)]
        public string EbSid { get; set; }
        
        [EnableInBuilder(BuilderType.WebForm)]
        [Alias("Multi push id")]
        public string Name { get; set; }

        [PropertyEditor(PropertyEditorType.String)]
        [EnableInBuilder(BuilderType.WebForm)]
        public string PushOnlyIf { get; set; }

        [PropertyEditor(PropertyEditorType.String)]
        [EnableInBuilder(BuilderType.WebForm)]
        public string SkipLineItemIf { get; set; }

        public EbWebForm WebForm { get; set; }
    }

    public class EbDataPusherConfig
    {
        public EbDataPusherConfig() { }

        public string SourceTable { get; set; }

        public string MultiPushId { get; set; }

        public bool AllowPush { get; set; }

        public int SourceRecId { get; set; }
    }

    public class FormTransaction
    {
        public string CreatedBy { get; set; }

        public string CreatedById { get; set; }

        public string CreatedAt { get; set; }

        public string ActionType { get; set; }

        public bool MissingEntry { get; set; }

        public Dictionary<string, FormTransactionRow> Tables { get; set; }//Key = Table name

        public Dictionary<string, FormTransactionTable> GridTables { get; set; }//Key = Table name

        public FormTransaction()
        {
            this.Tables = new Dictionary<string, FormTransactionRow>();
            this.GridTables = new Dictionary<string, FormTransactionTable>();
        }
    }

    public class FormTransactionTable
    {
        public Dictionary<int, FormTransactionRow> Rows { get; set; }//Key = Row id

        public Dictionary<int, string> ColumnMeta { get; set; }

        public string Title { get; set; }

        public FormTransactionTable()
        {
            this.Rows = new Dictionary<int, FormTransactionRow>();
            this.ColumnMeta = new Dictionary<int, string>();
        }
    }

    public class FormTransactionRow
    {
        public Dictionary<string, FormTransactionEntry> Columns { get; set; }//Key = Column name

        public FormTransactionRow()
        {
            this.Columns = new Dictionary<string, FormTransactionEntry>();
        }

        public bool IsRowModified
        {
            get
            {
                foreach (KeyValuePair<string, FormTransactionEntry> col in this.Columns)
                {
                    if (col.Value.IsModified)
                        return true;
                }
                return false;
            }
        }
    }

    public class FormTransactionEntry
    {
        public string OldValue { get; set; }

        public string NewValue { get; set; }

        public string Title { get; set; }

        public bool IsModified { get; set; }
    }
}
