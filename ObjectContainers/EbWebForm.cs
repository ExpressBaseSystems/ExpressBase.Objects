using ExpressBase.Common;
using ExpressBase.Common.Data;
using ExpressBase.Common.Enums;
using ExpressBase.Common.Extensions;
using ExpressBase.Common.LocationNSolution;
using ExpressBase.Common.Objects;
using ExpressBase.Common.Objects.Attributes;
using ExpressBase.Common.Structures;
using ExpressBase.Objects.WebFormRelated;
using ExpressBase.Objects.Objects;
using ExpressBase.Objects.Objects.DVRelated;
using ExpressBase.Objects.ServiceStack_Artifacts;
using ExpressBase.Security;
using Microsoft.CodeAnalysis.CSharp.Scripting;
using Microsoft.CodeAnalysis.Scripting;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using ServiceStack;
using ServiceStack.RabbitMq;
using ServiceStack.Redis;
using System;
using System.Collections.Generic;
using System.Data.Common;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text.RegularExpressions;

namespace ExpressBase.Objects
{
    [HideInToolBox]
    [EnableInBuilder(BuilderType.WebForm)]
    [BuilderTypeEnum(BuilderType.WebForm)]
    public class EbWebForm : EbForm
    {
        public EbWebForm()
        {
            this.DisableDelete = new List<EbSQLValidator>();
            this.DisableCancel = new List<EbSQLValidator>();
            this.BeforeSaveRoutines = new List<EbRoutines>();
            this.AfterSaveRoutines = new List<EbRoutines>();
            this.DataPushers = new List<EbDataPusher>();
            this.TitleExpression = new EbScript();
            this.PrintDocs = new List<ObjectBasicInfo>();
        }

        public override int TableRowId { get; set; }

        public WebformData FormData { get; set; }

        public WebformData FormDataBackup { get; set; }

        public WebFormSchema FormSchema { get; set; }

        public User UserObj { get; set; }

        public int LocationId { get; set; }

        public Eb_Solution SolutionObj { get; set; }

        public FormAsGlobal FormGlobals { get; set; }

        public bool IsLocEditable { get; set; }

        public bool ExeDataPusher { get; set; }

        public EbDataPusherConfig DataPusherConfig { get; set; }

        public static EbOperations Operations = WFOperations.Instance;

        internal DbConnection DbConnection { get; set; }

        private DbTransaction DbTransaction { get; set; }

        [PropertyGroup("Events")]
        [EnableInBuilder(BuilderType.WebForm)]
        [PropertyEditor(PropertyEditorType.Collection)]
        public List<EbSQLValidator> DisableDelete { get; set; }

        [PropertyGroup("Behavior")]
        [EnableInBuilder(BuilderType.WebForm)]
        public WebFormAfterSaveModes FormModeAfterSave { get; set; }

        [PropertyGroup("Events")]
        [EnableInBuilder(BuilderType.WebForm)]
        [PropertyEditor(PropertyEditorType.Collection)]
        public List<EbSQLValidator> DisableCancel { get; set; }

        [PropertyGroup("Events")]
        [EnableInBuilder(BuilderType.WebForm)]
        [PropertyEditor(PropertyEditorType.Collection)]
        public List<EbRoutines> BeforeSaveRoutines { get; set; }

        [PropertyGroup("Events")]
        [EnableInBuilder(BuilderType.WebForm)]
        [PropertyEditor(PropertyEditorType.Collection)]
        public List<EbRoutines> AfterSaveRoutines { get; set; }

        [PropertyGroup("Miscellaneous")]
        [EnableInBuilder(BuilderType.WebForm)]
        [PropertyEditor(PropertyEditorType.ObjectSelector)]
        [OSE_ObjectTypes(EbObjectTypes.iReport)]
        [HideInPropertyGrid]
        public string PrintDoc { get; set; }//deprecated 

        [PropertyGroup("Miscellaneous")]
        [EnableInBuilder(BuilderType.WebForm)]
        [PropertyEditor(PropertyEditorType.ObjectSelectorCollection)]
        [OSE_ObjectTypes(EbObjectTypes.iReport)]
        public List<ObjectBasicInfo> PrintDocs { get; set; }

        [EnableInBuilder(BuilderType.WebForm)]
        [HideInPropertyGrid]
        public string AutoGeneratedVizRefId { get; set; }

        [Alias("Auto deploy table view")]
        [EnableInBuilder(BuilderType.WebForm)]
        public bool AutoDeployTV { get; set; }

        [PropertyGroup("Data")]
        [EnableInBuilder(BuilderType.WebForm)]
        [PropertyEditor(PropertyEditorType.Collection)]
        public List<EbDataPusher> DataPushers { get; set; }

        [PropertyGroup("Identity")]
        [EnableInBuilder(BuilderType.WebForm)]
        [PropertyEditor(PropertyEditorType.ScriptEditorJS)]
        [HelpText("Define Title Expression")]
        public EbScript TitleExpression { get; set; }

        public override string GetHead()
        {
            string head = string.Empty;

            foreach (EbControl c in this.Controls)
                head += c.GetHead();

            return head;
        }

        public override string GetHtml()
        {
            string html = "<form id='@ebsid@' isrendermode='@rmode@' ebsid='@ebsid@' class='formB-box form-buider-form ebcont-ctrl' eb-form='true'  eb-root-obj-container ui-inp eb-type='WebForm' @tabindex@>";

            foreach (EbControl c in this.Controls)
                html += c.GetHtml();

            html += "</form>";

            return html
                .Replace("@name@", this.Name)
                .Replace("@ebsid@", this.EbSid)
                .Replace("@rmode@", IsRenderMode.ToString().ToLower())
                .Replace("@tabindex@", IsRenderMode ? string.Empty : " tabindex='1'");
        }

        //Operations to be performed before form object save - table name required, table name repetition, calculate dependency
        public override void BeforeSave(IServiceClient serviceClient, IRedisClient redis)
        {
            BeforeSaveHelper.BeforeSave(this, serviceClient, redis);
        }

        public void BeforeSave(Service service)
        {
            BeforeSaveHelper.BeforeSave(this, null, null);
        }

        //get all control container as flat structure
        public List<EbControlContainer> GetAllContainers(EbControlContainer _container, List<EbControlContainer> _list = null)
        {
            if (_list == null)
                _list = new List<EbControlContainer>();
            _list.Add(_container);
            foreach (EbControl c in this.Controls)
            {
                if (c is EbControlContainer)
                {
                    _list = GetAllContainers(_container, _list);
                }
            }
            return _list;
        }

        //import data - using data reader in dg - from another form linked in ps 
        public void ImportData(IDatabase DataDB, Service Service, List<Param> Param, string Trigger)
        {
            EbControl[] Allctrls = this.Controls.FlattenAllEbControls();
            EbControl TriggerCtrl = null;
            List<EbDataGrid> DGs = new List<EbDataGrid>();
            for (int i = 0; i < Allctrls.Length; i++)
            {
                if (Allctrls[i].Name.Equals(Trigger))
                    TriggerCtrl = Allctrls[i];

                if (Allctrls[i] is EbDataGrid)
                    DGs.Add(Allctrls[i] as EbDataGrid);
            }
            if (TriggerCtrl == null)
                return;

            this.FormData = new WebformData();

            if (TriggerCtrl.DependedDG != null && TriggerCtrl.DependedDG.Count > 0)
            {
                foreach (string dgName in TriggerCtrl.DependedDG)
                {
                    EbDataGrid _dg = DGs.Find(e => e.Name == dgName);
                    if (_dg == null)
                        break;
                    TableSchema _sc = this.FormSchema.Tables.Find(tbl => tbl.TableName == _dg.TableName);
                    if (_sc == null)
                        break;

                    EbDataReader dataReader = Service.Redis.Get<EbDataReader>(_dg.DataSourceId);
                    if (dataReader == null)
                    {
                        EbObjectParticularVersionResponse result = Service.Gateway.Send<EbObjectParticularVersionResponse>(new EbObjectParticularVersionRequest { RefId = _dg.DataSourceId });
                        dataReader = EbSerializers.Json_Deserialize(result.Data[0].Json);
                        Service.Redis.Set<EbDataReader>(_dg.DataSourceId, dataReader);
                    }
                    foreach (Param item in dataReader.InputParams)
                    {
                        foreach (Param _p in Param)
                        {
                            if (item.Name == _p.Name)
                                _p.Type = item.Type;
                        }
                    }
                    DataSourceDataSetResponse response = Service.Gateway.Send<DataSourceDataSetResponse>(new DataSourceDataSetRequest { RefId = _dg.DataSourceId, Params = Param });

                    SingleTable Table = new SingleTable();
                    Dictionary<EbDGPowerSelectColumn, string> psDict = new Dictionary<EbDGPowerSelectColumn, string>();

                    int RowId = 0;
                    foreach (EbDataRow _row in response.DataSet.Tables[0].Rows)
                    {
                        SingleRow Row = new SingleRow();
                        //if (response.DataSet.Tables[0].Columns["id"] != null)
                        //    Row.RowId = Convert.ToInt32(response.DataSet.Tables[0].Columns["id"]);// assuming id is RowId
                        //else
                        Row.RowId = --RowId;
                        foreach (ColumnSchema _column in _sc.Columns)
                        {
                            EbDataColumn dc = response.DataSet.Tables[0].Columns[_column.ColumnName];
                            if (dc != null && !_row.IsDBNull(dc.ColumnIndex))
                            {
                                object _unformattedData = _row[dc.ColumnIndex];
                                object _formattedData = _unformattedData.ToString();
                                string _displayMember = null;
                                if (_column.Control is EbDGDateColumn)
                                {
                                    EbDateType _type = (_column.Control as EbDGDateColumn).EbDateType;
                                    DateTime dt = Convert.ToDateTime(_unformattedData);
                                    if (_type == EbDateType.Date)
                                    {
                                        DateShowFormat _showtype = (_column.Control as EbDGDateColumn).EbDate.ShowDateAs_;
                                        if (_showtype == DateShowFormat.Year_Month)
                                        {
                                            _formattedData = dt.ToString("MM/yyyy", CultureInfo.InvariantCulture);
                                            _displayMember = dt.ToString("MM/yyyy", CultureInfo.InvariantCulture);
                                        }
                                        else
                                        {
                                            _formattedData = dt.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture);
                                            _displayMember = dt.ToString(this.UserObj.Preference.GetShortDatePattern(), CultureInfo.InvariantCulture);
                                        }
                                    }
                                    else if (_type == EbDateType.DateTime)
                                    {
                                        DateTime __dt = dt.ConvertFromUtc(this.UserObj.Preference.TimeZone);
                                        _formattedData = __dt.ToString("yyyy-MM-dd HH:mm:ss", CultureInfo.InvariantCulture);
                                        _displayMember = __dt.ToString(this.UserObj.Preference.GetShortDatePattern() + " " + this.UserObj.Preference.GetShortTimePattern(), CultureInfo.InvariantCulture);
                                    }
                                    else
                                    {
                                        DateTime __dt = dt.ConvertFromUtc(this.UserObj.Preference.TimeZone);
                                        _formattedData = __dt.ToString("HH:mm:ss", CultureInfo.InvariantCulture);
                                        _displayMember = __dt.ToString(this.UserObj.Preference.GetShortTimePattern(), CultureInfo.InvariantCulture);
                                    }
                                }
                                else if (_column.Control is EbDGPowerSelectColumn)
                                {
                                    if (!_formattedData.ToString().IsNullOrEmpty())
                                    {
                                        if (!psDict.ContainsKey(_column.Control as EbDGPowerSelectColumn))
                                        {
                                            psDict.Add(_column.Control as EbDGPowerSelectColumn, _formattedData.ToString());
                                        }
                                        else
                                        {
                                            psDict[_column.Control as EbDGPowerSelectColumn] += "," + _formattedData.ToString();
                                        }
                                    }

                                }

                                Row.Columns.Add(new SingleColumn()
                                {
                                    Name = _column.ColumnName,
                                    Type = (int)_column.EbDbType,
                                    Value = _formattedData,
                                    Control = _column.Control,
                                    F = _displayMember ?? (_formattedData == null ? string.Empty : _formattedData.ToString()),
                                    ObjType = _column.Control.ObjType
                                });
                            }
                            else
                            {
                                Row.Columns.Add(new SingleColumn()
                                {
                                    Name = _column.ColumnName,
                                    Type = (int)_column.EbDbType,
                                    Value = null
                                });
                            }
                        }
                        Table.Add(Row);
                    }
                    this.FormData.MultipleTables.Add(_dg.TableName, Table);

                    Dictionary<string, string> QrsDict = new Dictionary<string, string>();
                    foreach (KeyValuePair<EbDGPowerSelectColumn, string> psItem in psDict)
                    {
                        string t = psItem.Key.GetSelectQuery(DataDB, Service, psItem.Value);
                        QrsDict.Add(psItem.Key.EbSid, t);
                    }
                    if (QrsDict.Count > 0)
                    {
                        EbDataSet dataset = DataDB.DoQueries(string.Join(" ", QrsDict.Select(d => d.Value)));
                        int i = 0;
                        foreach (KeyValuePair<string, string> item in QrsDict)
                        {
                            SingleTable Tbl = new SingleTable();
                            this.GetFormattedData(dataset.Tables[i++], Tbl);
                            //this.FormData.ExtendedTables.Add(item.Key, Tbl);//ps//dup for backward compatibility
                            this.FormData.PsDm_Tables.Add(item.Key, Tbl);
                        }
                        this.PostFormatFormData();
                    }
                }
            }

            else if (TriggerCtrl is EbPowerSelect && !(TriggerCtrl as EbPowerSelect).DataImportId.IsNullOrEmpty())
            {
                Param[0].Type = ((int)EbDbTypes.Int32).ToString();
                EbWebForm _form = Service.Redis.Get<EbWebForm>((TriggerCtrl as EbPowerSelect).DataImportId);
                if (_form == null)
                {
                    EbObjectParticularVersionResponse result = Service.Gateway.Send<EbObjectParticularVersionResponse>(new EbObjectParticularVersionRequest { RefId = (TriggerCtrl as EbPowerSelect).DataImportId });
                    _form = EbSerializers.Json_Deserialize(result.Data[0].Json);
                    Service.Redis.Set<EbWebForm>((TriggerCtrl as EbPowerSelect).DataImportId, _form);
                }
                _form.AfterRedisGet(Service);
                _form.RefId = (TriggerCtrl as EbPowerSelect).DataImportId;
                _form.UserObj = this.UserObj;
                _form.SolutionObj = this.SolutionObj;
                _form.TableRowId = Param[0].ValueTo;
                _form.GetImportData(DataDB, Service, this.Name);
                this.FormData = _form.FormData;
            }
        }

        public void GetImportData(IDatabase DataDB, Service Service, string Destination)
        {
            this.RefreshFormData(DataDB, Service);

            foreach (TableSchema _table in this.FormSchema.Tables)
            {
                if (this.FormData.MultipleTables.ContainsKey(_table.TableName))
                {
                    SingleTable Table = this.FormData.MultipleTables[_table.TableName];
                    this.FormData.MultipleTables.Remove(_table.TableName);
                    if (_table.TableName == this.FormSchema.MasterTable)
                    {
                        this.FormData.MultipleTables.Add(Destination, Table);
                        this.FormData.MasterTable = Destination;
                    }
                    else
                    {
                        if (_table.TableType == WebFormTableTypes.Normal)
                        {
                            Table[0].Columns.RemoveAll(e => e.Name == "id");
                            this.FormData.MultipleTables[this.FormData.MasterTable][0].Columns.AddRange(Table[0].Columns);
                        }
                        else
                        {
                            this.FormData.MultipleTables.Add(_table.ContainerName, Table);
                        }
                    }
                }
            }
        }

        public string ExecuteSqlValueExpression(IDatabase DataDB, Service Service, List<Param> Param, string Trigger)
        {
            EbControl[] Allctrls = this.Controls.FlattenAllEbControls();
            EbControl TriggerCtrl = null;
            string val = string.Empty;
            for (int i = 0; i < Allctrls.Length; i++)
            {
                if (Allctrls[i].Name.Equals(Trigger))
                {
                    TriggerCtrl = Allctrls[i];
                    break;
                }
            }
            if (TriggerCtrl != null && TriggerCtrl.ValueExpr != null && TriggerCtrl.ValueExpr.Lang == ScriptingLanguage.SQL && !TriggerCtrl.ValueExpr.Code.IsNullOrEmpty())
            {
                DbParameter[] parameters = new DbParameter[Param.Count];
                for (int i = 0; i < Param.Count; i++)
                {
                    parameters[i] = DataDB.GetNewParameter(Param[i].Name, (EbDbTypes)Convert.ToInt32(Param[i].Type), Param[i].ValueTo);
                }
                EbDataTable table = DataDB.DoQuery(TriggerCtrl.ValueExpr.Code, parameters);
                if (table.Rows.Count > 0)
                    val = table.Rows[0][0].ToString();
            }
            return val;
        }

        public string GetDataPusherJson()
        {
            JObject Obj = new JObject();

            foreach (TableSchema _table in this.FormSchema.Tables)
            {
                JObject o = new JObject();
                foreach (ColumnSchema _column in _table.Columns)
                {
                    o[_column.ColumnName] = "value";
                }
                JArray array = new JArray();
                array.Add(o);
                Obj[_table.TableName] = array;
            }
            return Obj.ToString();
        }

        //merge formdata and webform object
        public void MergeFormData()
        {
            MergeFormDataInner(this);
        }

        private void MergeFormDataInner(EbControlContainer _container)
        {
            if (!FormData.MultipleTables.ContainsKey(_container.TableName))
            {
                return;
            }
            foreach (EbControl c in _container.Controls)
            {
                if (c is EbDataGrid)
                {
                    if (!FormData.MultipleTables.ContainsKey((c as EbDataGrid).TableName))
                        continue;
                    foreach (EbControl control in (c as EbDataGrid).Controls)
                    {
                        if (!control.DoNotPersist)
                        {
                            List<object> val = new List<object>();
                            for (int i = 0; i < FormData.MultipleTables[(c as EbDataGrid).TableName].Count; i++)
                            {
                                if (FormData.MultipleTables[(c as EbDataGrid).TableName][i][control.Name] != null)
                                {
                                    val.Add(FormData.MultipleTables[(c as EbDataGrid).TableName][i][control.Name]);
                                    FormData.MultipleTables[(c as EbDataGrid).TableName][i].SetEbDbType(control.Name, control.EbDbType);
                                    FormData.MultipleTables[(c as EbDataGrid).TableName][i].SetControl(control.Name, control);
                                }
                            }
                            control.ValueFE = val;
                        }
                    }
                }
                else if (c is EbApproval)
                {
                    if (!c.DoNotPersist)
                    {
                        EbApproval ebApproval = (c as EbApproval);
                        if (FormData.MultipleTables.ContainsKey(ebApproval.TableName))
                        {
                            string lastStage = (ebApproval.FormStages[ebApproval.FormStages.Count - 1] as EbFormStage).Name;
                            string stage = Convert.ToString(FormData.MultipleTables[ebApproval.TableName][0]["stage"]);
                            int status = Convert.ToInt32(FormData.MultipleTables[ebApproval.TableName][0]["status"]);
                            if (lastStage.Equals(stage) && status == 1)
                            {
                                this.AfterSaveRoutines.AddRange(ebApproval.OnApprovalRoutines);
                            }
                        }
                    }
                }
                else if (c is EbControlContainer)
                {
                    if (string.IsNullOrEmpty((c as EbControlContainer).TableName))
                        (c as EbControlContainer).TableName = _container.TableName;
                    MergeFormDataInner(c as EbControlContainer);
                }
                else if (c is EbAutoId)
                {
                    Dictionary<string, string> dict = new Dictionary<string, string>();
                    dict.Add("{currentlocation.id}", this.LocationId.ToString());
                    dict.Add("{user.id}", this.UserObj.UserId.ToString());
                    dict.Add("{currentlocation.shortname}", this.SolutionObj.Locations[this.LocationId].ShortName);

                    MatchCollection mc = Regex.Matches((c as EbAutoId).Pattern.sPattern, @"{(.*?)}");
                    foreach (Match m in mc)
                    {
                        if (dict.ContainsKey(m.Value))
                            (c as EbAutoId).Pattern.sPattern = (c as EbAutoId).Pattern.sPattern.Replace(m.Value, dict[m.Value]);
                    }
                    FormData.MultipleTables[_container.TableName][0].SetEbDbType(c.Name, c.EbDbType);
                    FormData.MultipleTables[_container.TableName][0].SetControl(c.Name, c);
                    FormData.MultipleTables[_container.TableName][0][c.Name] = (c as EbAutoId).Pattern.sPattern;
                    c.ValueFE = FormData.MultipleTables[_container.TableName][0][c.Name];
                }
                else if (!(c is EbFileUploader))
                {
                    if (!c.DoNotPersist)
                    {
                        if (FormData.MultipleTables[_container.TableName][0].GetColumn(c.Name) != null)
                        {
                            c.ValueFE = FormData.MultipleTables[_container.TableName][0][c.Name];
                            FormData.MultipleTables[_container.TableName][0].SetEbDbType(c.Name, c.EbDbType);
                            FormData.MultipleTables[_container.TableName][0].SetControl(c.Name, c);
                        }
                    }
                }
            }
        }

        public void GetEmptyModel()
        {
            this.FormData = new WebformData() { MasterTable = this.FormSchema.MasterTable };            
            foreach (TableSchema _table in this.FormSchema.Tables)
            {
                if (_table.TableType == WebFormTableTypes.Normal)
                {
                    SingleRow Row = new SingleRow();
                    SingleTable Table = new SingleTable();
                    foreach (ColumnSchema _column in _table.Columns)
                    {
                        Row.Columns.Add(_column.Control.GetDefaultSingleColumn(this.UserObj, this.SolutionObj));
                    }
                    Table.Add(Row);
                    this.FormData.MultipleTables.Add(_table.TableName, Table);
                }               
            }
            this.GetDGsEmptyModel();
        }

        private void GetDGsEmptyModel()
        {
            foreach (TableSchema _table in this.FormSchema.Tables)
            {
                if (_table.TableType == WebFormTableTypes.Grid)
                {
                    SingleRow Row = new SingleRow();
                    Row.Columns.Add(new SingleColumn()
                    {
                        Name = "eb_row_num",
                        Type = (int)EbDbTypes.Decimal,
                        Value = 0
                    });
                    foreach (ColumnSchema _column in _table.Columns)
                    {
                        Row.Columns.Add(_column.Control.GetDefaultSingleColumn(this.UserObj, this.SolutionObj));
                    }
                    this.FormData.DGsRowDataModel.Add(_table.TableName, Row);
                }
            }
        }

        private void GetFormattedDataApproval(EbDataTable dataTable, SingleTable Table)
        {
            foreach (EbDataRow dataRow in dataTable.Rows)
            {
                DateTime dt = Convert.ToDateTime(dataRow["eb_created_at"]);
                Table.Add(new SingleRow
                {
                    Columns = new List<SingleColumn>
                {
                    new SingleColumn { Name = "id", Type = (int)EbDbTypes.Decimal, Value = Convert.ToInt32(dataRow["id"])},
                    new SingleColumn { Name = "stage", Type = (int)EbDbTypes.String, Value = dataRow["stage"].ToString()},
                    new SingleColumn { Name = "approver_role", Type = (int)EbDbTypes.String, Value = dataRow["approver_role"].ToString()},
                    new SingleColumn { Name = "status", Type = (int)EbDbTypes.Decimal, Value = Convert.ToInt32(dataRow["status"])},
                    new SingleColumn { Name = "remarks", Type = (int)EbDbTypes.String, Value = dataRow["remarks"].ToString()},
                    new SingleColumn { Name = "eb_created_by_id", Type = (int)EbDbTypes.Decimal, Value = Convert.ToInt32(dataRow["eb_created_by"])},
                    new SingleColumn { Name = "eb_created_by_name", Type = (int)EbDbTypes.String, Value = this.SolutionObj.Users[Convert.ToInt32(dataRow["eb_created_by"])]},
                    new SingleColumn { Name = "eb_created_at", Type = (int)EbDbTypes.String, Value = dt.ConvertFromUtc(this.UserObj.TimeZone).ToString("dd-MM-yyyy hh:mm tt")}
                },
                    RowId = Convert.ToInt32(dataRow["id"]),
                    LocId = Convert.ToInt32(dataRow["eb_loc_id"])
                });
            }
        }

        public void GetFormattedData(EbDataTable dataTable, SingleTable Table, TableSchema _table = null)
        {
            //master table eb columns : eb_loc_id, eb_ver_id, eb_lock, eb_push_id, eb_src_id, id
            //normal table eb columns : eb_loc_id, id
            //grid table eb columns   : eb_loc_id, id, eb_row_num

            foreach (EbDataRow dataRow in dataTable.Rows)
            {
                int _locId = 0, i = 0, j = 0;
                int _rowId = 0;
                if (_table != null)
                {
                    _locId = Convert.ToInt32(dataRow[i++]);
                    if (_table.TableName.Equals(this.FormSchema.MasterTable))
                    {
                        if (this.FormData != null)
                        {
                            this.FormData.FormVersionId = Convert.ToInt32(dataRow[i++]);
                            this.FormData.IsLocked = dataRow[i++].ToString().Equals("T");
                            this.FormData.DataPushId = dataRow[i++].ToString();
                            this.FormData.SourceId = Convert.ToInt32(dataRow[i++]);
                        }
                        else
                            i += 4;
                    }
                    _rowId = Convert.ToInt32(dataRow[i]);
                    for (; j < Table.Count; j++)
                    {
                        if (Table[j].RowId == _rowId)
                            break;
                    }
                    if (j < Table.Count)// skipping duplicate rows in dataTable
                        continue;
                }

                SingleRow Row = new SingleRow() { RowId = _rowId, LocId = _locId };
                if (_table != null)
                {
                    this.GetFormattedColumn(dataTable.Columns["id"], dataRow, Row, null);
                    if (_table.TableType == WebFormTableTypes.Grid)
                        this.GetFormattedColumn(dataTable.Columns["eb_row_num"], dataRow, Row, null);
                    for (int k = 0; k < _table.Columns.Count; k++)
                    {
                        EbControl _control = _table.Columns[k].Control;
                        this.GetFormattedColumn(dataTable.Columns[_control.Name], dataRow, Row, _control);
                    }
                }
                else
                {
                    for (int k = 0; k < dataTable.Columns.Count; k++)
                    {
                        this.GetFormattedColumn(dataTable.Columns[k], dataRow, Row, null);
                    }
                }
                Table.Add(Row);
            }
        }

        private void GetFormattedColumn(EbDataColumn dataColumn, EbDataRow dataRow, SingleRow Row, EbControl _control)
        {
            if (_control != null)
            {
                if (_control.DoNotPersist && !_control.IsSysControl)
                {
                    Row.Columns.Add(new SingleColumn()
                    {
                        Name = _control.Name,
                        Type = (int)_control.EbDbType,
                        Value = null,
                        Control = _control,
                        ObjType = _control.ObjType
                    });
                    return;
                }
            }
            object _formattedData = null;
            string _displayMember = null;

            if (dataColumn == null || dataRow.IsDBNull(dataColumn.ColumnIndex))
            {
                if (_control != null && (_control.EbDbType == EbDbTypes.Decimal || _control.EbDbType == EbDbTypes.Int32))
                    _displayMember = "0.00";
                else if (dataColumn != null && (dataColumn.Type == EbDbTypes.Int32 || dataColumn.Type == EbDbTypes.Int64 || dataColumn.Type == EbDbTypes.Decimal || dataColumn.Type == EbDbTypes.Double))
                    _displayMember = "0.00";
            }
            else if (_control != null)
            {
                if (_control is EbDate || _control is EbDGDateColumn || _control is EbSysCreatedAt || _control is EbSysModifiedAt || _control is EbDGCreatedAtColumn || _control is EbDGModifiedAtColumn)
                {
                    EbDateType _type = _control is EbDate ? (_control as EbDate).EbDateType :
                        _control is EbDGDateColumn ? (_control as EbDGDateColumn).EbDateType :
                        _control is EbSysCreatedAt ? (_control as EbSysCreatedAt).EbDateType :
                        _control is EbSysModifiedAt ? (_control as EbSysModifiedAt).EbDateType :
                        _control is EbDGCreatedAtColumn ? (_control as EbDGCreatedAtColumn).EbDateType :
                        (_control as EbDGModifiedAtColumn).EbDateType;
                    DateTime dt = Convert.ToDateTime(dataRow[dataColumn.ColumnIndex]);
                    DateTime dt_cov = dt.ConvertFromUtc(this.UserObj.Preference.TimeZone);
                    if (_type == EbDateType.Date)
                    {
                        if (_control is EbSysCreatedAt || _control is EbSysModifiedAt || _control is EbDGCreatedAtColumn || _control is EbDGModifiedAtColumn)
                        {
                            _formattedData = dt_cov.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture);
                            _displayMember = dt_cov.ToString(this.UserObj.Preference.GetShortDatePattern(), CultureInfo.InvariantCulture);
                        }
                        else
                        {
                            DateShowFormat _showtype = _control is EbDate ? (_control as EbDate).ShowDateAs_ : (_control as EbDGDateColumn).EbDate.ShowDateAs_;
                            if (_showtype == DateShowFormat.Year_Month)
                            {
                                _formattedData = dt.ToString("MM/yyyy", CultureInfo.InvariantCulture);
                                _displayMember = _formattedData.ToString();
                            }
                            else
                            {
                                _formattedData = dt.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture);
                                _displayMember = dt.ToString(this.UserObj.Preference.GetShortDatePattern(), CultureInfo.InvariantCulture);
                            }
                        }
                    }
                    else if (_type == EbDateType.DateTime)
                    {
                        _formattedData = dt_cov.ToString("yyyy-MM-dd HH:mm:ss", CultureInfo.InvariantCulture);
                        _displayMember = dt_cov.ToString(this.UserObj.Preference.GetShortDatePattern() + " " + this.UserObj.Preference.GetShortTimePattern(), CultureInfo.InvariantCulture);
                    }
                    else
                    {
                        _formattedData = dt_cov.ToString("HH:mm:ss", CultureInfo.InvariantCulture);
                        _displayMember = dt_cov.ToString(this.UserObj.Preference.GetShortTimePattern(), CultureInfo.InvariantCulture);
                    }
                }
                else if (_control is EbSysLocation)
                {
                    int loc_id = Convert.ToInt32(dataRow[dataColumn.ColumnIndex]);
                    if (_control.IsDisable)
                    {
                        EbSysLocDM dm = (_control as EbSysLocation).DisplayMember;
                        if (this.SolutionObj.Locations.ContainsKey(loc_id))
                        {
                            if (dm == EbSysLocDM.LongName)
                            {
                                _formattedData = loc_id + "$$" + this.SolutionObj.Locations[loc_id].LongName;
                                _displayMember = this.SolutionObj.Locations[loc_id].LongName;
                            }
                            else
                            {
                                _formattedData = loc_id + "$$" + this.SolutionObj.Locations[loc_id].ShortName;
                                _displayMember = this.SolutionObj.Locations[loc_id].ShortName;
                            }
                        }
                    }
                    else
                    {
                        _formattedData = loc_id;
                    }
                }
                else if (_control is EbSysCreatedBy || _control is EbSysModifiedBy || _control is EbDGCreatedByColumn || _control is EbDGModifiedByColumn)
                {
                    int user_id = Convert.ToInt32(dataRow[dataColumn.ColumnIndex]);
                    if (this.SolutionObj.Users != null && this.SolutionObj.Users.ContainsKey(user_id))
                    {
                        _formattedData = user_id + "$$" + this.SolutionObj.Users[user_id];
                        _displayMember = this.SolutionObj.Users[user_id];
                    }
                }
                else if (_control is EbRadioButton)
                {
                    EbRadioButton btn = _control as EbRadioButton;
                    if (btn.ValueType == EbValueType.Boolean)
                    {
                        if (dataRow[dataColumn.ColumnIndex].ToString() == "T")
                            _formattedData = "true";
                        else
                            _formattedData = "false";

                    }
                }
                else if (_control.EbDbType == EbDbTypes.Decimal || _control.EbDbType == EbDbTypes.Int32)
                {
                    _formattedData = Convert.ToDouble(dataRow[dataColumn.ColumnIndex]);
                    _displayMember = string.Format("{0:0.00}", _formattedData);
                }
                else
                    _formattedData = dataRow[dataColumn.ColumnIndex];
            }
            else if (dataColumn.Type == EbDbTypes.Date)
            {
                DateTime dt = Convert.ToDateTime(dataRow[dataColumn.ColumnIndex]);
                _formattedData = dt.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture);
                _displayMember = dt.ToString(this.UserObj.Preference.GetShortDatePattern(), CultureInfo.InvariantCulture);
            }
            else if (dataColumn.Type == EbDbTypes.Int32 || dataColumn.Type == EbDbTypes.Int64 || dataColumn.Type == EbDbTypes.Decimal || dataColumn.Type == EbDbTypes.Double)
            {
                _formattedData = Convert.ToDouble(dataRow[dataColumn.ColumnIndex]);
                _displayMember = string.Format("{0:0.00}", _formattedData);
            }
            else
                _formattedData = dataRow[dataColumn.ColumnIndex];

            Row.Columns.Add(new SingleColumn()
            {
                Name = dataColumn.ColumnName,
                Type = _control == null ? (int)dataColumn.Type : (int)_control.EbDbType,
                Value = _formattedData,
                Control = _control,
                F = _displayMember ?? (_formattedData == null ? string.Empty : _formattedData.ToString()),
                ObjType = _control == null ? string.Empty : _control.ObjType
            });
        }

        public void PostFormatFormData()// fill ps displaymembers, columns in FormData
        {
            foreach (KeyValuePair<string, SingleTable> Table in this.FormData.MultipleTables)
            {
                foreach (SingleRow Row in Table.Value)
                {
                    foreach (SingleColumn Column in Row.Columns)
                    {
                        if (Column.Control != null && (Column.Control is EbPowerSelect || Column.Control is EbDGPowerSelectColumn))
                        {
                            string EbSid, VmName, DmName = string.Empty;
                            DVColumnCollection DmsColl;
                            bool RenderAsSS = false;

                            if (Column.Control is EbPowerSelect)
                            {
                                EbPowerSelect psCtrl = Column.Control as EbPowerSelect;
                                EbSid = psCtrl.EbSid;
                                VmName = psCtrl.ValueMember.Name;
                                RenderAsSS = psCtrl.RenderAsSimpleSelect;
                                DmName = RenderAsSS ? psCtrl.DisplayMember.Name : string.Empty;
                                DmsColl = psCtrl.DisplayMembers;
                            }
                            else
                            {
                                EbDGPowerSelectColumn psColCtrl = Column.Control as EbDGPowerSelectColumn;
                                EbSid = psColCtrl.EbSid;
                                VmName = psColCtrl.ValueMember.Name;
                                DmsColl = psColCtrl.DisplayMembers;
                            }

                            if (Column.Value == null || string.IsNullOrEmpty(Convert.ToString(Column.Value)) || !this.FormData.PsDm_Tables.ContainsKey(EbSid))
                                continue;

                            //List<SingleRow> Cols = new List<SingleRow>();
                            Dictionary<string, List<dynamic>> Rows = new Dictionary<string, List<dynamic>>();
                            //Dictionary<int, string[]> Disp = new Dictionary<int, string[]>();//original
                            Dictionary<int, Dictionary<string, string>> DispM_dup = new Dictionary<int, Dictionary<string, string>>();//duplicate
                            string[] temp = Convert.ToString(Column.Value).Split(",");
                            int[] vms = Array.ConvertAll<string, int>(temp, int.Parse);
                            SingleTable tbl = this.FormData.PsDm_Tables[EbSid];

                            for (int i = 0; i < vms.Length; i++)
                            {
                                SingleRow _row = tbl.FirstOrDefault(e => Convert.ToInt32(e[VmName]) == vms[i]);
                                if (_row != null)
                                {
                                    foreach (SingleColumn _col in _row.Columns)
                                    {
                                        if (!Rows.ContainsKey(_col.Name))
                                            Rows.Add(_col.Name, new List<dynamic>());
                                        Rows[_col.Name].Add(_col.Value);
                                    }

                                    //Cols.Add(_row);
                                    if (RenderAsSS)
                                    {
                                        //Disp.Add(vms[i], _row[DmName]);
                                        DispM_dup.Add(vms[i], new Dictionary<string, string> { { VmName, _row[DmName] } });
                                    }
                                    else
                                    {
                                        string[] _dm = new string[DmsColl.Count];
                                        Dictionary<string, string> __d = new Dictionary<string, string>();
                                        for (int j = 0; j < DmsColl.Count; j++)
                                        {
                                            _dm[j] = Convert.ToString(_row[DmsColl[j].Name]);
                                            __d.Add(DmsColl[j].Name, Convert.ToString(_row[DmsColl[j].Name]));
                                        }
                                        //Disp.Add(vms[i], _dm);
                                        DispM_dup.Add(vms[i], __d);
                                    }
                                }
                            }
                            //Column.D = Disp;//original
                            Column.D = DispM_dup;//duplicate
                            Column.R = Rows;
                        }
                    }
                }
            }
        }

        //For Normal Mode
        public void RefreshFormData(IDatabase DataDB, Service service, bool backup = false, bool includePushData = false)
        {
            int formCount = (this.ExeDataPusher && includePushData) ? this.DataPushers.Count + 1 : 1;
            string[] psquery = new string[formCount];
            int[] qrycount = new int[formCount];
            EbWebForm[] FormCollection = new EbWebForm[formCount];
            string query = QueryGetter.GetSelectQuery(this, DataDB, service, out psquery[0], out qrycount[0]);
            FormCollection[0] = this;

            if (this.ExeDataPusher && includePushData)
            {
                for (int i = 0; i < this.DataPushers.Count; i++)
                {
                    query += QueryGetter.GetSelectQuery(this.DataPushers[i].WebForm, DataDB, service, out psquery[i + 1], out qrycount[i + 1]);
                    FormCollection[i + 1] = this.DataPushers[i].WebForm;
                }
            }

            DbParameter[] param = new DbParameter[]
            {
                DataDB.GetNewParameter(this.FormSchema.MasterTable + "_id", EbDbTypes.Int32, this.TableRowId),
                DataDB.GetNewParameter(this.FormSchema.MasterTable + "_eb_ver_id", EbDbTypes.Int32, this.RefId.Split("-")[4])
            };
            EbDataSet dataset = null;
            if (this.DbConnection == null)
                dataset = DataDB.DoQueries(query, param);
            else
                dataset = DataDB.DoQueries(this.DbConnection, query, param);

            Console.WriteLine("From RefreshFormData : Query count = " + qrycount.Join(",") + " DataTable count = " + dataset.Tables.Count);

            for (int i = 0, start = 0; i < formCount; start += qrycount[i], i++)
            {
                EbDataSet ds = new EbDataSet();
                ds.Tables.AddRange(dataset.Tables.GetRange(start, qrycount[i]));
                FormCollection[i].RefreshFormDataInner(ds, DataDB, i == 0 ? psquery[i] : string.Empty, backup);
            }
            Console.WriteLine("No Exception in RefreshFormData");
        }

        private void RefreshFormDataInner(EbDataSet dataset, IDatabase DataDB, string psquery, bool backup)
        {
            WebFormSchema _schema = this.FormSchema;
            WebformData _FormData;
            if (backup)
            {
                this.FormDataBackup = new WebformData() { MasterTable = _schema.MasterTable };
                _FormData = this.FormDataBackup;
            }
            else
            {
                this.FormData = new WebformData() { MasterTable = _schema.MasterTable };
                _FormData = this.FormData;
                this.GetDGsEmptyModel();
            }

            for (int i = 0; i < _schema.Tables.Count && dataset.Tables.Count >= _schema.Tables.Count; i++)
            {
                EbDataTable dataTable = dataset.Tables[i];////
                SingleTable Table = new SingleTable();

                if (_schema.Tables[i].TableType == WebFormTableTypes.Approval)
                    this.GetFormattedDataApproval(dataTable, Table);
                else
                    this.GetFormattedData(dataTable, Table, _schema.Tables[i]);

                if (!_FormData.MultipleTables.ContainsKey(_schema.Tables[i].TableName) && Table.Count > 0)
                    _FormData.MultipleTables.Add(_schema.Tables[i].TableName, Table);
            }

            if (!_FormData.MultipleTables.ContainsKey(_FormData.MasterTable))
            {
                if (this.DataPusherConfig != null)
                    return;
                string t = "From RefreshFormData - TABLE : " + _FormData.MasterTable + "   ID : " + this.TableRowId + "\nData Not Found";
                Console.WriteLine(t);
                throw new FormException("Error in loading data", (int)HttpStatusCodes.INTERNAL_SERVER_ERROR, t, string.Empty);
            }
            else
            {
                this.TableRowId = _FormData.MultipleTables[_FormData.MasterTable][0].RowId;
                this.LocationId = _FormData.MultipleTables[_FormData.MasterTable][0].LocId;
            }

            if (dataset.Tables.Count > _schema.Tables.Count)
            {
                int tableIndex = _schema.Tables.Count;
                int mngUsrCount = 0;
                SingleTable UserTable = null;
                foreach (Object Ctrl in _schema.ExtendedControls)//ManageUser Controls + Manage Location Control
                {
                    SingleTable Table = new SingleTable();
                    if (!(UserTable != null && Ctrl is EbProvisionUser))
                        this.GetFormattedData(dataset.Tables[tableIndex], Table);

                    if (Ctrl is EbProvisionUser)
                    {
                        Dictionary<string, dynamic> _d = new Dictionary<string, dynamic>();
                        if (UserTable == null)
                            UserTable = Table;
                        else
                            tableIndex--; //one query is used to select required user records
                        if (UserTable.Count > mngUsrCount)
                        {
                            _d.Add("id", UserTable[mngUsrCount]["id"]);
                            foreach (UsrLocField _f in (Ctrl as EbProvisionUser).PersistingFields)
                            {
                                _d.Add(_f.Name, UserTable[mngUsrCount][_f.Name]);
                            }
                            mngUsrCount++;
                        }
                        _FormData.MultipleTables[(Ctrl as EbProvisionUser).VirtualTable][0].Columns.Add(new SingleColumn()
                        {
                            Name = (Ctrl as EbProvisionUser).Name,
                            Type = (int)EbDbTypes.String,
                            Value = JsonConvert.SerializeObject(_d)
                        });
                    }
                    else if (Ctrl is EbProvisionLocation)
                    {
                        Dictionary<string, dynamic> _d = new Dictionary<string, dynamic>();
                        if (Table.Count == 1)
                        {
                            _d.Add("id", Table[0]["id"]);
                            _d.Add("longname", Table[0]["longname"]);
                            _d.Add("shortname", Table[0]["shortname"]);
                            _d.Add("image", Table[0]["image"]);
                            _d.Add("meta_json", Table[0]["meta_json"]);
                        }
                        _FormData.MultipleTables[(Ctrl as EbProvisionLocation).VirtualTable][0].Columns.Add(new SingleColumn()
                        {
                            Name = (Ctrl as EbProvisionLocation).Name,
                            Type = (int)EbDbTypes.String,
                            Value = JsonConvert.SerializeObject(_d)
                        });
                    }

                    tableIndex++;
                }
            }

            foreach (Object Ctrl in _schema.ExtendedControls)
            {
                if (Ctrl is EbFileUploader)
                {
                    if (this.FormGlobals == null)
                        this.FormGlobals = GlobalsGenerator.GetFormAsFlatGlobal(this, _FormData);
                    string context = this.RefId.Split("-")[3] + "_" + this.TableRowId.ToString();//context format = objectId_rowId_ControlId
                    string cxt2 = (Ctrl as EbFileUploader).ExeContextCode(this.FormGlobals, false);
                    string qry = (Ctrl as EbFileUploader).GetSelectQuery(DataDB, string.IsNullOrEmpty(cxt2));

                    DbParameter[] param = new DbParameter[]
                    {
                        DataDB.GetNewParameter("id", EbDbTypes.Int32, this.TableRowId),
                        DataDB.GetNewParameter("context", EbDbTypes.String, context),
                        DataDB.GetNewParameter("context_sec", EbDbTypes.String, cxt2 ?? string.Empty),
                        DataDB.GetNewParameter("eb_ver_id", EbDbTypes.Int32, this.RefId.Split("-")[4])
                    };

                    EbDataTable dt;
                    if (this.DbConnection == null)
                        dt = DataDB.DoQuery(qry, param);
                    else
                        dt = DataDB.DoQuery(this.DbConnection, qry, param);

                    SingleTable Table = new SingleTable();
                    this.GetFormattedData(dt, Table);

                    List<FileMetaInfo> _list = new List<FileMetaInfo>();
                    foreach (SingleRow dr in Table)
                    {
                        FileMetaInfo info = new FileMetaInfo
                        {
                            FileRefId = Convert.ToInt32(dr["id"]),
                            FileName = dr["filename"],
                            Meta = JsonConvert.DeserializeObject<Dictionary<string, List<string>>>(dr["tags"] as string),
                            UploadTime = dr["uploadts"],
                            FileCategory = (EbFileCategory)Convert.ToInt32(dr["filecategory"])
                        };

                        if (!_list.Contains(info))
                            _list.Add(info);
                    }
                    SingleTable _Table = new SingleTable {
                            new SingleRow() {
                                Columns = new List<SingleColumn> {
                                    new SingleColumn { Name = "Files", Type = (int)EbDbTypes.Json, Value = JsonConvert.SerializeObject(_list) }
                                }
                            }
                        };
                    _FormData.ExtendedTables.Add((Ctrl as EbControl).EbSid, _Table);//fup
                }
            }


            if (!psquery.IsNullOrEmpty() && !backup)
            {
                List<DbParameter> param = new List<DbParameter>();
                param.Add(DataDB.GetNewParameter(_FormData.MasterTable + "_id", EbDbTypes.Int32, this.TableRowId));
                this.LocationId = _FormData.MultipleTables[_FormData.MasterTable][0].LocId;

                for (int i = 0; i < _schema.Tables.Count && dataset.Tables.Count >= _schema.Tables.Count; i++)
                {
                    if (dataset.Tables[i].Rows.Count > 0)
                    {
                        EbDataRow dataRow = dataset.Tables[i].Rows[0];
                        foreach (EbDataColumn dataColumn in dataset.Tables[i].Columns)
                        {
                            DbParameter t = param.Find(e => e.ParameterName == dataColumn.ColumnName);
                            if (t == null)
                            {
                                if (dataRow.IsDBNull(dataColumn.ColumnIndex))
                                {
                                    var p = DataDB.GetNewParameter(dataColumn.ColumnName, dataColumn.Type);
                                    p.Value = DBNull.Value;
                                    param.Add(p);
                                }
                                else
                                    param.Add(DataDB.GetNewParameter(dataColumn.ColumnName, dataColumn.Type, dataRow[dataColumn.ColumnIndex]));
                            }
                        }
                    }
                }
                //if eb_loc_id control is not present then form data entered location adding as 'eb_loc_id' 
                DbParameter tt = param.Find(e => e.ParameterName == "eb_loc_id");
                if (tt == null)
                    param.Add(DataDB.GetNewParameter("eb_loc_id", EbDbTypes.Decimal, this.LocationId));

                EbDataSet ds;
                if (this.DbConnection == null)
                    ds = DataDB.DoQueries(psquery, param.ToArray());
                else
                    ds = DataDB.DoQueries(this.DbConnection, psquery, param.ToArray());

                if (ds.Tables.Count > 0)
                {
                    int tblIdx = 0;
                    foreach (TableSchema Tbl in _schema.Tables)//PowerSelect
                    {
                        foreach (ColumnSchema Col in Tbl.Columns)
                        {
                            if (Col.Control is EbPowerSelect || Col.Control is EbDGPowerSelectColumn)
                            {
                                SingleTable Table = new SingleTable();
                                this.GetFormattedData(ds.Tables[tblIdx], Table);
                                //_FormData.ExtendedTables.Add(Col.Control.EbSid, Table);//ps//dup for backward compatibility
                                _FormData.PsDm_Tables.Add(Col.Control.EbSid, Table);
                                tblIdx++;
                            }
                        }
                    }
                }

                this.PostFormatFormData();
            }

            if (!backup)
                this.ExeDeleteCancelScript(DataDB);
        }

        //For Prefill Mode
        public void RefreshFormData(IDatabase DataDB, Service service, List<Param> _params)
        {
            WebFormSchema _schema = this.FormSchema;//this.GetWebFormSchema();
            this.FormData = new WebformData
            {
                MasterTable = _schema.MasterTable
            };
            Dictionary<string, string> QrsDict = new Dictionary<string, string>();
            List<DbParameter> param = new List<DbParameter>();
            for (int i = 0; i < _params.Count; i++)
            {
                for (int j = 0; j < _schema.Tables.Count; j++)
                {
                    for (int k = 0; k < _schema.Tables[j].Columns.Count; k++)
                    {
                        if (_schema.Tables[j].Columns[k].ColumnName.Equals(_params[i].Name))
                        {
                            if (_schema.Tables[j].Columns[k].Control is EbPowerSelect)
                            {
                                string t = (_schema.Tables[j].Columns[k].Control as EbPowerSelect).GetSelectQuery(DataDB, service, _params[i].Value);
                                QrsDict.Add((_schema.Tables[j].Columns[k].Control as EbPowerSelect).EbSid, t);
                            }
                            if (!this.FormData.MultipleTables.ContainsKey(_schema.Tables[j].TableName))
                            {
                                SingleTable tbl = new SingleTable();
                                tbl.Add(new SingleRow());
                                this.FormData.MultipleTables.Add(_schema.Tables[j].TableName, tbl);
                            }
                            SingleColumn col = new SingleColumn()
                            {
                                Name = _params[i].Name,
                                Type = _schema.Tables[j].Columns[k].EbDbType,
                                Value = _params[i].ValueTo,
                                Control = _schema.Tables[j].Columns[k].Control
                            };
                            param.Add(DataDB.GetNewParameter(col.Name, (EbDbTypes)col.Type, col.Value));
                            this.FormData.MultipleTables[_schema.Tables[j].TableName][0].Columns.Add(col);
                        }
                    }
                }
            }
            if (QrsDict.Count > 0)
            {
                EbDataSet dataset = DataDB.DoQueries(string.Join(" ", QrsDict.Select(d => d.Value)), param.ToArray());
                int i = 0;
                foreach (KeyValuePair<string, string> item in QrsDict)
                {
                    SingleTable Table = new SingleTable();
                    this.GetFormattedData(dataset.Tables[i++], Table);
                    //this.FormData.ExtendedTables.Add(item.Key, Table);//ps//dup for backward compatibility
                    this.FormData.PsDm_Tables.Add(item.Key, Table);
                }
                this.PostFormatFormData();
            }
        }

        public string Save(IDatabase DataDB, Service service)
        {
            this.DbConnection = DataDB.GetNewConnection();
            string resp = string.Empty;
            try
            {
                this.DbConnection.Open();
                this.DbTransaction = this.DbConnection.BeginTransaction();

                bool IsUpdate = this.TableRowId > 0;
                if (IsUpdate)
                {
                    this.RefreshFormData(DataDB, service, true, true);
                    resp = "Updated: " + this.Update(DataDB);
                }
                else
                {
                    this.TableRowId = this.Insert(DataDB);
                    resp = "Inserted: " + this.TableRowId;
                    Console.WriteLine("New record inserted. Table :" + this.TableName + ", Id : " + this.TableRowId);
                }
                this.RefreshFormData(DataDB, service, false, true);
                resp += " - AuditTrail: " + EbAuditTrail.UpdateAuditTrail(this, DataDB);
                resp += " - AfterSave: " + this.AfterSave(DataDB, IsUpdate);
                this.DbTransaction.Commit();
            }
            catch (Exception ex1)
            {
                try
                {
                    this.DbTransaction.Rollback();
                }
                catch (Exception ex2)
                {
                    Console.WriteLine($"Rollback Exception Type: {ex2.GetType()}\nMessage: {ex2.Message}");
                }
                throw new FormException("Exception in Form data save", (int)HttpStatusCodes.INTERNAL_SERVER_ERROR, ex1.Message, ex1.StackTrace);
            }
            return resp;
        }

        public int Insert(IDatabase DataDB)
        {
            string fullqry = string.Empty;
            string _extqry = string.Empty;
            List<DbParameter> param = new List<DbParameter>();
            int i = 0;
            List<EbWebForm> FormCollection = new List<EbWebForm>() { this };
            if (this.ExeDataPusher)
            {
                this.PrepareWebFormData();
                foreach (EbDataPusher pusher in this.DataPushers)
                {
                    FormCollection.Add(pusher.WebForm);
                }
            }
            foreach (EbWebForm WebForm in FormCollection)
            {
                foreach (KeyValuePair<string, SingleTable> entry in WebForm.FormData.MultipleTables)
                {
                    foreach (SingleRow row in entry.Value)
                    {
                        string _cols = string.Empty;
                        string _values = string.Empty;

                        foreach (SingleColumn cField in row.Columns)
                        {
                            if (cField.Control != null)
                                cField.Control.ParameterizeControl(DataDB, param, WebForm.TableName, cField, true, ref i, ref _cols, ref _values, ref _extqry, WebForm.UserObj, null);
                            else
                                WebForm.ParameterizeUnknown(DataDB, param, cField, true, ref i, ref _cols, ref _values);
                        }

                        string _qry = QueryGetter.GetInsertQuery(WebForm, DataDB, entry.Key, true);
                        fullqry += string.Format(_qry, _cols, _values);
                    }
                }
                param.Add(DataDB.GetNewParameter(WebForm.TableName + "_eb_ver_id", EbDbTypes.Int32, WebForm.RefId.Split("-")[4]));
            }

            fullqry += _extqry;
            fullqry += this.GetFileUploaderUpdateQuery(DataDB, param, ref i);

            param.Add(DataDB.GetNewParameter("eb_createdby", EbDbTypes.Int32, this.UserObj.UserId));
            param.Add(DataDB.GetNewParameter("eb_loc_id", EbDbTypes.Int32, this.LocationId));
            fullqry += string.Format("SELECT eb_currval('{0}_id_seq');", this.TableName);

            EbDataSet tem = DataDB.DoQueries(this.DbConnection, fullqry, param.ToArray());
            EbDataTable temp = tem.Tables[tem.Tables.Count - 1];
            int _rowid = temp.Rows.Count > 0 ? Convert.ToInt32(temp.Rows[0][0]) : 0;
            return _rowid;
        }

        public int Update(IDatabase DataDB)
        {
            string fullqry = string.Empty;
            string _extqry = string.Empty;
            List<DbParameter> param = new List<DbParameter>();
            int i = 0;
            List<EbWebForm> FormCollection = new List<EbWebForm>() { this };
            if (this.ExeDataPusher)
            {
                this.PrepareWebFormData();
                foreach (EbDataPusher pusher in this.DataPushers)
                {
                    FormCollection.Add(pusher.WebForm);
                }
            }

            foreach (EbWebForm WebForm in FormCollection)
            {
                foreach (KeyValuePair<string, SingleTable> entry in WebForm.FormData.MultipleTables)
                {
                    foreach (SingleRow row in entry.Value)
                    {
                        string _colvals = string.Empty;
                        string _temp = string.Empty;
                        int _rowId = row.RowId;
                        if (_rowId > 0)
                        {
                            if (!row.IsDelete)
                            {
                                foreach (SingleColumn cField in row.Columns)
                                {
                                    if (cField.Control != null)
                                    {
                                        SingleColumn ocF = WebForm.FormDataBackup.MultipleTables[entry.Key].Find(e => e.RowId == row.RowId).Columns.Find(e => e.Name.Equals(cField.Name));
                                        cField.Control.ParameterizeControl(DataDB, param, WebForm.TableName, cField, false, ref i, ref _colvals, ref _temp, ref _extqry, WebForm.UserObj, ocF);
                                    }
                                    else
                                        WebForm.ParameterizeUnknown(DataDB, param, cField, false, ref i, ref _colvals, ref _temp);
                                }
                            }

                            string _qry = QueryGetter.GetUpdateQuery(WebForm, DataDB, entry.Key, row.IsDelete);
                            fullqry += string.Format(_qry, _colvals, row.RowId);
                        }
                        else
                        {
                            string _cols = string.Empty;
                            string _vals = string.Empty;

                            foreach (SingleColumn cField in row.Columns)
                            {
                                if (cField.Control != null)
                                    cField.Control.ParameterizeControl(DataDB, param, WebForm.TableName, cField, true, ref i, ref _cols, ref _vals, ref _extqry, WebForm.UserObj, null);
                                else
                                    WebForm.ParameterizeUnknown(DataDB, param, cField, true, ref i, ref _cols, ref _vals);
                            }
                            string _qry = QueryGetter.GetInsertQuery(WebForm, DataDB, entry.Key, WebForm.TableRowId == 0);
                            fullqry += string.Format(_qry, _cols, _vals);
                        }
                    }
                }
                param.Add(DataDB.GetNewParameter(WebForm.TableName + "_id", EbDbTypes.Int32, WebForm.TableRowId));
                param.Add(DataDB.GetNewParameter(WebForm.TableName + "_eb_ver_id", EbDbTypes.Int32, WebForm.RefId.Split("-")[4]));
            }

            fullqry += _extqry;
            fullqry += GetFileUploaderUpdateQuery(DataDB, param, ref i);
            param.Add(DataDB.GetNewParameter("eb_loc_id", EbDbTypes.Int32, this.LocationId));
            param.Add(DataDB.GetNewParameter("eb_createdby", EbDbTypes.Int32, this.UserObj.UserId));
            param.Add(DataDB.GetNewParameter("eb_modified_by", EbDbTypes.Int32, this.UserObj.UserId));
            return DataDB.DoNonQuery(this.DbConnection, fullqry, param.ToArray());
        }

        public string GetFileUploaderUpdateQuery(IDatabase DataDB, List<DbParameter> param, ref int i)
        {
            string _qry = string.Empty;
            foreach (object control in this.FormSchema.ExtendedControls)
            {
                if (control is EbFileUploader)
                {
                    if (this.FormGlobals == null)
                        this.FormGlobals = GlobalsGenerator.GetFormAsFlatGlobal(this, this.FormData);
                    EbFileUploader _c = control as EbFileUploader;
                    string secCxtGet = _c.ExeContextCode(this.FormGlobals, false);
                    string secCxtSet = _c.ExeContextCode(this.FormGlobals, true);

                    _qry = _c.GetUpdateQuery2(DataDB, param, this.FormData.ExtendedTables[_c.Name ?? _c.EbSid], this.TableName, this.RefId.Split("-")[3], ref i, this.TableRowId, secCxtGet, secCxtSet);
                }
            }
            return _qry;
        }

        private bool ParameterizeUnknown(IDatabase DataDB, List<DbParameter> param, SingleColumn cField, bool ins, ref int i, ref string _col, ref string _val)
        {
            if (EbColumnExtra.Params.ContainsKey(cField.Name))
            {
                if (string.IsNullOrEmpty(cField.Value))
                {
                    var p = DataDB.GetNewParameter(cField.Name + "_" + i, EbColumnExtra.Params[cField.Name]);
                    p.Value = DBNull.Value;
                    param.Add(p);
                }
                else
                {
                    param.Add(DataDB.GetNewParameter(cField.Name + "_" + i, EbColumnExtra.Params[cField.Name], cField.Value));
                }
                if (ins)
                {
                    _col += string.Concat(cField.Name, ", ");
                    _val += string.Concat("@", cField.Name, "_", i, ", ");
                }
                else
                    _col += string.Concat(cField.Name, "=@", cField.Name, "_", i, ", ");
                i++;
                return true;
            }
            else
                Console.WriteLine($"Unknown parameter found in formdata... \nForm RefId : {this.RefId}\nName : {cField.Name}\nType : {cField.Type}\nValue : {cField.Value}");
            return false;
        }

        //form data submission using PushJson and FormGlobals - SQL Job
        public void PrepareWebFormData(IDatabase DataDB, Service service, string PushJson, FormGlobals FormGlobals)
        {
            this.FormData = new WebformData() { MasterTable = this.FormSchema.MasterTable };
            JObject JObj = JObject.Parse(PushJson);

            foreach (TableSchema _table in this.FormSchema.Tables)
            {
                if (JObj[_table.TableName] != null)
                {
                    SingleTable Table = new SingleTable();
                    foreach (JToken jRow in JObj[_table.TableName])
                    {
                        Table.Add(this.GetSingleRow(jRow, _table, FormGlobals));
                    }
                    this.FormData.MultipleTables.Add(_table.TableName, Table);
                }
            }
            this.MergeFormData();

            if (this.TableRowId > 0)//if edit mode then fill or map id by refering FormDataBackup
            {
                this.RefreshFormData(DataDB, service, true, true);

                foreach (KeyValuePair<string, SingleTable> entry in this.FormDataBackup.MultipleTables)
                {
                    if (this.FormData.MultipleTables.ContainsKey(entry.Key))
                    {
                        for (int i = 0; i < entry.Value.Count; i++)
                        {
                            if (i < this.FormData.MultipleTables[entry.Key].Count)
                                this.FormData.MultipleTables[entry.Key][i].RowId = entry.Value[i].RowId;
                            else
                            {
                                this.FormData.MultipleTables[entry.Key].Add(entry.Value[i]);
                                this.FormData.MultipleTables[entry.Key][i].IsDelete = true;
                            }
                        }
                    }
                    else
                    {
                        this.FormData.MultipleTables.Add(entry.Key, entry.Value);
                        foreach (SingleRow Row in this.FormData.MultipleTables[entry.Key])
                            Row.IsDelete = true;
                    }
                }
            }
        }

        //form data submission using PushJson and FormGlobals - SQL Job
        public string Save(IDatabase DataDB)
        {
            this.DbConnection = DataDB.GetNewConnection();
            string resp = string.Empty;
            try
            {
                this.DbConnection.Open();
                this.DbTransaction = this.DbConnection.BeginTransaction();

                bool IsUpdate = this.TableRowId > 0;
                if (IsUpdate)
                {
                    resp = "Updated: " + this.Update(DataDB);
                }
                else
                {
                    this.TableRowId = this.Insert(DataDB);
                    resp = "Inserted: " + this.TableRowId;
                    Console.WriteLine("New record inserted. Table :" + this.TableName + ", Id : " + this.TableRowId);
                }
                resp += " - AuditTrail: " + EbAuditTrail.UpdateAuditTrail(this, DataDB);
                resp += " - AfterSave: " + this.AfterSave(DataDB, IsUpdate);
                this.DbTransaction.Commit();
            }
            catch (Exception ex1)
            {
                try
                {
                    this.DbTransaction.Rollback();
                }
                catch (Exception ex2)
                {
                    Console.WriteLine($"Rollback Exception Type: {ex2.GetType()}\nMessage: {ex2.Message}");
                }
                throw new FormException("Exception in Form data save", (int)HttpStatusCodes.INTERNAL_SERVER_ERROR, ex1.Message, ex1.StackTrace);
            }
            return resp;
        }

        private void PrepareWebFormData()
        {
            DateTime startdt = DateTime.Now;
            FormAsGlobal global = GlobalsGenerator.GetFormAsFlatGlobal(this, this.FormData);
            FormGlobals globals = new FormGlobals() { sourceform = global };
            foreach (EbDataPusher pusher in this.DataPushers)
            {
                pusher.WebForm.DataPusherConfig.SourceRecId = this.TableRowId;
                pusher.WebForm.RefId = pusher.FormRefId;
                pusher.WebForm.UserObj = this.UserObj;
                pusher.WebForm.LocationId = this.LocationId;
                pusher.WebForm.SolutionObj = this.SolutionObj;

                if (!pusher.PushOnlyIf.IsNullOrEmpty())
                {
                    string status = pusher.WebForm.ExecuteCSharpScript(pusher.PushOnlyIf, globals);
                    if (status.Equals(true.ToString()))
                        pusher.WebForm.DataPusherConfig.AllowPush = true;
                }
                else
                    pusher.WebForm.DataPusherConfig.AllowPush = true;

                if (pusher.WebForm.DataPusherConfig.AllowPush)
                {
                    pusher.WebForm.ProcessPushJson(pusher, globals);
                    pusher.WebForm.MergeFormData();
                }
                else
                    pusher.WebForm.FormData = new WebformData();

                if (this.TableRowId > 0)//if edit mode then fill or map the id by refering FormDataBackup
                {
                    if (pusher.WebForm.DataPusherConfig.AllowPush)
                    {
                        if (pusher.WebForm.FormDataBackup != null)
                        {
                            foreach (KeyValuePair<string, SingleTable> entry in pusher.WebForm.FormDataBackup.MultipleTables)
                            {
                                if (pusher.WebForm.FormData.MultipleTables.ContainsKey(entry.Key))
                                {
                                    for (int i = 0; i < entry.Value.Count; i++)
                                    {
                                        if (i < pusher.WebForm.FormData.MultipleTables[entry.Key].Count)
                                            pusher.WebForm.FormData.MultipleTables[entry.Key][i].RowId = entry.Value[i].RowId;
                                        else
                                        {
                                            pusher.WebForm.FormData.MultipleTables[entry.Key].Add(entry.Value[i]);
                                            pusher.WebForm.FormData.MultipleTables[entry.Key][i].IsDelete = true;
                                        }
                                    }
                                }
                                else
                                {
                                    pusher.WebForm.FormData.MultipleTables.Add(entry.Key, entry.Value);
                                    foreach (SingleRow Row in pusher.WebForm.FormData.MultipleTables[entry.Key])
                                        Row.IsDelete = true;
                                }
                            }
                        }
                    }
                    else
                    {
                        pusher.WebForm.FormData = pusher.WebForm.FormDataBackup;
                        foreach (KeyValuePair<string, SingleTable> entry in pusher.WebForm.FormData.MultipleTables)
                        {
                            foreach (SingleRow Row in entry.Value)
                                Row.IsDelete = true;
                        }
                    }
                }
            }
            Console.WriteLine("PrepareWebFormData for Data Pushers. Execution Time = " + (DateTime.Now - startdt).TotalMilliseconds);
        }

        public void ProcessPushJson(EbDataPusher pusher, FormGlobals globals)
        {
            this.FormData = new WebformData() { MasterTable = this.FormSchema.MasterTable };
            JObject JObj = JObject.Parse(pusher.Json);

            foreach (TableSchema _table in this.FormSchema.Tables)
            {
                if (JObj[_table.TableName] != null)
                {
                    SingleTable Table = new SingleTable();
                    foreach (JToken jRow in JObj[_table.TableName])
                    {
                        if (_table.TableType == WebFormTableTypes.Grid && !pusher.SkipLineItemIf.IsNullOrEmpty())
                        {
                            string status = this.ExecuteCSharpScript(pusher.SkipLineItemIf, globals);
                            if (status.Equals(true.ToString()))
                                continue;
                        }
                        Table.Add(this.GetSingleRow(jRow, _table, globals));
                    }
                    this.FormData.MultipleTables.Add(_table.TableName, Table);
                }
            }
        }

        private SingleRow GetSingleRow(JToken JRow, TableSchema _table, FormGlobals globals)
        {
            SingleRow Row = new SingleRow() { RowId = 0 };
            foreach (ColumnSchema _column in _table.Columns)
            {
                if (JRow[_column.ColumnName] != null)
                {
                    JRow[_column.ColumnName] = this.ExecuteCSharpScript(JRow[_column.ColumnName].ToString(), globals);

                    Row.Columns.Add(new SingleColumn
                    {
                        Name = _column.ColumnName,
                        Type = _column.EbDbType,
                        Value = JRow[_column.ColumnName].ToString()
                    });
                }
            }
            return Row;
        }

        private string ExecuteCSharpScript(string code, FormGlobals globals)
        {
            try
            {
                Script valscript = CSharpScript.Create<dynamic>(
                    code,
                    ScriptOptions.Default.WithReferences("Microsoft.CSharp", "System.Core").WithImports("System.Dynamic", "System", "System.Collections.Generic",
                    "System.Diagnostics", "System.Linq"),
                    globalsType: typeof(FormGlobals)
                );
                //var compilation = valscript.GetCompilation();
                //var ilstream = new MemoryStream();
                //var pdbstream = new MemoryStream();
                //compilation.Emit(ilstream, pdbstream);
                valscript.Compile();
                var r = (valscript.RunAsync(globals)).Result.ReturnValue;
                return r.ToString();
            }
            catch (Exception ex)
            {
                Console.WriteLine("Exception in C# Expression evaluation:" + code + " \nMessage : " + ex.Message);
                Console.WriteLine(ex.StackTrace);
                return code;
            }
        }

        //execute sql queries after form data save
        public int AfterSave(IDatabase DataDB, bool IsUpdate)
        {
            string q = string.Empty;
            if (this.AfterSaveRoutines != null && this.AfterSaveRoutines.Count > 0)
            {
                foreach (EbRoutines e in this.AfterSaveRoutines)
                {
                    if (IsUpdate && !e.IsDisabledOnEdit)
                        q += e.Script.Code + ";";
                    else if (!IsUpdate && !e.IsDisabledOnNew)
                        q += e.Script.Code + ";";
                }
            }
            if (!q.Equals(string.Empty))
            {
                List<DbParameter> param = new List<DbParameter>();
                foreach (KeyValuePair<string, SingleTable> item in this.FormData.MultipleTables)
                {
                    if (item.Value.Count == 0)
                        continue;
                    foreach (SingleColumn cField in item.Value[item.Value.Count - 1].Columns)
                    {
                        if (q.Contains("@" + item.Key + "_" + cField.Name) || q.Contains(":" + item.Key + "_" + cField.Name))
                        {
                            if (cField.Value == null)
                            {
                                var p = DataDB.GetNewParameter(item.Key + "_" + cField.Name, (EbDbTypes)cField.Type);
                                p.Value = DBNull.Value;
                                param.Add(p);
                            }
                            else
                                param.Add(DataDB.GetNewParameter(item.Key + "_" + cField.Name, (EbDbTypes)cField.Type, cField.Value));
                        }
                    }
                }
                return DataDB.DoNonQuery(this.DbConnection, q, param.ToArray());
            }
            return 0;
        }

        public void SendMailIfUserCreated(RabbitMqProducer MessageProducer3)
        {
            foreach (EbControl c in this.FormSchema.ExtendedControls)
            {
                if (c is EbProvisionUser)
                    (c as EbProvisionUser).SendMailIfUserCreated(MessageProducer3, this.UserObj.UserId, this.UserObj.FullName, this.UserObj.AuthId, this.SolutionObj.SolutionID);
            }
        }

        //to check whether this form data entry can be delete by executing DisableDelete sql quries
        private bool CanDelete(IDatabase DataDB)
        {
            if (this.DisableDelete != null && this.DisableDelete.Count > 0)
            {
                string q = string.Join(";", this.DisableDelete.Select(e => e.Script.Code));
                DbParameter[] p = new DbParameter[] {
                    DataDB.GetNewParameter("id", EbDbTypes.Int32, this.TableRowId)
                };
                EbDataSet ds = DataDB.DoQueries(q, p);

                for (int i = 0; i < ds.Tables.Count; i++)
                {
                    if (ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0].Count > 0)
                    {
                        if (!this.DisableDelete[i].IsDisabled && Convert.ToInt32(ds.Tables[0].Rows[0][0]) > 0 && !this.DisableDelete[i].IsWarningOnly)
                            return false;
                    }
                }
            }
            return true;
        }

        public int Delete(IDatabase DataDB)
        {
            if (this.CanDelete(DataDB))
            {
                string query = QueryGetter.GetDeleteQuery(this, DataDB);
                DbParameter[] param = new DbParameter[] {
                    DataDB.GetNewParameter("eb_lastmodified_by", EbDbTypes.Int32, this.UserObj.UserId),
                    DataDB.GetNewParameter("id", EbDbTypes.Int32, this.TableRowId)
                };
                return DataDB.UpdateTable(query, param);
            }
            return -1;
        }

        //to check whether this form data entry can be cancel by executing DisableCancel sql quries
        private bool CanCancel(IDatabase DataDB)
        {
            if (this.DisableCancel != null && this.DisableCancel.Count > 0)
            {
                string q = string.Join(";", this.DisableCancel.Select(e => e.Script.Code));
                DbParameter[] p = new DbParameter[] {
                    DataDB.GetNewParameter("id", EbDbTypes.Int32, this.TableRowId)
                };
                EbDataSet ds = DataDB.DoQueries(q, p);

                for (int i = 0; i < ds.Tables.Count; i++)
                {
                    if (ds.Tables[0].Rows.Count > 0 && ds.Tables[0].Rows[0].Count > 0)
                    {
                        if (!this.DisableCancel[i].IsDisabled && Convert.ToInt32(ds.Tables[0].Rows[0][0]) > 0 && !this.DisableCancel[i].IsWarningOnly)
                            return false;
                    }
                }
            }
            return true;
        }

        public int Cancel(IDatabase DataDB)
        {
            if (this.CanCancel(DataDB))
            {
                string query = QueryGetter.GetCancelQuery(this, DataDB);
                DbParameter[] param = new DbParameter[] {
                    DataDB.GetNewParameter("eb_lastmodified_by", EbDbTypes.Int32, this.UserObj.UserId),
                    DataDB.GetNewParameter("id", EbDbTypes.Int32, this.TableRowId)
                };
                return DataDB.UpdateTable(query, param);
            }
            return -1;
        }

        private void ExeDeleteCancelScript(IDatabase DataDB)
        {
            string q = string.Empty;
            if (this.DisableDelete != null && this.DisableDelete.Count > 0)
            {
                q = string.Join(";", this.DisableDelete.Select(e => e.Script.Code));
            }
            if (this.DisableCancel != null && this.DisableCancel.Count > 0)
            {
                q += string.Join(";", this.DisableCancel.Select(e => e.Script.Code));
            }
            if (!q.Equals(string.Empty))
            {
                DbParameter[] p = new DbParameter[] {
                    DataDB.GetNewParameter("id", EbDbTypes.Int32, this.TableRowId)
                };
                EbDataSet ds = DataDB.DoQueries(q, p);
                int i = 0;
                for (; i < this.DisableDelete.Count; i++)
                {
                    if (ds.Tables[i].Rows.Count > 0 && ds.Tables[i].Rows[0].Count > 0)
                    {
                        if (this.DisableDelete[i].IsDisabled || Convert.ToInt32(ds.Tables[i].Rows[0][0]) == 0)
                        {
                            this.FormData.DisableDelete.Add(this.DisableDelete[i].Name, false);
                        }
                        else
                        {
                            this.FormData.DisableDelete.Add(this.DisableDelete[i].Name, true);
                        }
                    }
                }

                for (int j = 0; j < this.DisableCancel.Count; i++, j++)
                {
                    if (ds.Tables[i].Rows.Count > 0 && ds.Tables[i].Rows[0].Count > 0)
                    {
                        if (this.DisableCancel[j].IsDisabled || Convert.ToInt32(ds.Tables[i].Rows[0][0]) == 0)
                        {
                            this.FormData.DisableCancel.Add(this.DisableCancel[j].Name, false);
                        }
                        else
                        {
                            this.FormData.DisableCancel.Add(this.DisableCancel[j].Name, true);
                        }
                    }
                }
            }
        }

        public string GetAuditTrail(IDatabase DataDB, Service Service)
        {
            return EbAuditTrail.GetAuditTrail(this, DataDB, Service);
        }

        public Dictionary<int, List<string>> GetLocBasedPermissions()
        {
            Dictionary<int, List<string>> _perm = new Dictionary<int, List<string>>();
            //New View Edit Delete Cancel Print AuditTrail

            foreach (int locid in this.SolutionObj.Locations.Keys)
            {
                List<string> _temp = new List<string>();
                foreach (EbOperation op in Operations.Enumerator)
                {
                    if (this.HasPermission(op.Name, locid))
                        _temp.Add(op.Name);
                }
                _perm.Add(locid, _temp);
            }
            return _perm;
        }

        public bool HasPermission(string ForWhat, int LocId)
        {
            if (this.UserObj.Roles.Contains(SystemRoles.SolutionOwner.ToString()) ||
                this.UserObj.Roles.Contains(SystemRoles.SolutionAdmin.ToString()) ||
                this.UserObj.Roles.Contains(SystemRoles.SolutionPM.ToString()))
                return true;

            EbOperation Op = EbWebForm.Operations.Get(ForWhat);
            if (!Op.IsAvailableInWeb)
                return false;

            try
            {
                string Ps = string.Concat(this.RefId.Split("-")[2].PadLeft(2, '0'), '-', this.RefId.Split("-")[3].PadLeft(5, '0'), '-', Op.IntCode.ToString().PadLeft(2, '0'));
                string t = this.UserObj.Permissions.FirstOrDefault(p => p.Substring(p.IndexOf("-") + 1).Equals(Ps + ":" + LocId) ||
                            (p.Substring(p.IndexOf("-") + 1, 11).Equals(Ps) && p.Substring(p.LastIndexOf(":") + 1).Equals("-1")));
                if (!t.IsNullOrEmpty())
                    return true;
            }
            catch (Exception e)
            {
                Console.WriteLine("Exception when checking user permission(EbWebForm -> HasPermission): " + e.Message);
            }

            return false;
        }

        public void AfterRedisGet(Service service)
        {
            EbFormHelper.AfterRedisGet(this, service.Redis, null, service);
            SchemaHelper.GetWebFormSchema(this);
            EbFormHelper.InitDataPushers(this, service.Redis, null, service);
        }

        public override void AfterRedisGet(RedisClient Redis, IServiceClient client)
        {
            EbFormHelper.AfterRedisGet(this, Redis, client, null);
            SchemaHelper.GetWebFormSchema(this);
            EbFormHelper.InitDataPushers(this, Redis, client, null);
        }

        public override List<string> DiscoverRelatedRefids()
        {
            return EbFormHelper.DiscoverRelatedRefids(this);
        }
        public override void ReplaceRefid(Dictionary<string, string> RefidMap)
        {
            EbFormHelper.ReplaceRefid(this, RefidMap);
        }
    }
}
